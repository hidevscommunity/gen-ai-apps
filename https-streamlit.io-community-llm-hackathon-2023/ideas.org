* draft ideas
** org mode ftw
*** we can use org mode as the overarching plan that includes all other files.
Each file can be a perspective to look at the system.
Each line a different nuance.
We can see them as filters and groupings and relationships and paths followed in a proof.
See section below for proof information.

** introspector perspective
*** list of sliders for dimensions, each has an emoji and default, each is coefficient in polynomial or tensor
*** rendering with streamlit

**** points are then clickable

*** sliders for object ids as points of memory, show pointers between memory,
**** using graphics to display memory and pointers

*** projection of awareness into a 9d hyperplane.
the view vector as a series of emojis that make a path
each one adds a nuance to the view. abiility to traverse forloops/groups/maps/folds!

*** each input is mapped into a hyperplane of 9d, a point there.
*** each point is a 8d hypersphere.
*** we can project them as points on a line or 2d or 3d.
*** we can fix the other dimensions with sliders.
*** we layout the points with math and guidance.
tulip and graphviz files

** one set of inputs that is the state of the system at all times. the hypersphere. the 9d point.
the git repo.

** viewing as filtering and grouping, your perspective, your vector. we have a view vector : input , that is the dataset you are looking at. default is the set of all sets.
your branch

** deciding as selecting, axiom of choice : input, default none.
your commits

** read these line by line into the chat model and lets be able to choose between then and send them to chat.
your comments on the commits

** be able to send to many models and rank results.
running agents

** be able to edit the input or rate it
git rebase

** interface to open-assistent.io , you.com, huggingface.co backend or front ends like bard, bing, chatgpt, etc.
todo

*** interface to local llm via the git/yaml interface
*** be able to intercept the api calls and mark them up in yaml.
*** wireshark to yaml/emojis and back
*** capture strace and all types of diagnostics
*** think datadog agent

** be able to deploy via terraform
todo

** create cicd like atlantis but with chatops
todo

** make it easy to review lists of data from the app.
org mode emacs

** convert this list into a inputs/dataset on the filesystem
org mode

** convert all the lists!

introspector python and more, proc file system
 
** create central way to dump everything as input and then filter it to create new version!

*** oroborous

** treat all data as inputs in a dataset, even asts, tokens, vectors, models, executables.
unix everything is a file.

** create different views of all data
cat

** structured way to import everything
cat file | grep | import "dataset"

** state of unfolding captured for each object being imported into the model with many views and updates in a huge workflow.
*** capture state of workflow, state of boostrap, state of machine.
*** create yaml representation of each datagram, using emojis.
*** capture execution logs.
*** be able to download executable

* Proof
the proof is following a simpler path in a numerical model that simulates the complex path of the program.
dual representation, digital twins, bi-simulation.

** Coq/metacoq
** Template haskell
** consider if we can treat two executions or logs as bisimulation for coinduction between proofs or executions as harmonies.
** looking for alignment between models.
** paxos protocol for model election.

* quality
** capture and simulate endpoints locally via yaml traces.
** be able to capture and share : tcpdump, strace, perf, protobuf, ltrace, uprobes, debug logs.
