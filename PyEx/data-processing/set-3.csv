source_file,task_id,prompt,code,test_imports,test_list
Benchmark Questions Verification V2.ipynb,2,Write a function to find the shared elements from the given two lists.,"def similar_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1) & set(test_tup2))
  return (res) ",[],"['assert set(similar_elements((3, 4, 5, 6),(5, 7, 4, 10))) == set((4, 5))', 'assert set(similar_elements((1, 2, 3, 4),(5, 4, 3, 7))) == set((3, 4))', 'assert set(similar_elements((11, 12, 14, 13),(17, 15, 14, 13))) == set((13, 14))']"
Benchmark Questions Verification V2.ipynb,3,Write a python function to identify non-prime numbers.,"import math
def is_not_prime(n):
    result = False
    for i in range(2,int(math.sqrt(n)) + 1):
        if n % i == 0:
            result = True
    return result",[],"['assert is_not_prime(2) == False', 'assert is_not_prime(10) == True', 'assert is_not_prime(35) == True', 'assert is_not_prime(37) == False']"
Benchmark Questions Verification V2.ipynb,4,"Write a function to find the n largest integers from a given list of numbers, returned in descending order.","import heapq as hq
def heap_queue_largest(nums,n):
  largest_nums = hq.nlargest(n, nums)
  return largest_nums",[],"['assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65]', 'assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75]', 'assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]']"
Benchmark Questions Verification V2.ipynb,6,Write a python function to check whether the two numbers differ at one bit position only or not.,"def is_Power_Of_Two (x): 
    return x and (not(x & (x - 1))) 
def differ_At_One_Bit_Pos(a,b): 
    return is_Power_Of_Two(a ^ b)",[],"['assert differ_At_One_Bit_Pos(13,9) == True', 'assert differ_At_One_Bit_Pos(15,8) == False', 'assert differ_At_One_Bit_Pos(2,4) == False', 'assert differ_At_One_Bit_Pos(2, 3) == True', 'assert differ_At_One_Bit_Pos(5, 1) == True', 'assert differ_At_One_Bit_Pos(1, 5) == True']"
Benchmark Questions Verification V2.ipynb,7,Write a function to find all words which are at least 4 characters long in a string.,"import re
def find_char_long(text):
  return (re.findall(r""\b\w{4,}\b"", text))",[],"[""assert set(find_char_long('Please move back to stream')) == set(['Please', 'move', 'back', 'stream'])"", ""assert set(find_char_long('Jing Eco and Tech')) == set(['Jing', 'Tech'])"", ""assert set(find_char_long('Jhingai wulu road Zone 3')) == set(['Jhingai', 'wulu', 'road', 'Zone'])""]"
Benchmark Questions Verification V2.ipynb,8,Write a function to find squares of individual elements in a list.,"def square_nums(nums):
 square_nums = list(map(lambda x: x ** 2, nums))
 return square_nums",[],"['assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]', 'assert square_nums([10,20,30])==([100,400,900])', 'assert square_nums([12,15])==([144,225])']"
Benchmark Questions Verification V2.ipynb,9,Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.,"def find_Rotations(str): 
    tmp = str + str
    n = len(str) 
    for i in range(1,n + 1): 
        substring = tmp[i: i+n] 
        if (str == substring): 
            return i 
    return n ",[],"['assert find_Rotations(""aaaa"") == 1', 'assert find_Rotations(""ab"") == 2', 'assert find_Rotations(""abc"") == 3']"
Benchmark Questions Verification V2.ipynb,11,Write a python function to remove first and last occurrence of a given character from the string.,"def remove_Occ(s,ch): 
    for i in range(len(s)): 
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    for i in range(len(s) - 1,-1,-1):  
        if (s[i] == ch): 
            s = s[0 : i] + s[i + 1:] 
            break
    return s ",[],"['assert remove_Occ(""hello"",""l"") == ""heo""', 'assert remove_Occ(""abcda"",""a"") == ""bcd""', 'assert remove_Occ(""PHP"",""P"") == ""H""']"
Benchmark Questions Verification V2.ipynb,12,Write a function to sort a given matrix in ascending order according to the sum of its rows.,"def sort_matrix(M):
    result = sorted(M, key=sum)
    return result",[],"['assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]', 'assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]', 'assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]']"
Benchmark Questions Verification V2.ipynb,14,Write a python function to find the volume of a triangular prism.,"def find_Volume(l,b,h) : 
    return ((l * b * h) / 2) ",[],"['assert find_Volume(10,8,6) == 240', 'assert find_Volume(3,2,2) == 6', 'assert find_Volume(1,2,1) == 1']"
Benchmark Questions Verification V2.ipynb,16,Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.,"import re
def text_lowercase_underscore(text):
        patterns = '^[a-z]+_[a-z]+$'
        if re.search(patterns,  text):
                return True
        else:
                return False",[],"['assert text_lowercase_underscore(""aab_cbbbc"")==(True)', 'assert text_lowercase_underscore(""aab_Abbbc"")==(False)', 'assert text_lowercase_underscore(""Aaab_abbbc"")==(False)']"
Benchmark Questions Verification V2.ipynb,17,Write a function that returns the perimeter of a square given its side length as input.,"def square_perimeter(a):
  perimeter=4*a
  return perimeter",[],"['assert square_perimeter(10)==40', 'assert square_perimeter(5)==20', 'assert square_perimeter(4)==16']"
Benchmark Questions Verification V2.ipynb,18,Write a function to remove characters from the first string which are present in the second string.,"NO_OF_CHARS = 256
def str_to_list(string): 
	temp = [] 
	for x in string: 
		temp.append(x) 
	return temp 
def lst_to_string(List): 
	return ''.join(List) 
def get_char_count_array(string): 
	count = [0] * NO_OF_CHARS 
	for i in string: 
		count[ord(i)] += 1
	return count 
def remove_dirty_chars(string, second_string): 
	count = get_char_count_array(second_string) 
	ip_ind = 0
	res_ind = 0
	temp = '' 
	str_list = str_to_list(string) 
	while ip_ind != len(str_list): 
		temp = str_list[ip_ind] 
		if count[ord(temp)] == 0: 
			str_list[res_ind] = str_list[ip_ind] 
			res_ind += 1
		ip_ind+=1
	return lst_to_string(str_list[0:res_ind]) ",[],"['assert remove_dirty_chars(""probasscurve"", ""pros"") == \'bacuve\'', 'assert remove_dirty_chars(""digitalindia"", ""talent"") == \'digiidi\'', 'assert remove_dirty_chars(""exoticmiles"", ""toxic"") == \'emles\'']"
Benchmark Questions Verification V2.ipynb,19,Write a function to find whether a given array of integers contains any duplicate element.,"def test_duplicate(arraynums):
    nums_set = set(arraynums)    
    return len(arraynums) != len(nums_set)     ",[],"['assert test_duplicate(([1,2,3,4,5]))==False', 'assert test_duplicate(([1,2,3,4, 4]))==True', 'assert test_duplicate([1,1,2,2,3,3,4,4,5])==True']"
Benchmark Questions Verification V2.ipynb,20,Write a function to check if the given number is woodball or not.,"def is_woodall(x): 
	if (x % 2 == 0): 
		return False
	if (x == 1): 
		return True
	x = x + 1 
	p = 0
	while (x % 2 == 0): 
		x = x/2
		p = p + 1
		if (p == x): 
			return True
	return False",[],"['assert is_woodall(383) == True', 'assert is_woodall(254) == False', 'assert is_woodall(200) == False']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,56,Write a python function to check if a given number is one less than twice its reverse.,"def rev(num):    
    rev_num = 0
    while (num > 0):  
        rev_num = (rev_num * 10 + num % 10) 
        num = num // 10  
    return rev_num  
def check(n):    
    return (2 * rev(n) == n + 1)  ",[],"['assert check(70) == False', 'assert check(23) == False', 'assert check(73) == True']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,57,Write a python function to find the largest number that can be formed with the given list of digits.,"def find_Max_Num(arr) : 
    n = len(arr)
    arr.sort(reverse = True) 
    num = arr[0] 
    for i in range(1,n) : 
        num = num * 10 + arr[i] 
    return num ",[],"['assert find_Max_Num([1,2,3]) == 321', 'assert find_Max_Num([4,5,6,1]) == 6541', 'assert find_Max_Num([1,2,3,9]) == 9321']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,58,Write a python function to check whether the given two integers have opposite sign or not.,"def opposite_Signs(x,y): 
    return ((x ^ y) < 0); ",[],"['assert opposite_Signs(1,-2) == True', 'assert opposite_Signs(3,2) == False', 'assert opposite_Signs(-10,-10) == False', 'assert opposite_Signs(-2,2) == True']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,59,Write a function to find the nth octagonal number.,"def is_octagonal(n): 
	return 3 * n * n - 2 * n ",[],"['assert is_octagonal(5) == 65', 'assert is_octagonal(10) == 280', 'assert is_octagonal(15) == 645']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,61,Write a python function to count the number of substrings with the sum of digits equal to their length.,"from collections import defaultdict
def count_Substrings(s):
    n = len(s)
    count,sum = 0,0
    mp = defaultdict(lambda : 0)
    mp[0] += 1
    for i in range(n):
        sum += ord(s[i]) - ord('0')
        count += mp[sum - (i + 1)]
        mp[sum - (i + 1)] += 1
    return count",[],"[""assert count_Substrings('112112') == 6"", ""assert count_Substrings('111') == 6"", ""assert count_Substrings('1101112') == 12""]"
Mike's Copy of Benchmark Questions Verification V2.ipynb,62,Write a python function to find smallest number in a list.,"def smallest_num(xs):
  return min(xs)
",[],"['assert smallest_num([10, 20, 1, 45, 99]) == 1', 'assert smallest_num([1, 2, 3]) == 1', 'assert smallest_num([45, 46, 50, 60]) == 45']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,63,Write a function to find the maximum difference between available pairs in the given tuple list.,"def max_difference(test_list):
  temp = [abs(b - a) for a, b in test_list]
  res = max(temp)
  return (res) ",[],"['assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7', 'assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15', 'assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,64,Write a function to sort a list of tuples using the second value of each tuple.,"def subject_marks(subjectmarks):
#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])
 subjectmarks.sort(key = lambda x: x[1])
 return subjectmarks",[],"[""assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"", ""assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])"", ""assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])""]"
Mike's Copy of Benchmark Questions Verification V2.ipynb,65,Write a function to flatten a list and sum all of its elements.,"def recursive_list_sum(data_list):
	total = 0
	for element in data_list:
		if type(element) == type([]):
			total = total + recursive_list_sum(element)
		else:
			total = total + element
	return total",[],"['assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21', 'assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106', 'assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,66,Write a python function to count the number of positive numbers in a list.,"def pos_count(list):
  pos_count= 0
  for num in list: 
    if num >= 0: 
      pos_count += 1
  return pos_count ",[],"['assert pos_count([1,-2,3,-4]) == 2', 'assert pos_count([3,4,5,-1]) == 3', 'assert pos_count([1,2,3,4]) == 4']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,67,Write a function to find the number of ways to partition a set of Bell numbers.,"def bell_number(n):   
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1): 
        bell[i][0] = bell[i-1][i-1]  
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   
    return bell[n][0] ",[],"['assert bell_number(2)==2', 'assert bell_number(10)==115975', 'assert bell_number(56)==6775685320645824322581483068371419745979053216268760300']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,68,Write a python function to check whether the given array is monotonic or not.,"def is_Monotonic(A): 
    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or
            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",[],"['assert is_Monotonic([6, 5, 4, 4]) == True', 'assert is_Monotonic([1, 2, 2, 3]) == True', 'assert is_Monotonic([1, 3, 2]) == False']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,69,Write a function to check whether a list contains the given sublist or not.,"def is_sublist(l, s):
	sub_set = False
	if s == []:
		sub_set = True
	elif s == l:
		sub_set = True
	elif len(s) > len(l):
		sub_set = False
	else:
		for i in range(len(l)):
			if l[i] == s[0]:
				n = 1
				while (n < len(s)) and (l[i+n] == s[n]):
					n += 1				
				if n == len(s):
					sub_set = True
	return sub_set",[],"['assert is_sublist([2,4,3,5,7],[3,7])==False', 'assert is_sublist([2,4,3,5,7],[4,3])==True', 'assert is_sublist([2,4,3,5,7],[1,6])==False']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,70,Write a function to find whether all the given tuples have equal length or not.,"def find_equal_tuple(Input):
  k = 0 if not Input else len(Input[0])
  flag = 1
  for tuple in Input:
    if len(tuple) != k:
      flag = 0
      break
  return flag
def get_equal(Input):
  return find_equal_tuple(Input) == 1",[],"['assert get_equal([(11, 22, 33), (44, 55, 66)]) == True', 'assert get_equal([(1, 2, 3), (4, 5, 6, 7)]) == False', 'assert get_equal([(1, 2), (3, 4)]) == True']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,71,Write a function to sort a list of elements.,"def comb_sort(nums):
    shrink_fact = 1.3
    gaps = len(nums)
    swapped = True
    i = 0
    while gaps > 1 or swapped:
        gaps = int(float(gaps) / shrink_fact)
        swapped = False
        i = 0
        while gaps + i < len(nums):
            if nums[i] > nums[i+gaps]:
                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]
                swapped = True
            i += 1
    return nums",[],"['assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]', 'assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]', 'assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,72,Write a python function to check whether the given number can be represented as the difference of two squares or not.,"def dif_Square(n): 
    if (n % 4 != 2): 
        return True
    return False",[],"['assert dif_Square(5) == True', 'assert dif_Square(10) == False', 'assert dif_Square(15) == True']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,74,Write a function to check whether it follows the sequence given in the patterns array.,"def is_samepatterns(colors, patterns):    
    if len(colors) != len(patterns):
        return False    
    sdict = {}
    pset = set()
    sset = set()    
    for i in range(len(patterns)):
        pset.add(patterns[i])
        sset.add(colors[i])
        if patterns[i] not in sdict.keys():
            sdict[patterns[i]] = []

        keys = sdict[patterns[i]]
        keys.append(colors[i])
        sdict[patterns[i]] = keys

    if len(pset) != len(sset):
        return False   

    for values in sdict.values():

        for i in range(len(values) - 1):
            if values[i] != values[i+1]:
                return False

    return True",[],"['assert is_samepatterns([""red"",""green"",""green""], [""a"", ""b"", ""b""])==True', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b"",""b""])==False', 'assert is_samepatterns([""red"",""green"",""greenn""], [""a"",""b""])==False']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,75,Write a function to find tuples which have all elements divisible by k from the given list of tuples.,"def find_tuples(test_list, K):
  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]
  return res",[],"['assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == [(6, 24, 12)]', 'assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == [(5, 25, 30)]', 'assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == [(8, 16, 4)]']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,77,Write a python function to find whether a number is divisible by 11.,"def is_Diff(n): 
    return (n % 11 == 0) ",[],"['assert is_Diff (12345) == False', 'assert is_Diff(1212112) == True', 'assert is_Diff(1212) == False']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,79,Write a python function to check whether the length of the word is odd or not.,"def word_len(s): 
    s = s.split(' ')   
    for word in s:    
        if len(word)%2!=0: 
            return True  
        else:
          return False",[],"['assert word_len(""Hadoop"") == False', 'assert word_len(""great"") == True', 'assert word_len(""structure"") == True']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,80,Write a function to find the nth tetrahedral number.,"def tetrahedral_number(n): 
	return (n * (n + 1) * (n + 2)) / 6",[],"['assert tetrahedral_number(5) == 35', 'assert tetrahedral_number(6) == 56', 'assert tetrahedral_number(7) == 84']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,82,Write a function to find the volume of a sphere.,"import math
def volume_sphere(r):
  volume=(4/3)*math.pi*r*r*r
  return volume",['import math'],"['assert math.isclose(volume_sphere(10), 4188.790204786391, rel_tol=0.001)', 'assert math.isclose(volume_sphere(25), 65449.84694978735, rel_tol=0.001)', 'assert math.isclose(volume_sphere(20), 33510.32163829113, rel_tol=0.001)']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,83,Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.,"def get_Char(strr):  
    summ = 0
    for i in range(len(strr)): 
        summ += (ord(strr[i]) - ord('a') + 1)  
    if (summ % 26 == 0): 
        return ord('z') 
    else: 
        summ = summ % 26
        return chr(ord('a') + summ - 1)",[],"['assert get_Char(""abc"") == ""f""', 'assert get_Char(""gfg"") == ""t""', 'assert get_Char(""ab"") == ""c""']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,84,Write a function to find the nth number in the newman conway sequence.,"def sequence(n): 
	if n == 1 or n == 2: 
		return 1
	else: 
		return sequence(sequence(n-1)) + sequence(n-sequence(n-1))",[],"['assert sequence(10) == 6', 'assert sequence(2) == 1', 'assert sequence(3) == 2']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,85,Write a function to find the surface area of a sphere.,"import math
def surfacearea_sphere(r):
  surfacearea=4*math.pi*r*r
  return surfacearea",['import math'],"['assert math.isclose(surfacearea_sphere(10), 1256.6370614359173, rel_tol=0.001)', 'assert math.isclose(surfacearea_sphere(15), 2827.4333882308138, rel_tol=0.001)', 'assert math.isclose(surfacearea_sphere(20), 5026.548245743669, rel_tol=0.001)']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,86,Write a function to find nth centered hexagonal number.,"def centered_hexagonal_number(n):
  return 3 * n * (n - 1) + 1",[],"['assert centered_hexagonal_number(10) == 271', 'assert centered_hexagonal_number(2) == 7', 'assert centered_hexagonal_number(9) == 217']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,87,Write a function to merge three dictionaries into a single dictionary.,"import collections as ct
def merge_dictionaries_three(dict1,dict2, dict3):
    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))
    return merged_dict",[],"['assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{ ""O"": ""Orange"", ""W"": ""White"", ""B"": ""Black"" })=={\'B\': \'Black\', \'R\': \'Red\', \'P\': \'Pink\', \'G\': \'Green\', \'W\': \'White\', \'O\': \'Orange\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" }, { ""G"": ""Green"", ""W"": ""White"" },{""L"":""lavender"",""B"":""Blue""})=={\'W\': \'White\', \'P\': \'Pink\', \'B\': \'Black\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\'}', 'assert merge_dictionaries_three({ ""R"": ""Red"", ""B"": ""Black"", ""P"": ""Pink"" },{""L"":""lavender"",""B"":""Blue""},{ ""G"": ""Green"", ""W"": ""White"" })=={\'B\': \'Black\', \'P\': \'Pink\', \'R\': \'Red\', \'G\': \'Green\', \'L\': \'lavender\', \'W\': \'White\'}']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,88,"Write a function to get the frequency of all the elements in a list, returned as a dictionary.","import collections
def freq_count(list1):
  freq_count= collections.Counter(list1)
  return freq_count",[],"['assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1})', 'assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3})', 'assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2})']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,89,Write a function to find the closest smaller number than n.,"def closest_num(N):
  return (N - 1)",[],"['assert closest_num(11) == 10', 'assert closest_num(7) == 6', 'assert closest_num(12) == 11']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,90,Write a python function to find the length of the longest word.,"def len_log(list1):
    max=len(list1[0])
    for i in list1:
        if len(i)>max:
            max=len(i)
    return max",[],"['assert len_log([""python"",""PHP"",""bigdata""]) == 7', 'assert len_log([""a"",""ab"",""abc""]) == 3', 'assert len_log([""small"",""big"",""tall""]) == 5']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,91,Write a function to check if a string is present as a substring in a given list of string values.,"def find_substring(str1, sub_str):
   if any(sub_str in s for s in str1):
       return True
   return False",[],"['assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ack"")==True', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""abc"")==False', 'assert find_substring([""red"", ""black"", ""white"", ""green"", ""orange""],""ange"")==True']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,92,Write a function to check whether the given number is undulating or not.,"def is_undulating(n): 
	n = str(n)
	if (len(n) <= 2): 
		return False
	for i in range(2, len(n)): 
		if (n[i - 2] != n[i]): 
			return False
	return True",[],"['assert is_undulating(1212121) == True', 'assert is_undulating(1991) == False', 'assert is_undulating(121) == True']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,93,Write a function to calculate the value of 'a' to the power 'b'.,"def power(a,b):
	if b==0:
		return 1
	elif a==0:
		return 0
	elif b==1:
		return a
	else:
		return a*power(a,b-1)",[],"['assert power(3,4) == 81', 'assert power(2,3) == 8', 'assert power(5,5) == 3125']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,94,"Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.","from operator import itemgetter 
def index_minimum(test_list):
  res = min(test_list, key = itemgetter(1))[0]
  return (res) ",[],"[""assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'"", ""assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'"", ""assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'""]"
Mike's Copy of Benchmark Questions Verification V2.ipynb,95,Write a python function to find the length of the smallest list in a list of lists.,"def Find_Min_Length(lst):  
    minLength = min(len(x) for x in lst )
    return minLength ",[],"['assert Find_Min_Length([[1],[1,2]]) == 1', 'assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2', 'assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,96,Write a python function to find the number of divisors of a given integer.,"def divisor(n):
  for i in range(n):
    x = len([i for i in range(1,n+1) if not n % i])
  return x",[],"['assert divisor(15) == 4', 'assert divisor(12) == 6', 'assert divisor(9) == 3']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,97,"Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.","def frequency_lists(list1):
    list1 = [item for sublist in list1 for item in sublist]
    dic_data = {}
    for num in list1:
        if num in dic_data.keys():
            dic_data[num] += 1
        else:
            key = num
            value = 1
            dic_data[key] = value
    return dic_data
",[],"['assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}', 'assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}', 'assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,98,Write a function to multiply all the numbers in a list and divide with the length of the list.,"def multiply_num(numbers):  
    total = 1
    for x in numbers:
        total *= x  
    return total/len(numbers) ",['import math'],"['assert math.isclose(multiply_num((8, 2, 3, -1, 7)), -67.2, rel_tol=0.001)', 'assert math.isclose(multiply_num((-10,-20,-30)), -2000.0, rel_tol=0.001)', 'assert math.isclose(multiply_num((19,15,18)), 1710.0, rel_tol=0.001)']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,99,"Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.","def decimal_to_binary(n): 
    return bin(n).replace(""0b"","""") ",[],"[""assert decimal_to_binary(8) == '1000'"", ""assert decimal_to_binary(18) == '10010'"", ""assert decimal_to_binary(7) == '111'""]"
Mike's Copy of Benchmark Questions Verification V2.ipynb,100,"Write a function to find the next smallest palindrome of a specified integer, returned as an integer.","import sys
def next_smallest_palindrome(num):
    numstr = str(num)
    for i in range(num+1,sys.maxsize):
        if str(i) == str(i)[::-1]:
            return i",[],"['assert next_smallest_palindrome(99)==101', 'assert next_smallest_palindrome(1221)==1331', 'assert next_smallest_palindrome(120)==121']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,101,Write a function to find the kth element in the given array using 1-based indexing.,"def kth_element(arr, k):
  n = len(arr)
  for i in range(n):
    for j in range(0, n-i-1):
      if arr[j] > arr[j+1]:
        arr[j], arr[j+1] == arr[j+1], arr[j]
  return arr[k-1]",[],"['assert kth_element([12,3,5,7,19], 2) == 3', 'assert kth_element([17,24,8,23], 3) == 8', 'assert kth_element([16,21,25,36,4], 4) == 36']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,102,Write a function to convert a snake case string to camel case string.,"def snake_to_camel(word):
        import re
        return ''.join(x.capitalize() or '_' for x in word.split('_'))",[],"[""assert snake_to_camel('python_program')=='PythonProgram'"", ""assert snake_to_camel('python_language')==('PythonLanguage')"", ""assert snake_to_camel('programming_language')==('ProgrammingLanguage')""]"
Mike's Copy of Benchmark Questions Verification V2.ipynb,103,"Write a function to find the Eulerian number a(n, m).","def eulerian_num(n, m): 
	if (m >= n or n == 0): 
		return 0 
	if (m == 0): 
		return 1 
	return ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",[],"['assert eulerian_num(3, 1) == 4', 'assert eulerian_num(4, 1) == 11', 'assert eulerian_num(5, 3) == 26']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,104,Write a function to sort each sublist of strings in a given list of lists.,"def sort_sublists(input_list):
    result = [sorted(x, key = lambda x:x[0]) for x in input_list] 
    return result
",[],"['assert sort_sublists(([""green"", ""orange""], [""black"", ""white""], [""white"", ""black"", ""orange""]))==[[\'green\', \'orange\'], [\'black\', \'white\'], [\'black\', \'orange\', \'white\']]', 'assert sort_sublists((["" red "",""green"" ],[""blue "","" black""],["" orange"",""brown""]))==[[\' red \', \'green\'], [\' black\', \'blue \'], [\' orange\', \'brown\']]', 'assert sort_sublists(([""zilver"",""gold""], [""magnesium"",""aluminium""], [""steel"", ""bronze""]))==[[\'gold\', \'zilver\'],[\'aluminium\', \'magnesium\'], [\'bronze\', \'steel\']]']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,105,Write a python function to count true booleans in the given list.,"def count(lst):   
    return sum(lst) ",[],"['assert count([True,False,True]) == 2', 'assert count([False,False]) == 0', 'assert count([True,True,True]) == 3']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,106,Write a function to append the given list to the given tuples.,"def add_lists(test_list, test_tup):
  res = tuple(list(test_tup) + test_list)
  return (res) ",[],"['assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)', 'assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)', 'assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,108,Write a function to merge three lists into a single sorted list.,"import heapq
def merge_sorted_list(num1,num2,num3):
  num1=sorted(num1)
  num2=sorted(num2)
  num3=sorted(num3)
  result = heapq.merge(num1,num2,num3)
  return list(result)",[],"['assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]', 'assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]', 'assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,109,Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.,"def odd_Equivalent(s,n): 
    count=0
    for i in range(0,n): 
        if (s[i] == '1'): 
            count = count + 1
    return count ",[],"['assert odd_Equivalent(""011001"",6) == 3', 'assert odd_Equivalent(""11011"",5) == 4', 'assert odd_Equivalent(""1010"",4) == 2']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,111,Write a function to find the common elements in given nested lists.,"def common_in_nested_lists(nestedlist):
    result = list(set.intersection(*map(set, nestedlist)))
    return result",[],"['assert set(common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]]))==set([18, 12])', 'assert set(common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]]))==set([5,23])', 'assert set(common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]]))==set([4])']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,113,Write a function to check if a string represents an integer or not.,"def check_integer(text):
 text = text.strip()
 if len(text) < 1:
    return None
 else:
     if all(text[i] in ""0123456789"" for i in range(len(text))):
          return True
     elif (text[0] in ""+-"") and \
         all(text[i] in ""0123456789"" for i in range(1,len(text))):
         return True
     else:
        return False",[],"['assert check_integer(""python"")==False', 'assert check_integer(""1"")==True', 'assert check_integer(""12345"")==True']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,115,Write a function to check whether all dictionaries in a list are empty or not.,"def empty_dit(list1):
 empty_dit=all(not d for d in list1)
 return empty_dit",[],"['assert empty_dit([{},{},{}])==True', 'assert empty_dit([{1,2},{},{}])==False', 'assert empty_dit({})==True']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,116,Write a function to convert a given tuple of positive integers into a single integer.,"def tuple_to_int(nums):
    result = int(''.join(map(str,nums)))
    return result",[],"['assert tuple_to_int((1,2,3))==123', 'assert tuple_to_int((4,5,6))==456', 'assert tuple_to_int((5,6,7))==567']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,117,Write a function to convert all possible convertible elements in a list of lists to floats.,"def list_to_float(test_list):
  res = []
  for tup in test_list:
    temp = []
    for ele in tup:
      if ele.isalpha():
        temp.append(ele)
      else:
        temp.append(float(ele))
    res.append((temp[0],temp[1])) 
  return res",[],"['assert list_to_float( [(""3"", ""4""), (""1"", ""26.45""), (""7.32"", ""8""), (""4"", ""8"")] ) == [(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]', 'assert list_to_float( [(""4"", ""4""), (""2"", ""27""), (""4.12"", ""9""), (""7"", ""11"")] ) == [(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]', 'assert list_to_float( [(""6"", ""78""), (""5"", ""26.45""), (""1.33"", ""4""), (""82"", ""13"")] ) == [(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,118,Write a function to convert a string to a list of strings split on the space character.,"def string_to_list(string): 
    lst = list(string.split("" "")) 
    return lst",[],"['assert string_to_list(""python programming"")==[\'python\',\'programming\']', 'assert string_to_list(""lists tuples strings"")==[\'lists\',\'tuples\',\'strings\']', 'assert string_to_list(""write a program"")==[\'write\',\'a\',\'program\']']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,119,Write a python function to find the element that appears only once in a sorted array.,"def search(arr):
    n = len(arr)
    XOR = 0
    for i in range(n) :
        XOR = XOR ^ arr[i]
    return (XOR)",[],"['assert search([1,1,2,2,3]) == 3', 'assert search([1,1,3,3,4,4,5,5,7,7,8]) == 8', 'assert search([1,2,2,3,3,4,4]) == 1']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,120,Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.,"def max_product_tuple(list1):
    result_max = max([abs(x * y) for x, y in list1] )
    return result_max",[],"['assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36', 'assert max_product_tuple([(10,20), (15,2), (5,10)] )==200', 'assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,123,Write a function to sum all amicable numbers from 1 to a specified number.,"def amicable_numbers_sum(limit):
    if not isinstance(limit, int):
        return ""Input is not an integer!""
    if limit < 1:
        return ""Input must be bigger than 0!""
    amicables = set()
    for num in range(2, limit+1):
        if num in amicables:
            continue
        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])
        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])
        if num == sum_fact2 and num != sum_fact:
            amicables.add(num)
            amicables.add(sum_fact2)
    return sum(amicables)",[],"['assert amicable_numbers_sum(999)==504', 'assert amicable_numbers_sum(9999)==31626', 'assert amicable_numbers_sum(99)==0']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,124,Write a function to get the angle of a complex number.,"import cmath
def angle_complex(a,b):
  cn=complex(a,b)
  angle=cmath.phase(a+b)
  return angle",['import math'],"['assert math.isclose(angle_complex(0,1j), 1.5707963267948966, rel_tol=0.001)', 'assert math.isclose(angle_complex(2,1j), 0.4636476090008061, rel_tol=0.001)', 'assert math.isclose(angle_complex(0,2j), 1.5707963267948966, rel_tol=0.001)']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,125,Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.,"def find_length(string): 
	n = len(string)
	current_sum = 0
	max_sum = 0
	for i in range(n): 
		current_sum += (1 if string[i] == '0' else -1) 
		if current_sum < 0: 
			current_sum = 0
		max_sum = max(current_sum, max_sum) 
	return max_sum if max_sum else 0",[],"['assert find_length(""11000010001"") == 6', 'assert find_length(""10111"") == 1', 'assert find_length(""11011101100101"") == 2']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,126,Write a python function to find the sum of common divisors of two given numbers.,"def sum(a,b): 
    sum = 0
    for i in range (1,min(a,b)): 
        if (a % i == 0 and b % i == 0): 
            sum += i 
    return sum",[],"['assert sum(10,15) == 6', 'assert sum(100,150) == 93', 'assert sum(4,6) == 3']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,127,Write a function to multiply two integers.,"def multiply_int(x, y):
    if y < 0:
        return -multiply_int(x, -y)
    elif y == 0:
        return 0
    elif y == 1:
        return x
    else:
        return x + multiply_int(x, y - 1)",[],"['assert multiply_int(10,20)==200', 'assert multiply_int(5,10)==50', 'assert multiply_int(4,8)==32']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,128,Write a function to find words that are longer than n characters from a given list of words.,"def long_words(n, str):
    word_len = []
    txt = str.split("" "")
    for x in txt:
        if len(x) > n:
            word_len.append(x)
    return word_len	",[],"['assert long_words(3,""python is a programming language"")==[\'python\',\'programming\',\'language\']', 'assert long_words(2,""writing a program"")==[\'writing\',\'program\']', 'assert long_words(5,""sorting list"")==[\'sorting\']']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,129,Write a function to calculate whether the matrix is a magic square.,"def magic_square_test(my_matrix):
    iSize = len(my_matrix[0])
    sum_list = []
    sum_list.extend([sum (lines) for lines in my_matrix])   
    for col in range(iSize):
        sum_list.append(sum(row[col] for row in my_matrix))
    result1 = 0
    for i in range(0,iSize):
        result1 +=my_matrix[i][i]
    sum_list.append(result1)      
    result2 = 0
    for i in range(iSize-1,-1,-1):
        result2 +=my_matrix[i][i]
    sum_list.append(result2)
    if len(set(sum_list))>1:
        return False
    return True",[],"['assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True', 'assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,130,Write a function to find the item with maximum frequency in a given list.,"from collections import defaultdict
def max_occurrences(nums):
    dict = defaultdict(int)
    for i in nums:
        dict[i] += 1
    result = max(dict.items(), key=lambda x: x[1]) 
    return result[0]",[],"['assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==2', 'assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,18])==8', 'assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==20']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,131,Write a python function to reverse only the vowels of a given string (where y is not a vowel).,"def reverse_vowels(str1):
	vowels = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			vowels += char
	result_string = """"
	for char in str1:
		if char in ""aeiouAEIOU"":
			result_string += vowels[-1]
			vowels = vowels[:-1]
		else:
			result_string += char
	return result_string",[],"['assert reverse_vowels(""Python"") == ""Python""', 'assert reverse_vowels(""USA"") == ""ASU""', 'assert reverse_vowels(""ab"") == ""ab""']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,132,Write a function to convert a tuple to a string.,"def tup_string(tup1):
  str =  ''.join(tup1)
  return str",[],"['assert tup_string((\'e\', \'x\', \'e\', \'r\', \'c\', \'i\', \'s\', \'e\', \'s\'))==(""exercises"")', 'assert tup_string((\'p\',\'y\',\'t\',\'h\',\'o\',\'n\'))==(""python"")', 'assert tup_string((\'p\',\'r\',\'o\',\'g\',\'r\',\'a\',\'m\'))==(""program"")']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,133,Write a function to calculate the sum of the negative numbers of a given list of numbers.,"def sum_negativenum(nums):
  sum_negativenum = list(filter(lambda nums:nums<0,nums))
  return sum(sum_negativenum)",[],"['assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32', 'assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52', 'assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,135,Write a function to find the nth hexagonal number.,"def hexagonal_num(n): 
	return n*(2*n - 1) ",[],"['assert hexagonal_num(10) == 190', 'assert hexagonal_num(5) == 45', 'assert hexagonal_num(7) == 91']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,137,Write a function to find the ratio of zeroes to non-zeroes in an array of integers.,"from array import array
def zero_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x == 0:
            n1 += 1
        else:
          None
    return n1/(n-n1)",['import math'],"['assert math.isclose(zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]), 0.181818, rel_tol=0.001)', 'assert math.isclose(zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]), 0.00, rel_tol=0.001)', 'assert math.isclose(zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17]), 0.00, rel_tol=0.001)']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,138,Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.,"def is_Sum_Of_Powers_Of_Two(n): 
    if (n % 2 == 1): 
        return False
    else: 
        return True",[],"['assert is_Sum_Of_Powers_Of_Two(10) == True', 'assert is_Sum_Of_Powers_Of_Two(7) == False', 'assert is_Sum_Of_Powers_Of_Two(14) == True']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,139,Write a function to find the circumference of a circle.,"def circle_circumference(r):
  perimeter=2*3.1415*r
  return perimeter",['import math'],"['assert math.isclose(circle_circumference(10), 62.830000000000005, rel_tol=0.001)', 'assert math.isclose(circle_circumference(5), 31.415000000000003, rel_tol=0.001)', 'assert math.isclose(circle_circumference(4), 25.132, rel_tol=0.001)']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,140,Write a function to flatten the list of lists into a single set of numbers.,"def extract_singly(test_list):
  res = []
  temp = set()
  for inner in test_list:
    for ele in inner:
      if not ele in temp:
        temp.add(ele)
        res.append(ele)
  return (res) ",[],"['assert set(extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])) == set([3, 4, 5, 7, 1])', 'assert set(extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])) == set([1, 2, 3, 4, 7, 8])', 'assert set(extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])) == set([7, 8, 9, 10, 11, 12])']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,141,Write a function to sort a list of elements.,"def pancake_sort(nums):
    arr_len = len(nums)
    while arr_len > 1:
        mi = nums.index(max(nums[0:arr_len]))
        nums = nums[mi::-1] + nums[mi+1:len(nums)]
        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]
        arr_len -= 1
    return nums",[],"['assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]', 'assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]', 'assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,142,Write a function to count number items that are identical in the same position of three given lists.,"def count_samepair(list1,list2,list3):
    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))
    return result",[],"['assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3', 'assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4', 'assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,143,Write a function to find number of lists present in the given tuple.,"def find_lists(Input): 
	if isinstance(Input, list): 
		return 1
	else: 
		return len(Input) ",[],"['assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2', 'assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3', 'assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1']"
Mike's Copy of Benchmark Questions Verification V2.ipynb,145,Write a python function to find the maximum difference between any two elements in a given array.,"def max_Abs_Diff(arr): 
    n = len(arr)
    minEle = arr[0] 
    maxEle = arr[0] 
    for i in range(1, n): 
        minEle = min(minEle,arr[i]) 
        maxEle = max(maxEle,arr[i]) 
    return (maxEle - minEle) ",[],"['assert max_Abs_Diff((2,1,5,3)) == 4', 'assert max_Abs_Diff((9,3,2,5,1)) == 8', 'assert max_Abs_Diff((3,2,1)) == 2']"
Benchmark Questions Verification V2.ipynb,160,"Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.","def find_solution(a, b, n):
	i = 0
	while i * a <= n:
		if (n - (i * a)) % b == 0: 
			return (i, (n - (i * a)) // b)
		i = i + 1
	return None",[],"['assert find_solution(2, 3, 7) == (2, 1)', 'assert find_solution(4, 2, 7) == None', 'assert find_solution(1, 13, 17) == (4, 1)']"
Benchmark Questions Verification V2.ipynb,161,Write a function to remove all elements from a given list present in another list.,"def remove_elements(list1, list2):
    result = [x for x in list1 if x not in list2]
    return result",[],"['assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8]) == [1, 3, 5, 7, 9, 10]', 'assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7]) == [2, 4, 6, 8, 9, 10]', 'assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7]) == [1, 2, 3, 4, 6, 8, 9, 10]']"
Benchmark Questions Verification V2.ipynb,162,"Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).","def sum_series(n):
  if n < 1:
    return 0
  else:
    return n + sum_series(n - 2)",[],"['assert sum_series(6) == 12', 'assert sum_series(10) == 30', 'assert sum_series(9) == 25']"
Benchmark Questions Verification V2.ipynb,163,Write a function to calculate the area of a regular polygon given the length and number of its sides.,"from math import tan, pi
def area_polygon(s, l):
  area = s * (l ** 2) / (4 * tan(pi / s))
  return area",['import math'],"['assert math.isclose(area_polygon(4, 20), 400., rel_tol=0.001)', 'assert math.isclose(area_polygon(10, 15), 1731.197, rel_tol=0.001)', 'assert math.isclose(area_polygon(9, 7), 302.909, rel_tol=0.001)']"
Benchmark Questions Verification V2.ipynb,164,Write a function to determine if the sum of the divisors of two integers are the same.,"import math 
def div_sum(n): 
  total = 1
  i = 2

  while i * i <= n:
    if (n % i == 0):
      total = (total + i + math.floor(n / i))
    i += 1

  return total

def are_equivalent(num1, num2): 
    return div_sum(num1) == div_sum(num2); ",[],"['assert are_equivalent(36, 57) == False', 'assert are_equivalent(2, 4) == False', 'assert are_equivalent(23, 47) == True']"
Benchmark Questions Verification V2.ipynb,165,Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).,"def count_char_position(str1): 
    count_chars = 0
    for i in range(len(str1)):
        if ((i == ord(str1[i]) - ord('A')) or 
            (i == ord(str1[i]) - ord('a'))): 
            count_chars += 1
    return count_chars ",[],"['assert count_char_position(""xbcefg"") == 2', 'assert count_char_position(""ABcED"") == 3', 'assert count_char_position(""AbgdeF"") == 5']"
Benchmark Questions Verification V2.ipynb,166,Write a function that counts the number of pairs of integers in a list that xor to an even number.,"def find_even_pair(A): 
  count = 0
  for i in range(0, len(A)): 
    for j in range(i+1, len(A)): 
        if ((A[i] ^ A[j]) % 2 == 0): 
          count += 1

  return count",[],"['assert find_even_pair([5, 4, 7, 2, 1]) == 4', 'assert find_even_pair([7, 2, 8, 1, 0, 5, 11]) == 9', 'assert find_even_pair([1, 2, 3]) == 1']"
Benchmark Questions Verification V2.ipynb,167,Write a python function to find the smallest power of 2 greater than or equal to n.,"def next_power_of_2(n): 
  if n and not n & (n - 1):
    return n

  count = 0
  while n != 0: 
    n >>= 1
    count += 1

  return 1 << count; ",[],"['assert next_power_of_2(0) == 1', 'assert next_power_of_2(5) == 8', 'assert next_power_of_2(17) == 32']"
Benchmark Questions Verification V2.ipynb,168,Write a function to count the number of occurrences of a number in a given list.,"def frequency(a,x): 
    count = 0  
    for i in a: 
      if i == x: 
        count += 1

    return count ",[],"['assert frequency([1,2,3], 4) == 0', 'assert frequency([1,2,2,3,3,3,4], 3) == 3', 'assert frequency([0,1,2,3,1,2], 1) == 2']"
Benchmark Questions Verification V2.ipynb,170,Write a function to find the sum of numbers in a list within a range specified by two indices.,"def sum_range_list(list1, m, n):                                                                                                                                                                                                
    sum_range = 0                                                                                                                                                                                                         
    for i in range(m, n+1, 1):                                                                                                                                                                                        
        sum_range += list1[i]                                                                                                                                                                                                  
    return sum_range   ",[],"['assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 8, 10) == 29', 'assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 5, 7) == 16', 'assert sum_range_list([2,1,5,6,8,3,4,9,10,11,8,12], 7, 10) == 38']"
Benchmark Questions Verification V2.ipynb,171,Write a function to find the perimeter of a regular pentagon from the length of its sides.,"import math
def perimeter_pentagon(a):
  perimeter=(5*a)
  return perimeter",[],"['assert perimeter_pentagon(5) == 25', 'assert perimeter_pentagon(10) == 50', 'assert perimeter_pentagon(15) == 75']"
Benchmark Questions Verification V2.ipynb,172,Write a function to count the number of occurence of the string 'std' in a given string.,"def count_occurance(s):
  count = 0
  for i in range(len(s) - 2):
    if (s[i] == 's' and s[i+1] == 't' and s[i+2] == 'd'):
      count = count + 1
  return count",[],"['assert count_occurance(""letstdlenstdporstd"") == 3', 'assert count_occurance(""truststdsolensporsd"") == 1', 'assert count_occurance(""makestdsostdworthit"") == 2', 'assert count_occurance(""stds"") == 1', 'assert count_occurance("""") == 0']"
Benchmark Questions Verification V2.ipynb,222,Write a function to check if all the elements in tuple have same data type or not.,"def check_type(test_tuple):
  res = True
  for ele in test_tuple:
    if not isinstance(ele, type(test_tuple[0])):
      res = False
      break
  return (res) ",[],"['assert check_type((5, 6, 7, 3, 5, 6) ) == True', 'assert check_type((1, 2, ""4"") ) == False', 'assert check_type((3, 2, 1, 4, 5) ) == True']"
Benchmark Questions Verification V2.ipynb,223,"Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)","def is_majority(arr, n, x):
	i = binary_search(arr, 0, n-1, x)
	if i == -1:
		return False
	if ((i + n//2) <= (n -1)) and arr[i + n//2] == x:
		return True
	else:
		return False
def binary_search(arr, low, high, x):
	if high >= low:
		mid = (low + high)//2 
		if (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):
			return mid
		elif x > arr[mid]:
			return binary_search(arr, (mid + 1), high, x)
		else:
			return binary_search(arr, low, (mid -1), x)
	return -1",[],"['assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True', 'assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False', 'assert is_majority([1, 1, 1, 2, 2], 5, 1) == True', 'assert is_majority([1, 1, 2, 2], 5, 1) == False']"
Benchmark Questions Verification V2.ipynb,224,Write a python function to count the number of set bits (binary digits with value 1) in a given number.,"def count_Set_Bits(n): 
    count = 0
    while (n): 
        count += n & 1
        n >>= 1
    return count ",[],"['assert count_Set_Bits(2) == 1', 'assert count_Set_Bits(4) == 1', 'assert count_Set_Bits(6) == 2']"
Benchmark Questions Verification V2.ipynb,226,Write a python function to remove the characters which have odd index values of a given string.,"def odd_values_string(str):
  result = """" 
  for i in range(len(str)):
    if i % 2 == 0:
      result = result + str[i]
  return result",[],"[""assert odd_values_string('abcdef') == 'ace'"", ""assert odd_values_string('python') == 'pto'"", ""assert odd_values_string('data') == 'dt'"", ""assert odd_values_string('lambs') == 'lms'""]"
Benchmark Questions Verification V2.ipynb,227,Write a function to find minimum of three numbers.,"def min_of_three(a,b,c): 
      if (a <= b) and (a <= c): 
        smallest = a 
      elif (b <= a) and (b <= c): 
        smallest = b 
      else: 
        smallest = c 
      return smallest ",[],"['assert min_of_three(10,20,0)==0', 'assert min_of_three(19,15,18)==15', 'assert min_of_three(-10,-20,-30)==-30']"
Benchmark Questions Verification V2.ipynb,228,Write a python function to check whether all the bits are unset in the given range or not.,"def all_Bits_Set_In_The_Given_Range(n,l,r):  
    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) 
    new_num = n & num
    if (new_num == 0): 
        return True
    return False",[],"['assert all_Bits_Set_In_The_Given_Range(4,1,2) == True', 'assert all_Bits_Set_In_The_Given_Range(17,2,4) == True', 'assert all_Bits_Set_In_The_Given_Range(39,4,6) == False']"
Benchmark Questions Verification V2.ipynb,229,"Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.","def re_arrange_array(arr, n):
  j=0
  for i in range(0, n):
    if (arr[i] < 0):
      temp = arr[i]
      arr[i] = arr[j]
      arr[j] = temp
      j = j + 1
  return arr",[],"['assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]', 'assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]', 'assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]']"
Benchmark Questions Verification V2.ipynb,230,"Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.","def replace_blank(str1,char):
 str2 = str1.replace(' ', char)
 return str2",[],"['assert replace_blank(""hello people"",\'@\')==(""hello@people"")', 'assert replace_blank(""python program language"",\'$\')==(""python$program$language"")', 'assert replace_blank(""blank space"",""-"")==(""blank-space"")']"
Benchmark Questions Verification V2.ipynb,232,Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.,"import heapq
def larg_nnum(list1,n):
 largest=heapq.nlargest(n,list1)
 return largest",[],"['assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2))==set([100,90])', 'assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5))==set([100,90,80,70,60])', 'assert set(larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3))==set([100,90,80])']"
Benchmark Questions Verification V2.ipynb,233,Write a function to find the lateral surface area of a cylinder.,"def lateralsuface_cylinder(r,h):
  lateralsurface= 2*3.1415*r*h
  return lateralsurface",['import math'],"['assert math.isclose(lateralsuface_cylinder(10,5), 314.15000000000003, rel_tol=0.001)', 'assert math.isclose(lateralsuface_cylinder(4,5), 125.66000000000001, rel_tol=0.001)', 'assert math.isclose(lateralsuface_cylinder(4,10), 251.32000000000002, rel_tol=0.001)']"
Benchmark Questions Verification V2.ipynb,234,Write a function to find the volume of a cube given its side length.,"def volume_cube(l):
  volume = l * l * l
  return volume",[],"['assert volume_cube(3)==27', 'assert volume_cube(2)==8', 'assert volume_cube(5)==125']"
Benchmark Questions Verification V2.ipynb,235,Write a python function to set all even bits of a given number.,"def even_bit_set_number(n): 
    count = 0;res = 0;temp = n 
    while(temp > 0): 
        if (count % 2 == 1): 
            res |= (1 << count)
        count+=1
        temp >>= 1
    return (n | res) ",[],"['assert even_bit_set_number(10) == 10', 'assert even_bit_set_number(20) == 30', 'assert even_bit_set_number(30) == 30']"
Benchmark Questions Verification V2.ipynb,237,Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.,"from collections import Counter 
def check_occurences(test_list):
  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))
  return  (res) ",[],"['assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}', 'assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}', 'assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}']"
Benchmark Questions Verification V2.ipynb,238,Write a python function to count the number of non-empty substrings of a given string.,"def number_of_substrings(str): 
	str_len = len(str); 
	return int(str_len * (str_len + 1) / 2); ",[],"['assert number_of_substrings(""abc"") == 6', 'assert number_of_substrings(""abcd"") == 10', 'assert number_of_substrings(""abcde"") == 15']"
Benchmark Questions Verification V2.ipynb,239,"Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.","def get_total_number_of_sequences(m,n): 
	T=[[0 for i in range(n+1)] for i in range(m+1)] 
	for i in range(m+1): 
		for j in range(n+1): 
			if i==0 or j==0: 
				T[i][j]=0
			elif i<j: 
				T[i][j]=0
			elif j==1: 
				T[i][j]=i 
			else: 
				T[i][j]=T[i-1][j]+T[i//2][j-1] 
	return T[m][n]",[],"['assert get_total_number_of_sequences(10, 4) == 4', 'assert get_total_number_of_sequences(5, 2) == 6', 'assert get_total_number_of_sequences(16, 3) == 84']"
Benchmark Questions Verification V2.ipynb,240,Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.,"def replace_list(list1,list2):
 list1[-1:] = list2
 replace_list=list1
 return replace_list
",[],"['assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]', 'assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]', 'assert replace_list([""red"",""blue"",""green""],[""yellow""])==[""red"",""blue"",""yellow""]']"
Benchmark Questions Verification V2.ipynb,242,Write a function to count the total number of characters in a string.,"def count_charac(str1):
 total = 0
 for i in str1:
    total = total + 1
 return total",[],"['assert count_charac(""python programming"")==18', 'assert count_charac(""language"")==8', 'assert count_charac(""words"")==5']"
Benchmark Questions Verification V2.ipynb,244,Write a python function to find the next perfect square greater than a given number.,"import math  
def next_Perfect_Square(N): 
    nextN = math.floor(math.sqrt(N)) + 1
    return nextN * nextN ",[],"['assert next_Perfect_Square(35) == 36', 'assert next_Perfect_Square(6) == 9', 'assert next_Perfect_Square(9) == 16']"
Benchmark Questions Verification V2.ipynb,245,"Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.","def max_sum(arr): 
	MSIBS = arr[:] 
	for i in range(len(arr)): 
		for j in range(0, i): 
			if arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: 
				MSIBS[i] = MSIBS[j] + arr[i] 
	MSDBS = arr[:] 
	for i in range(1, len(arr) + 1): 
		for j in range(1, i): 
			if arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: 
				MSDBS[-i] = MSDBS[-j] + arr[-i] 
	max_sum = float(""-Inf"") 
	for i, j, k in zip(MSIBS, MSDBS, arr): 
		max_sum = max(max_sum, i + j - k) 
	return max_sum",[],"['assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9]) == 194', 'assert max_sum([80, 60, 30, 40, 20, 10]) == 210', 'assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30]) == 138']"
Benchmark Questions Verification V2.ipynb,246,Write a function for computing square roots using the babylonian method.,"def babylonian_squareroot(number):
    if(number == 0):
        return 0;
    g = number/2.0;
    g2 = g + 1;
    while(g != g2):
        n = number/ g;
        g2 = g;
        g = (g + n)/2;
    return g;",['import math'],"['assert math.isclose(babylonian_squareroot(10), 3.162277660168379, rel_tol=0.001)', 'assert math.isclose(babylonian_squareroot(2), 1.414213562373095, rel_tol=0.001)', 'assert math.isclose(babylonian_squareroot(9), 3.0, rel_tol=0.001)']"
Benchmark Questions Verification V2.ipynb,247,Write a function to find the length of the longest palindromic subsequence in the given string.,"def lps(str): 
	n = len(str) 
	L = [[0 for x in range(n)] for x in range(n)] 
	for i in range(n): 
		L[i][i] = 1
	for cl in range(2, n+1): 
		for i in range(n-cl+1): 
			j = i+cl-1
			if str[i] == str[j] and cl == 2: 
				L[i][j] = 2
			elif str[i] == str[j]: 
				L[i][j] = L[i+1][j-1] + 2
			else: 
				L[i][j] = max(L[i][j-1], L[i+1][j]); 
	return L[0][n-1]",[],"['assert lps(""TENS FOR TENS"") == 5', 'assert lps(""CARDIO FOR CARDS"") == 7', 'assert lps(""PART OF THE JOURNEY IS PART"") == 9']"
Benchmark Questions Verification V2.ipynb,248,Write a function that takes in an integer n and calculates the harmonic sum of n-1.,"def harmonic_sum(n):
  if n < 2:
    return 1
  else:
    return 1 / n + (harmonic_sum(n - 1)) ",['import math'],"['assert math.isclose(harmonic_sum(7), 2.5928571428571425, rel_tol=0.001)', 'assert math.isclose(harmonic_sum(4), 2.083333333333333, rel_tol=0.001)', 'assert math.isclose(harmonic_sum(19), 3.547739657143682, rel_tol=0.001)']"
Benchmark Questions Verification V2.ipynb,249,Write a function to find the intersection of two arrays.,"def intersection_array(array_nums1,array_nums2):
 result = list(filter(lambda x: x in array_nums1, array_nums2)) 
 return result",[],"['assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]', 'assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]']"
Benchmark Questions Verification V2.ipynb,250,Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.,"def count_X(tup, x): 
    count = 0
    for ele in tup: 
        if (ele == x): 
            count = count + 1
    return count ",[],"['assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3', 'assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4']"
Benchmark Questions Verification V2.ipynb,251,"Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.","def insert_element(list,element):
 list = [v for elt in list for v in (element, elt)]
 return list",[],"[""assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black']"", ""assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java']"", ""assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad']""]"
Benchmark Questions Verification V2.ipynb,252,Write a python function to convert complex numbers to polar coordinates.,"import cmath  
def convert(numbers):    
  num = cmath.polar(numbers)  
  return (num) ",[],"['assert convert(1) == (1.0, 0.0)', 'assert convert(4) == (4.0,0.0)', 'assert convert(5) == (5.0,0.0)']"
Benchmark Questions Verification V2.ipynb,253,Write a python function that returns the number of integer elements in a given list.,"def count_integer(list1):
    ctr = 0
    for i in list1:
        if isinstance(i, int):
            ctr = ctr + 1
    return ctr",[],"[""assert count_integer([1,2,'abc',1.2]) == 2"", 'assert count_integer([1,2,3]) == 3', 'assert count_integer([1,1.2,4,5.1]) == 2']"
Benchmark Questions Verification V2.ipynb,255,"Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.","from itertools import combinations_with_replacement 
def combinations_colors(l, n):
    return list(combinations_with_replacement(l,n))
",[],"['assert combinations_colors( [""Red"",""Green"",""Blue""],1)==[(\'Red\',), (\'Green\',), (\'Blue\',)]', 'assert combinations_colors( [""Red"",""Green"",""Blue""],2)==[(\'Red\', \'Red\'), (\'Red\', \'Green\'), (\'Red\', \'Blue\'), (\'Green\', \'Green\'), (\'Green\', \'Blue\'), (\'Blue\', \'Blue\')]', 'assert combinations_colors( [""Red"",""Green"",""Blue""],3)==[(\'Red\', \'Red\', \'Red\'), (\'Red\', \'Red\', \'Green\'), (\'Red\', \'Red\', \'Blue\'), (\'Red\', \'Green\', \'Green\'), (\'Red\', \'Green\', \'Blue\'), (\'Red\', \'Blue\', \'Blue\'), (\'Green\', \'Green\', \'Green\'), (\'Green\', \'Green\', \'Blue\'), (\'Green\', \'Blue\', \'Blue\'), (\'Blue\', \'Blue\', \'Blue\')]']"
Benchmark Questions Verification V2.ipynb,256,Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.,"def count_Primes_nums(n):
    ctr = 0
    for num in range(n):
        if num <= 1:
            continue
        for i in range(2,num):
            if (num % i) == 0:
                break
        else:
            ctr += 1
    return ctr",[],"['assert count_Primes_nums(5) == 2', 'assert count_Primes_nums(10) == 4', 'assert count_Primes_nums(100) == 25']"
Benchmark Questions Verification V2.ipynb,257,Write a function that takes in two numbers and returns a tuple with the second number and then the first number.,"def swap_numbers(a,b):
 temp = a
 a = b
 b = temp
 return (a,b)",[],"['assert swap_numbers(10,20)==(20,10)', 'assert swap_numbers(15,17)==(17,15)', 'assert swap_numbers(100,200)==(200,100)']"
Benchmark Questions Verification V2.ipynb,259,Write a function to maximize the given two tuples.,"def maximize_elements(test_tup1, test_tup2):
  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))', 'assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))', 'assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))']"
Benchmark Questions Verification V2.ipynb,260,Write a function to find the nth newman–shanks–williams prime number.,"def newman_prime(n): 
	if n == 0 or n == 1: 
		return 1
	return 2 * newman_prime(n - 1) + newman_prime(n - 2)",[],"['assert newman_prime(3) == 7', 'assert newman_prime(4) == 17', 'assert newman_prime(5) == 41']"
Benchmark Questions Verification V2.ipynb,261,Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.,"def division_elements(test_tup1, test_tup2):
  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)', 'assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)', 'assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)']"
Benchmark Questions Verification V2.ipynb,262,"Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.","def split_two_parts(list1, L):
    return list1[:L], list1[L:]",[],"['assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])', ""assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])"", ""assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])""]"
Benchmark Questions Verification V2.ipynb,264,Write a function to calculate a dog's age in dog's years.,"def dog_age(h_age):
 if h_age < 0:
 	exit()
 elif h_age <= 2:
	 d_age = h_age * 10.5
 else:
	 d_age = 21 + (h_age - 2)*4
 return d_age",[],"['assert dog_age(12)==61', 'assert dog_age(15)==73', 'assert dog_age(24)==109']"
Benchmark Questions Verification V2.ipynb,265,"Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.","def list_split(S, step):
    return [S[i::step] for i in range(step)]",[],"[""assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"", 'assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]]', ""assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]""]"
Benchmark Questions Verification V2.ipynb,266,Write a function to find the lateral surface area of a cube given its side length.,"def lateralsurface_cube(l):
  LSA = 4 * (l * l)
  return LSA",[],"['assert lateralsurface_cube(5)==100', 'assert lateralsurface_cube(9)==324', 'assert lateralsurface_cube(10)==400']"
Benchmark Questions Verification V2.ipynb,267,Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.,"def square_Sum(n):  
    return int(n*(4*n*n-1)/3) ",[],"['assert square_Sum(2) == 10', 'assert square_Sum(3) == 35', 'assert square_Sum(4) == 84']"
Benchmark Questions Verification V2.ipynb,268,Write a function to find the n'th star number.,"def find_star_num(n): 
	return (6 * n * (n - 1) + 1) ",[],"['assert find_star_num(3) == 37', 'assert find_star_num(4) == 73', 'assert find_star_num(5) == 121']"
Benchmark Questions Verification V2.ipynb,269,Write a function to find the ascii value of a character.,"def ascii_value(k):
  ch=k
  return ord(ch)",[],"[""assert ascii_value('A')==65"", ""assert ascii_value('R')==82"", ""assert ascii_value('S')==83""]"
Benchmark Questions Verification V2.ipynb,270,Write a python function to find the sum of even numbers at even positions of a list.,"def sum_even_and_even_index(arr):  
    i = 0
    sum = 0
    for i in range(0, len(arr),2): 
        if (arr[i] % 2 == 0) : 
            sum += arr[i]  
    return sum",[],"['assert sum_even_and_even_index([5, 6, 12, 1, 18, 8]) == 30', 'assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18]) == 26', 'assert sum_even_and_even_index([5, 6, 12, 1]) == 12']"
Benchmark Questions Verification V2.ipynb,271,Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.,"def even_Power_Sum(n): 
    sum = 0; 
    for i in range(1,n+1): 
        j = 2*i; 
        sum = sum + (j*j*j*j*j); 
    return sum; ",[],"['assert even_Power_Sum(2) == 1056', 'assert even_Power_Sum(3) == 8832', 'assert even_Power_Sum(1) == 32']"
Benchmark Questions Verification V2.ipynb,272,Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.,"def rear_extract(test_list):
  res = [lis[-1] for lis in test_list]
  return (res) ",[],"[""assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]"", ""assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]"", ""assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]""]"
Benchmark Questions Verification V2.ipynb,273,Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.,"def substract_elements(test_tup1, test_tup2):
  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))
  return (res) ",[],"['assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)', 'assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)', 'assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)']"
Benchmark Questions Verification V2.ipynb,274,Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.,"import math  
def even_binomial_Coeff_Sum( n): 
    return (1 << (n - 1)) ",[],"['assert even_binomial_Coeff_Sum(4) == 8', 'assert even_binomial_Coeff_Sum(6) == 32', 'assert even_binomial_Coeff_Sum(2) == 2']"
Benchmark Questions Verification V2.ipynb,276,Write a function that takes in the radius and height of a cylinder and returns the the volume.,"def volume_cylinder(r,h):
  volume=3.1415*r*r*h
  return volume",['import math'],"['assert math.isclose(volume_cylinder(10,5), 1570.7500000000002, rel_tol=0.001)', 'assert math.isclose(volume_cylinder(4,5), 251.32000000000002, rel_tol=0.001)', 'assert math.isclose(volume_cylinder(4,10), 502.64000000000004, rel_tol=0.001)']"
Benchmark Questions Verification V2.ipynb,277,Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.,"def dict_filter(dict,n):
 result = {key:value for (key, value) in dict.items() if value >=n}
 return result",[],"[""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"", ""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}"", ""assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}""]"
Benchmark Questions Verification V2.ipynb,278,Write a function to find the number of elements that occurs before the tuple element in the given tuple.,"def count_first_elements(test_tup):
  for count, ele in enumerate(test_tup):
    if isinstance(ele, tuple):
      break
  return (count) ",[],"['assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3', 'assert count_first_elements((2, 9, (5, 7), 11) ) == 2', 'assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4']"
Benchmark Questions Verification V2.ipynb,279,Write a function to find the nth decagonal number.,"def is_num_decagonal(n): 
	return 4 * n * n - 3 * n ",[],"['assert is_num_decagonal(3) == 27', 'assert is_num_decagonal(7) == 175', 'assert is_num_decagonal(10) == 370']"
Benchmark Questions Verification V2.ipynb,280,Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).,"def sequential_search(dlist, item):
    pos = 0
    found = False
    while pos < len(dlist) and not found:
        if dlist[pos] == item:
            found = True
        else:
            pos = pos + 1
    return found, pos",[],"['assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)', 'assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)', 'assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)']"
Benchmark Questions Verification V2.ipynb,281,Write a python function to check if the elements of a given list are unique or not.,"def all_unique(test_list):
    if len(test_list) > len(set(test_list)):
        return False
    return True",[],"['assert all_unique([1,2,3]) == True', 'assert all_unique([1,2,1,2]) == False', 'assert all_unique([1,2,3,4,5]) == True']"
Benchmark Questions Verification V2.ipynb,282,Write a function to subtract two lists element-wise.,"def sub_list(nums1,nums2):
  result = map(lambda x, y: x - y, nums1, nums2)
  return list(result)",[],"['assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]', 'assert sub_list([1,2],[3,4])==[-2,-2]', 'assert sub_list([90,120],[50,70])==[40,50]']"
Benchmark Questions Verification V2.ipynb,283,Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.,"def validate(n): 
    for i in range(10): 
        temp = n;  
        count = 0; 
        while (temp): 
            if (temp % 10 == i): 
                count+=1;  
            if (count > i): 
                return False
            temp //= 10; 
    return True",[],"['assert validate(1234) == True', 'assert validate(51241) == False', 'assert validate(321) == True']"
Benchmark Questions Verification V2.ipynb,284,Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.,"def check_element(list,element):
  check_element=all(v== element for v in list)
  return check_element",[],"['assert check_element([""green"", ""orange"", ""black"", ""white""],\'blue\')==False', 'assert check_element([1,2,3,4],7)==False', 'assert check_element([""green"", ""green"", ""green"", ""green""],\'green\')==True']"
Benchmark Questions Verification V2.ipynb,285,Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.,"import re
def text_match_two_three(text):
        patterns = 'ab{2,3}'
        if re.search(patterns,  text):
                return True
        else:
                return False",[],"['assert text_match_two_three(""ac"")==(False)', 'assert text_match_two_three(""dc"")==(False)', 'assert text_match_two_three(""abbbba"")==(True)']"
Benchmark Questions Verification V2.ipynb,286,Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.,"def max_sub_array_sum_repeated(a, n, k): 
	max_so_far = -2147483648
	max_ending_here = 0
	for i in range(n*k): 
		max_ending_here = max_ending_here + a[i%n] 
		if (max_so_far < max_ending_here): 
			max_so_far = max_ending_here 
		if (max_ending_here < 0): 
			max_ending_here = 0
	return max_so_far",[],"['assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30', 'assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59', 'assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1']"
Benchmark Questions Verification V2.ipynb,287,Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.,"def square_Sum(n):  
    return int(2*n*(n+1)*(2*n+1)/3)",[],"['assert square_Sum(2) == 20', 'assert square_Sum(3) == 56', 'assert square_Sum(4) == 120']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,290,Write a function to find the list of maximum length in a list of lists.,"def max_length(list1):
    max_length = max(len(x) for x in  list1 )  
    max_list = max((x) for x in   list1)
    return(max_length, max_list)",[],"['assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])', 'assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])', 'assert max_length([[5], [15,20,25]])==(3, [15,20,25])']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,291,Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.,"def count_no_of_ways(n, k): 
	dp = [0] * (n + 1) 
	total = k 
	mod = 1000000007
	dp[1] = k 
	dp[2] = k * k	 
	for i in range(3,n+1): 
		dp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod 
	return dp[n]",[],"['assert count_no_of_ways(2, 4) == 16', 'assert count_no_of_ways(3, 2) == 6', 'assert count_no_of_ways(4, 4) == 228']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,292,Write a python function to find quotient of two numbers (rounded down to the nearest integer).,"def find(n,m):  
    q = n//m 
    return (q)",[],"['assert find(10,3) == 3', 'assert find(4,2) == 2', 'assert find(20,5) == 4']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,293,Write a function to find the third side of a right angled triangle.,"import math
def otherside_rightangle(w,h):
  s=math.sqrt((w*w)+(h*h))
  return s",[],"['assert otherside_rightangle(7,8)==10.63014581273465', 'assert otherside_rightangle(3,4)==5', 'assert otherside_rightangle(7,15)==16.55294535724685']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,294,Write a function to find the maximum value in a given heterogeneous list.,"def max_val(listval):
     max_val = max(i for i in listval if isinstance(i, int)) 
     return(max_val)",[],"[""assert max_val(['Python', 3, 2, 4, 5, 'version'])==5"", ""assert max_val(['Python', 15, 20, 25])==25"", ""assert max_val(['Python', 30, 20, 40, 50, 'version'])==50""]"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,295,Write a function to return the sum of all divisors of a number.,"def sum_div(number):
    divisors = [1]
    for i in range(2, number):
        if (number % i)==0:
            divisors.append(i)
    return sum(divisors)",[],"['assert sum_div(8)==7', 'assert sum_div(12)==16', 'assert sum_div(7)==1']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,296,Write a python function to count inversions in an array.,"def get_Inv_Count(arr): 
    inv_count = 0
    for i in range(len(arr)): 
        for j in range(i + 1, len(arr)): 
            if (arr[i] > arr[j]): 
                inv_count += 1
    return inv_count ",[],"['assert get_Inv_Count([1,20,6,4,5]) == 5', 'assert get_Inv_Count([1,2,1]) == 1', 'assert get_Inv_Count([1,2,5,6,1]) == 3']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,297,Write a function to flatten a given nested list structure.,"def flatten_list(list1):
    result_list = []
    if not list1: return result_list
    stack = [list(list1)]
    while stack:
        c_num = stack.pop()
        next = c_num.pop()
        if c_num: stack.append(c_num)
        if isinstance(next, list):
            if next: stack.append(list(next))
        else: result_list.append(next)
    result_list.reverse()
    return result_list ",[],"['assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]', 'assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]', 'assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,299,Write a function to calculate the maximum aggregate from the list of tuples.,"from collections import defaultdict
def max_aggregate(stdata):
    temp = defaultdict(int)
    for name, marks in stdata:
        temp[name] += marks
    return max(temp.items(), key=lambda x: x[1])",[],"[""assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)"", ""assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)"", ""assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)""]"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,300,Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.,"def count_binary_seq(n): 
	nCr = 1
	res = 1
	for r in range(1, n + 1): 
		nCr = (nCr * (n + 1 - r)) / r 
		res += nCr * nCr 
	return res ",['import math'],"['assert math.isclose(count_binary_seq(1), 2.0, rel_tol=0.001)', 'assert math.isclose(count_binary_seq(2), 6.0, rel_tol=0.001)', 'assert math.isclose(count_binary_seq(3), 20.0, rel_tol=0.001)']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,301,Write a function to find the depth of a dictionary.,"def dict_depth(d):
    if isinstance(d, dict):
        return 1 + (max(map(dict_depth, d.values())) if d else 0)
    return 0",[],"[""assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4"", ""assert dict_depth({'a':1, 'b': {'c':'python'}})==2"", ""assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3""]"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,304,Write a python function to find element at a given index after number of rotations.,"def find_Element(arr,ranges,rotations,index) :  
    for i in range(rotations - 1,-1,-1 ) : 
        left = ranges[i][0] 
        right = ranges[i][1] 
        if (left <= index and right >= index) : 
            if (index == left) : 
                index = right 
            else : 
                index = index - 1 
    return arr[index] ",[],"['assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3', 'assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3', 'assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,305,Write a function to return two words from a list of words starting with letter 'p'.,"import re
def start_withp(words):
 for w in words:
        m = re.match(""(P\w+)\W(P\w+)"", w)
        if m:
            return m.groups()",[],"['assert start_withp([""Python PHP"", ""Java JavaScript"", ""c c++""])==(\'Python\', \'PHP\')', 'assert start_withp([""Python Programming"",""Java Programming""])==(\'Python\',\'Programming\')', 'assert start_withp([""Pqrst Pqr"",""qrstuv""])==(\'Pqrst\',\'Pqr\')']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,306,"Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .","def max_sum_increasing_subseq(a, n, index, k):
	dp = [[0 for i in range(n)] 
			for i in range(n)]
	for i in range(n):
		if a[i] > a[0]:
			dp[0][i] = a[i] + a[0]
		else:
			dp[0][i] = a[i]
	for i in range(1, n):
		for j in range(n):
			if a[j] > a[i] and j > i:
				if dp[i - 1][i] + a[j] > dp[i - 1][j]:
					dp[i][j] = dp[i - 1][i] + a[j]
				else:
					dp[i][j] = dp[i - 1][j]
			else:
				dp[i][j] = dp[i - 1][j]
	return dp[index][k]",[],"['assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11', 'assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7', 'assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,307,Write a function to get a colon of a tuple.,"from copy import deepcopy
def colon_tuplex(tuplex,m,n):
  tuplex_colon = deepcopy(tuplex)
  tuplex_colon[m].append(n)
  return tuplex_colon",[],"['assert colon_tuplex((""HELLO"", 5, [], True) ,2,50)==(""HELLO"", 5, [50], True)', 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,100)==((""HELLO"", 5, [100],True))', 'assert colon_tuplex((""HELLO"", 5, [], True) ,2,500)==(""HELLO"", 5, [500], True)']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,308,"Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.","def large_product(nums1, nums2, N):
    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]
    return result",[],"['assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]', 'assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,309,Write a python function to find the maximum of two numbers.,"def maximum(a,b):   
    if a >= b: 
        return a 
    else: 
        return b ",[],"['assert maximum(5,10) == 10', 'assert maximum(-1,-2) == -1', 'assert maximum(9,7) == 9']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,310,Write a function to convert a given string to a tuple of characters.,"def string_to_tuple(str1):
    result = tuple(x for x in str1 if not x.isspace()) 
    return result",[],"['assert string_to_tuple(""python 3.0"")==(\'p\', \'y\', \'t\', \'h\', \'o\', \'n\', \'3\', \'.\', \'0\')', 'assert string_to_tuple(""item1"")==(\'i\', \'t\', \'e\', \'m\', \'1\')', 'assert string_to_tuple(""15.10"")==(\'1\', \'5\', \'.\', \'1\', \'0\')']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,311,Write a python function to set the left most unset bit.,"def set_left_most_unset_bit(n): 
    if not (n & (n + 1)): 
        return n 
    pos, temp, count = 0, n, 0 
    while temp: 
        if not (temp & 1): 
            pos = count      
        count += 1; temp>>=1
    return (n | (1 << (pos))) ",[],"['assert set_left_most_unset_bit(10) == 14', 'assert set_left_most_unset_bit(12) == 14', 'assert set_left_most_unset_bit(15) == 15']"
Ellen's Copy of Benchmark Questions Verification V2.ipynb,312,Write a function to find the volume of a cone.,"import math
def volume_cone(r,h):
  volume = (1.0/3) * math.pi * r * r * h
  return volume",['import math'],"['assert math.isclose(volume_cone(5,12), 314.15926535897927, rel_tol=0.001)', 'assert math.isclose(volume_cone(10,15), 1570.7963267948965, rel_tol=0.001)', 'assert math.isclose(volume_cone(19,17), 6426.651371693521, rel_tol=0.001)']"
Benchmark Questions Verification V2.ipynb,388,Write a python function to find the highest power of 2 that is less than or equal to n.,"def highest_Power_of_2(n): 
    res = 0 
    for i in range(n, 0, -1): 
        if ((i & (i - 1)) == 0): 
            res = i 
            break 
    return res ",[],"['assert highest_Power_of_2(10) == 8', 'assert highest_Power_of_2(19) == 16', 'assert highest_Power_of_2(32) == 32']"
Benchmark Questions Verification V2.ipynb,389,Write a function to find the n'th lucas number.,"def find_lucas(n): 
	if (n == 0): 
		return 2
	if (n == 1): 
		return 1
	return find_lucas(n - 1) + find_lucas(n - 2) ",[],"['assert find_lucas(9) == 76', 'assert find_lucas(4) == 7', 'assert find_lucas(3) == 4']"
Benchmark Questions Verification V2.ipynb,390,Write a function to apply a given format string to all of the elements in a list.,"def add_string(list_, string):
 add_string=[string.format(i) for i in  list_]
 return add_string",[],"[""assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']"", ""assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']"", ""assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']""]"
Benchmark Questions Verification V2.ipynb,391,Write a function to convert more than one list to nested dictionary.,"def convert_list_dictionary(l1, l2, l3):
     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]
     return result",[],"['assert convert_list_dictionary([""S001"", ""S002"", ""S003"", ""S004""],[""Adina Park"", ""Leyton Marsh"", ""Duncan Boyle"", ""Saim Richards""] ,[85, 98, 89, 92])==[{\'S001\': {\'Adina Park\': 85}}, {\'S002\': {\'Leyton Marsh\': 98}}, {\'S003\': {\'Duncan Boyle\': 89}}, {\'S004\': {\'Saim Richards\': 92}}]', 'assert convert_list_dictionary([""abc"",""def"",""ghi"",""jkl""],[""python"",""program"",""language"",""programs""],[100,200,300,400])==[{\'abc\':{\'python\':100}},{\'def\':{\'program\':200}},{\'ghi\':{\'language\':300}},{\'jkl\':{\'programs\':400}}]', 'assert convert_list_dictionary([""A1"",""A2"",""A3"",""A4""],[""java"",""C"",""C++"",""DBMS""],[10,20,30,40])==[{\'A1\':{\'java\':10}},{\'A2\':{\'C\':20}},{\'A3\':{\'C++\':30}},{\'A4\':{\'DBMS\':40}}]']"
Benchmark Questions Verification V2.ipynb,392,"Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).","def get_max_sum (n):
	res = list()
	res.append(0)
	res.append(1)
	i = 2
	while i<n + 1:
		res.append(max(i, (res[int(i / 2)] 
						+ res[int(i / 3)] +
							res[int(i / 4)]
						+ res[int(i / 5)])))
		i = i + 1
	return res[n]",[],"['assert get_max_sum(60) == 106', 'assert get_max_sum(10) == 12', 'assert get_max_sum(2) == 2']"
charlessutton@: Benchmark Questions Verification V2.ipynb,393,Write a function to find the list with maximum length.,"def max_length_list(input_list):
    max_length = max(len(x) for x in input_list )   
    max_list = max(input_list, key = lambda i: len(i))    
    return(max_length, max_list)",[],"['assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])', 'assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])', 'assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])']"
Benchmark Questions Verification V2.ipynb,394,Write a function to check if given tuple contains no duplicates.,"def check_distinct(test_tup):
  res = True
  temp = set()
  for ele in test_tup:
    if ele in temp:
      res = False
      break
    temp.add(ele)
  return res ",[],"['assert check_distinct((1, 4, 5, 6, 1, 4)) == False', 'assert check_distinct((1, 4, 5, 6)) == True', 'assert check_distinct((2, 3, 4, 5, 6)) == True']"
Benchmark Questions Verification V2.ipynb,395,Write a python function to find the first non-repeated character in a given string.,"def first_non_repeating_character(str1):
  char_order = []
  ctr = {}
  for c in str1:
    if c in ctr:
      ctr[c] += 1
    else:
      ctr[c] = 1 
      char_order.append(c)
  for c in char_order:
    if ctr[c] == 1:
      return c
  return None",[],"['assert first_non_repeating_character(""abcabc"") == None', 'assert first_non_repeating_character(""abc"") == ""a""', 'assert first_non_repeating_character(""ababc"") == ""c""']"
charlessutton@: Benchmark Questions Verification V2.ipynb,396,Write a function to check whether the given string starts and ends with the same character or not.,"import re  
regex = r'^[a-z]$|^([a-z]).*\1$'
def check_char(string): 
	if(re.search(regex, string)): 
		return ""Valid"" 
	else: 
		return ""Invalid"" ",[],"['assert check_char(""abba"") == ""Valid""', 'assert check_char(""a"") == ""Valid""', 'assert check_char(""abcd"") == ""Invalid""']"
Benchmark Questions Verification V2.ipynb,397,Write a function to find the median of three numbers.,"def median_numbers(a,b,c):
 if a > b:
    if a < c:
        median = a
    elif b > c:
        median = b
    else:
        median = c
 else:
    if a > c:
        median = a
    elif b < c:
        median = b
    else:
        median = c
 return median",[],"['assert median_numbers(25,55,65)==55.0', 'assert median_numbers(20,10,30)==20.0', 'assert median_numbers(15,45,75)==45.0']"
Benchmark Questions Verification V2.ipynb,398,Write a function to compute the sum of digits of each number of a given list.,"def sum_of_digits(nums):
    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",[],"['assert sum_of_digits([10,2,56])==14', ""assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19"", 'assert sum_of_digits([10,20,-4,5,-70])==19']"
Benchmark Questions Verification V2.ipynb,399,Write a function to perform the mathematical bitwise xor operation across the given tuples.,"def bitwise_xor(test_tup1, test_tup2):
  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)', 'assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)', 'assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)']"
Benchmark Questions Verification V2.ipynb,400,Write a function to extract the number of unique tuples in the given list.,"def extract_freq(test_list):
  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))
  return (res)",[],"['assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3', 'assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4', 'assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4']"
Benchmark Questions Verification V2.ipynb,401,Write a function to perform index wise addition of tuple elements in the given two nested tuples.,"def add_nested_tuples(test_tup1, test_tup2):
  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))', 'assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))', 'assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))']"
Benchmark Questions Verification V2.ipynb,404,Write a python function to find the minimum of two numbers.,"def minimum(a,b):   
    if a <= b: 
        return a 
    else: 
        return b ",[],"['assert minimum(1,2) == 1', 'assert minimum(-5,-4) == -5', 'assert minimum(0,0) == 0']"
Benchmark Questions Verification V2.ipynb,405,Write a function to check whether an element exists within a tuple.,"def check_tuplex(tuplex,tuple1): 
  if tuple1 in tuplex:
    return True
  else:
     return False",[],"['assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),\'r\')==True', 'assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"", ""e""),\'5\')==False', 'assert check_tuplex((""w"", 3, ""r"", ""e"", ""s"", ""o"", ""u"", ""r"", ""c"",""e""),3)==True']"
Benchmark Questions Verification V2.ipynb,406,Write a python function to find whether the parity of a given number is odd.,"def find_Parity(x): 
    y = x ^ (x >> 1); 
    y = y ^ (y >> 2); 
    y = y ^ (y >> 4); 
    y = y ^ (y >> 8); 
    y = y ^ (y >> 16); 
    if (y & 1): 
        return True
    return False",[],"['assert find_Parity(12) == False', 'assert find_Parity(7) == True', 'assert find_Parity(10) == False']"
Benchmark Questions Verification V2.ipynb,407,Write a function to create the next bigger number by rearranging the digits of a given number.,"def rearrange_bigger(n):
    nums = list(str(n))
    for i in range(len(nums)-2,-1,-1):
        if nums[i] < nums[i+1]:
            z = nums[i:]
            y = min(filter(lambda x: x > z[0], z))
            z.remove(y)
            z.sort()
            nums[i:] = [y] + z
            return int("""".join(nums))
    return False",[],"['assert rearrange_bigger(12)==21', 'assert rearrange_bigger(10)==False', 'assert rearrange_bigger(102)==120']"
Benchmark Questions Verification V2.ipynb,408,Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.,"import heapq
def k_smallest_pairs(nums1, nums2, k):
   queue = []
   def push(i, j):
       if i < len(nums1) and j < len(nums2):
           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])
   push(0, 0)
   pairs = []
   while queue and len(pairs) < k:
       _, i, j = heapq.heappop(queue)
       pairs.append([nums1[i], nums2[j]])
       push(i, j + 1)
       if j == 0:
           push(i + 1, 0)
   return pairs",[],"['assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]', 'assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]']"
Benchmark Questions Verification V2.ipynb,409,Write a function to find the minimum product from the pairs of tuples within a given list.,"def min_product_tuple(list1):
    result_min = min([abs(x * y) for x, y in list1] )
    return result_min",[],"['assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8', 'assert min_product_tuple([(10,20), (15,2), (5,10)] )==30', 'assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100']"
Benchmark Questions Verification V2.ipynb,410,Write a function to find the minimum value in a given heterogeneous list.,"def min_val(listval):
     min_val = min(i for i in listval if isinstance(i, int))
     return min_val",[],"[""assert min_val(['Python', 3, 2, 4, 5, 'version'])==2"", ""assert min_val(['Python', 15, 20, 25])==15"", ""assert min_val(['Python', 30, 20, 40, 50, 'version'])==20""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,411,Write a function to convert the given snake case string to camel case string.,"import re
def snake_to_camel(word):
  return ''.join(x.capitalize() or '_' for x in word.split('_'))",[],"[""assert snake_to_camel('android_tv') == 'AndroidTv'"", ""assert snake_to_camel('google_pixel') == 'GooglePixel'"", ""assert snake_to_camel('apple_watch') == 'AppleWatch'""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,412,Write a python function to remove odd numbers from a given list.,"def remove_odd(l):
    for i in l:
        if i % 2 != 0:
            l.remove(i)
    return l",[],"['assert remove_odd([1,2,3]) == [2]', 'assert remove_odd([2,4,6]) == [2,4,6]', 'assert remove_odd([10,20,3]) == [10,20]']"
charlessutton@: Benchmark Questions Verification V2.ipynb,413,Write a function to extract the nth element from a given list of tuples.,"def extract_nth_element(list1, n):
    result = [x[n] for x in list1]
    return result",[],"[""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"", ""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]"", ""assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,414,Write a python function to check whether any value in a sequence exists in a sequence or not.,"def overlapping(list1,list2):  
    for i in range(len(list1)): 
        for j in range(len(list2)): 
            if(list1[i]==list2[j]): 
                return True
    return False",[],"['assert overlapping([1,2,3,4,5],[6,7,8,9]) == False', 'assert overlapping([1,2,3],[4,5,6]) == False', 'assert overlapping([1,4,5],[1,4,5]) == True']"
charlessutton@: Benchmark Questions Verification V2.ipynb,415,Write a python function to find a pair with highest product from a given array of integers.,"def max_Product(arr): 
    arr_len = len(arr) 
    if (arr_len < 2): 
        return (""No pairs exists"")           
    x = arr[0]; y = arr[1]      
    for i in range(0,arr_len): 
        for j in range(i + 1,arr_len): 
            if (arr[i] * arr[j] > x * y): 
                x = arr[i]; y = arr[j] 
    return x,y    ",[],"['assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)', 'assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)', 'assert max_Product([1,2,3]) == (2,3)']"
charlessutton@: Benchmark Questions Verification V2.ipynb,417,Write a function to find common first element in given list of tuple.,"def group_tuples(Input): 
	out = {} 
	for elem in Input: 
		try: 
			out[elem[0]].extend(elem[1:]) 
		except KeyError: 
			out[elem[0]] = list(elem) 
	return [tuple(values) for values in out.values()] ",[],"[""assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]"", ""assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]"", ""assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,418,Write a python function to find the element of a list having maximum length.,"def Find_Max(lst): 
    maxList = max((x) for x in lst) 
    return maxList",[],"[""assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']"", 'assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]', 'assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]']"
charlessutton@: Benchmark Questions Verification V2.ipynb,419,Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.,"def round_and_sum(list1):
  lenght=len(list1)
  round_and_sum=sum(list(map(round,list1))* lenght)
  return round_and_sum",[],"['assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243', 'assert round_and_sum([5,2,9,24.3,29])==345', 'assert round_and_sum([25.0,56.7,89.2])==513']"
charlessutton@: Benchmark Questions Verification V2.ipynb,420,Write a python function to find the cube sum of first n even natural numbers.,"def cube_Sum(n): 
    sum = 0
    for i in range(1,n + 1): 
        sum += (2*i)*(2*i)*(2*i) 
    return sum",[],"['assert cube_Sum(2) == 72', 'assert cube_Sum(3) == 288', 'assert cube_Sum(4) == 800']"
charlessutton@: Benchmark Questions Verification V2.ipynb,421,Write a function to concatenate each element of tuple by the delimiter.,"def concatenate_tuple(test_tup):
    delim = ""-""
    res = ''.join([str(ele) + delim for ele in test_tup])
    res = res[ : len(res) - len(delim)]
    return (str(res)) ",[],"['assert concatenate_tuple((""ID"", ""is"", 4, ""UTS"") ) == \'ID-is-4-UTS\'', 'assert concatenate_tuple((""QWE"", ""is"", 4, ""RTY"") ) == \'QWE-is-4-RTY\'', 'assert concatenate_tuple((""ZEN"", ""is"", 4, ""OP"") ) == \'ZEN-is-4-OP\'']"
charlessutton@: Benchmark Questions Verification V2.ipynb,422,Write a python function to find the average of cubes of first n natural numbers.,"def find_Average_Of_Cube(n):  
    sum = 0
    for i in range(1, n + 1): 
        sum += i * i * i  
    return round(sum / n, 6) ",[],"['assert find_Average_Of_Cube(2) == 4.5', 'assert find_Average_Of_Cube(3) == 12', 'assert find_Average_Of_Cube(1) == 1']"
charlessutton@: Benchmark Questions Verification V2.ipynb,424,Write a function to extract only the rear index element of each string in the given tuple.,"def extract_rear(test_tuple):
  res = list(sub[len(sub) - 1] for sub in test_tuple)
  return (res) ",[],"[""assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']"", ""assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']"", ""assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,425,Write a function to count the number of sublists containing a particular element.,"def count_element_in_list(list1, x): 
    ctr = 0
    for i in range(len(list1)): 
        if x in list1[i]: 
            ctr+= 1          
    return ctr",[],"['assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3', ""assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3"", ""assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,426,Write a function to filter odd numbers.,"def filter_oddnumbers(nums):
 odd_nums = list(filter(lambda x: x%2 != 0, nums))
 return odd_nums",[],"['assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]', 'assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]', 'assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]']"
charlessutton@: Benchmark Questions Verification V2.ipynb,427,Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.,"import re
def change_date_format(dt):
        return re.sub(r'(\d{4})-(\d{1,2})-(\d{1,2})', '\\3-\\2-\\1', dt)",[],"['assert change_date_format(""2026-01-02"") == \'02-01-2026\'', 'assert change_date_format(""2020-11-13"") == \'13-11-2020\'', 'assert change_date_format(""2021-04-26"") == \'26-04-2021\'']"
charlessutton@: Benchmark Questions Verification V2.ipynb,428,Write a function to sort the given array by using shell sort.,"def shell_sort(my_list):
    gap = len(my_list) // 2
    while gap > 0:
        for i in range(gap, len(my_list)):
            current_item = my_list[i]
            j = i
            while j >= gap and my_list[j - gap] > current_item:
                my_list[j] = my_list[j - gap]
                j -= gap
            my_list[j] = current_item
        gap //= 2

    return my_list",[],"['assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]', 'assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]', 'assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]']"
charlessutton@: Benchmark Questions Verification V2.ipynb,429,Write a function to extract the elementwise and tuples from the given two tuples.,"def and_tuples(test_tup1, test_tup2):
  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)', 'assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)', 'assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)']"
charlessutton@: Benchmark Questions Verification V2.ipynb,430,Write a function to find the directrix of a parabola.,"def parabola_directrix(a, b, c): 
  directrix=((int)(c - ((b * b) + 1) * 4 * a ))
  return directrix",[],"['assert parabola_directrix(5,3,2)==-198', 'assert parabola_directrix(9,8,4)==-2336', 'assert parabola_directrix(2,4,6)==-130']"
charlessutton@: Benchmark Questions Verification V2.ipynb,431,Write a function that takes two lists and returns true if they have at least one common element.,"def common_element(list1, list2):
     result = False
     for x in list1:
         for y in list2:
             if x == y:
                 result = True
                 return result",[],"['assert common_element([1,2,3,4,5], [5,6,7,8,9])==True', 'assert common_element([1,2,3,4,5], [6,7,8,9])==None', ""assert common_element(['a','b','c'], ['d','b','e'])==True""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,432,Write a function to find the median length of a trapezium.,"def median_trapezium(base1,base2,height):
 median = 0.5 * (base1+ base2)
 return median",[],"['assert median_trapezium(15,25,35)==20', 'assert median_trapezium(10,20,30)==15', 'assert median_trapezium(6,9,4)==7.5']"
charlessutton@: Benchmark Questions Verification V2.ipynb,433,Write a function to check whether the entered number is greater than the elements of the given array.,"def check_greater(arr, number):
  arr.sort()
  return number > arr[-1]",[],"['assert check_greater([1, 2, 3, 4, 5], 4) == False', 'assert check_greater([2, 3, 4, 5, 6], 8) == True', 'assert check_greater([9, 7, 4, 8, 6, 1], 11) == True']"
charlessutton@: Benchmark Questions Verification V2.ipynb,434,Write a function that matches a string that has an a followed by one or more b's.,"import re
def text_match_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return True
        else:
                return False
",[],"['assert text_match_one(""ac"")==False', 'assert text_match_one(""dc"")==False', 'assert text_match_one(""abba"")==True']"
charlessutton@: Benchmark Questions Verification V2.ipynb,435,Write a python function to find the last digit of a given number.,"def last_Digit(n) :
    return (n % 10) ",[],"['assert last_Digit(123) == 3', 'assert last_Digit(25) == 5', 'assert last_Digit(30) == 0']"
charlessutton@: Benchmark Questions Verification V2.ipynb,436,Write a python function to return the negative numbers in a list.,"def neg_nos(list1):
  out = []
  for num in list1: 
    if num < 0: 
      out.append(num)
  return out ",[],"['assert neg_nos([-1,4,5,-6]) == [-1,-6]', 'assert neg_nos([-1,-2,3,4]) == [-1,-2]', 'assert neg_nos([-7,-6,8,9]) == [-7,-6]']"
charlessutton@: Benchmark Questions Verification V2.ipynb,437,Write a function to remove odd characters in a string.,"def remove_odd(str1):
 str2 = ''
 for i in range(1, len(str1) + 1):
    if(i % 2 == 0):
        str2 = str2 + str1[i - 1]
 return str2",[],"['assert remove_odd(""python"")==(""yhn"")', 'assert remove_odd(""program"")==(""rga"")', 'assert remove_odd(""language"")==(""agae"")']"
charlessutton@: Benchmark Questions Verification V2.ipynb,438,Write a function to count bidirectional tuple pairs.,"def count_bidirectional(test_list):
  res = 0
  for idx in range(0, len(test_list)):
    for iidx in range(idx + 1, len(test_list)):
      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:
        res += 1
  return res",[],"['assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 3', 'assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == 2', 'assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == 4']"
charlessutton@: Benchmark Questions Verification V2.ipynb,439,Write a function to join a list of multiple integers into a single integer.,"def multiple_to_single(L):
  x = int("""".join(map(str, L)))
  return x",[],"['assert multiple_to_single([11, 33, 50])==113350', 'assert multiple_to_single([-1,2,3,4,5,6])==-123456', 'assert multiple_to_single([10,15,20,25])==10152025']"
charlessutton@: Benchmark Questions Verification V2.ipynb,440,Write a function to find the first adverb and their positions in a given sentence.,"import re
def find_adverb_position(text):
 for m in re.finditer(r""\w+ly"", text):
    return (m.start(), m.end(), m.group(0))",[],"['assert find_adverb_position(""clearly!! we can see the sky"")==(0, 7, \'clearly\')', 'assert find_adverb_position(""seriously!! there are many roses"")==(0, 9, \'seriously\')', 'assert find_adverb_position(""unfortunately!! sita is going to home"")==(0, 13, \'unfortunately\')']"
charlessutton@: Benchmark Questions Verification V2.ipynb,441,Write a function to find the surface area of a cube of a given size.,"def surfacearea_cube(l):
  surfacearea= 6*l*l
  return surfacearea",[],"['assert surfacearea_cube(5)==150', 'assert surfacearea_cube(3)==54', 'assert surfacearea_cube(10)==600']"
charlessutton@: Benchmark Questions Verification V2.ipynb,442,Write a function to find the ration of positive numbers in an array of integers.,"from array import array
def positive_count(nums):
    n = len(nums)
    n1 = 0
    for x in nums:
        if x > 0:
            n1 += 1
        else:
          None
    return round(n1/n,2)",[],"['assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54', 'assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69', 'assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56']"
charlessutton@: Benchmark Questions Verification V2.ipynb,443,Write a python function to find the largest negative number from the given list.,"def largest_neg(list1): 
    max = list1[0] 
    for x in list1: 
        if x < max : 
             max = x  
    return max",[],"['assert largest_neg([1,2,3,-4,-6]) == -6', 'assert largest_neg([1,2,3,-8,-9]) == -9', 'assert largest_neg([1,2,3,4,-1]) == -1']"
charlessutton@: Benchmark Questions Verification V2.ipynb,444,Write a function to trim each tuple by k in the given tuple list.,"def trim_tuple(test_list, K):
  res = []
  for ele in test_list:
    N = len(ele)
    res.append(tuple(list(ele)[K: N - K]))
  return (str(res)) ",[],"[""assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'"", ""assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'"", ""assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,445,Write a function to perform index wise multiplication of tuple elements in the given two tuples.,"def index_multiplication(test_tup1, test_tup2):
  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))
   for tup1, tup2 in zip(test_tup1, test_tup2))
  return (res) ",[],"['assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))', 'assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))', 'assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))']"
charlessutton@: Benchmark Questions Verification V2.ipynb,446,Write a python function to count the occurence of all elements of list in a tuple.,"from collections import Counter 
def count_Occurrence(tup, lst): 
    count = 0
    for item in tup: 
        if item in lst: 
            count+= 1 
    return count  ",[],"[""assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3"", 'assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6', 'assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2']"
charlessutton@: Benchmark Questions Verification V2.ipynb,447,Write a function to find cubes of individual elements in a list.,"def cube_nums(nums):
 cube_nums = list(map(lambda x: x ** 3, nums))
 return cube_nums",[],"['assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]', 'assert cube_nums([10,20,30])==([1000, 8000, 27000])', 'assert cube_nums([12,15])==([1728, 3375])']"
charlessutton@: Benchmark Questions Verification V2.ipynb,448,Write a function to calculate the sum of perrin numbers.,"def cal_sum(n): 
	a = 3
	b = 0
	c = 2
	if (n == 0): 
		return 3
	if (n == 1): 
		return 3
	if (n == 2): 
		return 5
	sum = 5
	while (n > 2): 
		d = a + b 
		sum = sum + d 
		a = b 
		b = c 
		c = d 
		n = n-1
	return sum",[],"['assert cal_sum(9) == 49', 'assert cal_sum(10) == 66', 'assert cal_sum(11) == 88']"
charlessutton@: Benchmark Questions Verification V2.ipynb,450,Write a function to extract specified size of strings from a given list of string values.,"def extract_string(str, l):
    result = [e for e in str if len(e) == l] 
    return result",[],"[""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']"", ""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']"", ""assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,451,Write a function to remove all whitespaces from the given string.,"import re
def remove_whitespaces(text1):
  return (re.sub(r'\s+', '',text1))",[],"[""assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'"", ""assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'"", ""assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,452,Write a function that gives loss amount on a sale if the given amount has loss else return 0.,"def loss_amount(actual_cost,sale_amount): 
  if(sale_amount > actual_cost):
    amount = sale_amount - actual_cost
    return amount
  else:
    return 0",[],"['assert loss_amount(1500,1200)==0', 'assert loss_amount(100,200)==100', 'assert loss_amount(2000,5000)==3000']"
charlessutton@: Benchmark Questions Verification V2.ipynb,453,Write a python function to find the sum of even factors of a number.,"import math 
def sumofFactors(n) : 
    if (n % 2 != 0) : 
        return 0
    res = 1
    for i in range(2, (int)(math.sqrt(n)) + 1) :    
        count = 0
        curr_sum = 1
        curr_term = 1
        while (n % i == 0) : 
            count= count + 1
            n = n // i 
            if (i == 2 and count == 1) : 
                curr_sum = 0
            curr_term = curr_term * i 
            curr_sum = curr_sum + curr_term 
        res = res * curr_sum  
    if (n >= 2) : 
        res = res * (1 + n) 
    return res",[],"['assert sumofFactors(18) == 26', 'assert sumofFactors(30) == 48', 'assert sumofFactors(6) == 8']"
charlessutton@: Benchmark Questions Verification V2.ipynb,454,Write a function that matches a word containing 'z'.,"import re
def text_match_wordz(text):
        patterns = '\w*z.\w*'
        if re.search(patterns,  text):
                return True
        else:
                return False",[],"['assert text_match_wordz(""pythonz."")==True', 'assert text_match_wordz(""xyz."")==True', 'assert text_match_wordz(""  lang  ."")==False']"
charlessutton@: Benchmark Questions Verification V2.ipynb,455,Write a function to check whether the given month number contains 31 days or not.,"def check_monthnumb_number(monthnum2):
  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):
    return True
  else:
    return False",[],"['assert check_monthnumb_number(5)==True', 'assert check_monthnumb_number(2)==False', 'assert check_monthnumb_number(6)==False']"
charlessutton@: Benchmark Questions Verification V2.ipynb,456,Write a function to reverse each string in a given list of string values.,"def reverse_string_list(stringlist):
    result = [x[::-1] for x in stringlist]
    return result",[],"[""assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"", ""assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']"", ""assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,457,Write a python function to find the sublist having minimum length.,"def Find_Min(lst): 
    return min(lst, key=len) ",[],"['assert Find_Min([[1],[1,2],[1,2,3]]) == [1]', 'assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]', ""assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,458,Write a function to find the area of a rectangle.,"def rectangle_area(l,b):
  area=l*b
  return area",[],"['assert rectangle_area(10,20)==200', 'assert rectangle_area(10,5)==50', 'assert rectangle_area(4,2)==8']"
charlessutton@: Benchmark Questions Verification V2.ipynb,459,Write a function to remove uppercase substrings from a given string.,"import re
def remove_uppercase(str1):
  return re.sub('[A-Z]', '', str1)",[],"[""assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'"", ""assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'"", ""assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,460,Write a python function to get the first element of each sublist.,"def Extract(lst): 
    return [item[0] for item in lst] ",[],"['assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]', 'assert Extract([[1,2,3],[4, 5]]) == [1,4]', 'assert Extract([[9,8,1],[1,2]]) == [9,1]']"
charlessutton@: Benchmark Questions Verification V2.ipynb,461,Write a python function to count the upper case characters in a given string.,"def upper_ctr(str):
    upper_ctr = 0
    for i in range(len(str)):
          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1
          return upper_ctr",[],"[""assert upper_ctr('PYthon') == 1"", ""assert upper_ctr('BigData') == 1"", ""assert upper_ctr('program') == 0""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,462,Write a function to find all possible combinations of the elements of a given list.,"def combinations_list(list1):
    if len(list1) == 0:
        return [[]]
    result = []
    for el in combinations_list(list1[1:]):
        result += [el, el+[list1[0]]]
    return result",[],"[""assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"", ""assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]"", ""assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,463,Write a function to find the maximum product subarray of the given array.,"def max_subarray_product(arr):
	n = len(arr)
	max_ending_here = 1
	min_ending_here = 1
	max_so_far = 0
	flag = 0
	for i in range(0, n):
		if arr[i] > 0:
			max_ending_here = max_ending_here * arr[i]
			min_ending_here = min (min_ending_here * arr[i], 1)
			flag = 1
		elif arr[i] == 0:
			max_ending_here = 1
			min_ending_here = 1
		else:
			temp = max_ending_here
			max_ending_here = max (min_ending_here * arr[i], 1)
			min_ending_here = temp * arr[i]
		if (max_so_far < max_ending_here):
			max_so_far = max_ending_here
	if flag == 0 and max_so_far == 0:
		return 0
	return max_so_far",[],"['assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112', 'assert max_subarray_product([6, -3, -10, 0, 2]) == 180', 'assert max_subarray_product([-2, -40, 0, -2, -3]) == 80']"
charlessutton@: Benchmark Questions Verification V2.ipynb,464,Write a function to check if all values are same in a dictionary.,"def check_value(dict, n):
    result = all(x == n for x in dict.values()) 
    return result",[],"[""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False"", ""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True"", ""assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,465,Write a function to drop empty items from a given dictionary.,"def drop_empty(dict1):
  dict1 = {key:value for (key, value) in dict1.items() if value is not None}
  return dict1",[],"[""assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}"", ""assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}"", ""assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,468,Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.,"def max_product(arr):   
  n = len(arr)
  mpis = arr[:]
  for i in range(n): 
    current_prod = arr[i]
    j = i + 1
    while j < n:
      if arr[j-1] > arr[j]: 
        break
      current_prod *= arr[j]
      if current_prod > mpis[j]:
        mpis[j] = current_prod 
      j = j + 1
  return max(mpis)",[],"['assert max_product([3, 100, 4, 5, 150, 6]) == 3000', 'assert max_product([4, 42, 55, 68, 80]) == 50265600', 'assert max_product([10, 22, 9, 33, 21, 50, 41, 60]) == 2460']"
charlessutton@: Benchmark Questions Verification V2.ipynb,470,Write a function to find the pairwise addition of the neighboring elements of the given tuple.,"def add_pairwise(test_tup):
  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",[],"['assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)', 'assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)', 'assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)']"
charlessutton@: Benchmark Questions Verification V2.ipynb,471,Write a python function to find the product of the array multiplication modulo n.,"def find_remainder(arr, n): 
    mul = 1
    for i in range(len(arr)):  
        mul = (mul * (arr[i] % n)) % n 
    return mul % n ",[],"['assert find_remainder([ 100, 10, 5, 25, 35, 14 ],11) ==9', 'assert find_remainder([1,1,1],1) == 0', 'assert find_remainder([1,2,1],2) == 0']"
charlessutton@: Benchmark Questions Verification V2.ipynb,472,Write a python function to check whether the given list contains consecutive numbers or not.,"def check_Consecutive(l): 
    return sorted(l) == list(range(min(l),max(l)+1)) ",[],"['assert check_Consecutive([1,2,3,4,5]) == True', 'assert check_Consecutive([1,2,3,5,6]) == False', 'assert check_Consecutive([1,2,1]) == False']"
charlessutton@: Benchmark Questions Verification V2.ipynb,473,Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.,"def tuple_intersection(test_list1, test_list2):
  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])
  return (res)",[],"['assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}', 'assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}', 'assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}']"
charlessutton@: Benchmark Questions Verification V2.ipynb,474,Write a function to replace characters in a string.,"def replace_char(str1,ch,newch):
 str2 = str1.replace(ch, newch)
 return str2",[],"['assert replace_char(""polygon"",\'y\',\'l\')==(""pollgon"")', 'assert replace_char(""character"",\'c\',\'a\')==(""aharaater"")', 'assert replace_char(""python"",\'l\',\'a\')==(""python"")']"
charlessutton@: Benchmark Questions Verification V2.ipynb,475,Write a function to sort a dictionary by value.,"from collections import Counter
def sort_counter(dict1):
 x = Counter(dict1)
 sort_counter=x.most_common()
 return sort_counter",[],"[""assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"", ""assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]"", ""assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]""]"
charlessutton@: Benchmark Questions Verification V2.ipynb,476,Write a python function to find the sum of the largest and smallest value in a given array.,"def big_sum(nums):
      sum= max(nums)+min(nums)
      return sum",[],"['assert big_sum([1,2,3]) == 4', 'assert big_sum([-1,2,3,4]) == 3', 'assert big_sum([2,3,6]) == 8']"
charlessutton@: Benchmark Questions Verification V2.ipynb,477,Write a python function to convert the given string to lower case.,"def is_lower(string):
  return (string.lower())",[],"['assert is_lower(""InValid"") == ""invalid""', 'assert is_lower(""TruE"") == ""true""', 'assert is_lower(""SenTenCE"") == ""sentence""']"
charlessutton@: Benchmark Questions Verification V2.ipynb,478,Write a function to remove lowercase substrings from a given string.,"import re
def remove_lowercase(str1):
 return re.sub('[a-z]', '', str1)",[],"['assert remove_lowercase(""PYTHon"")==(\'PYTH\')', 'assert remove_lowercase(""FInD"")==(\'FID\')', 'assert remove_lowercase(""STRinG"")==(\'STRG\')']"
charlessutton@: Benchmark Questions Verification V2.ipynb,479,Write a python function to find the first digit of a given number.,"def first_Digit(n) :  
    while n >= 10:  
        n = n / 10 
    return int(n) ",[],"['assert first_Digit(123) == 1', 'assert first_Digit(456) == 4', 'assert first_Digit(12) == 1']"
Benchmark Questions Verification V2.ipynb,554,Write a python function which takes a list of integers and only returns the odd ones.,"def Split(list): 
    od_li = [] 
    for i in list: 
        if (i % 2 != 0): 
            od_li.append(i)  
    return od_li",[],"['assert Split([1,2,3,4,5,6]) == [1,3,5]', 'assert Split([10,11,12,13]) == [11,13]', 'assert Split([7,8,9,1]) == [7,9,1]']"
Benchmark Questions Verification V2.ipynb,555,Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.,"def difference(n) :  
    S = (n*(n + 1))//2;  
    res = S*(S-1);  
    return res;  ",[],"['assert difference(3) == 30', 'assert difference(5) == 210', 'assert difference(2) == 6']"
Benchmark Questions Verification V2.ipynb,556,Write a python function to count the number of pairs whose xor value is odd.,"def find_Odd_Pair(A,N) : 
    oddPair = 0
    for i in range(0,N) :  
        for j in range(i+1,N) :  
            if ((A[i] ^ A[j]) % 2 != 0):  
                oddPair+=1  
    return oddPair  ",[],"['assert find_Odd_Pair([5,4,7,2,1],5) == 6', 'assert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12', 'assert find_Odd_Pair([1,2,3],3) == 2']"
Benchmark Questions Verification V2.ipynb,557,Write a function to toggle the case of all characters in a string.,"def toggle_string(string):
 string1 = string.swapcase()
 return string1",[],"['assert toggle_string(""Python"")==(""pYTHON"")', 'assert toggle_string(""Pangram"")==(""pANGRAM"")', 'assert toggle_string(""LIttLE"")==(""liTTle"")']"
Benchmark Questions Verification V2.ipynb,558,Write a python function to find the sum of the per-digit difference between two integers.,"def digit_distance_nums(n1, n2):
         return sum(map(int,str(abs(n1-n2))))",[],"['assert digit_distance_nums(1,2) == 1', 'assert digit_distance_nums(23,56) == 6', 'assert digit_distance_nums(123,256) == 7']"
Benchmark Questions Verification V2.ipynb,559,Write a function to find the sum of the largest contiguous sublist in the given list.,"def max_sub_array_sum(a, size):
  max_so_far = 0
  max_ending_here = 0
  for i in range(0, size):
    max_ending_here = max_ending_here + a[i]
    if max_ending_here < 0:
      max_ending_here = 0
    elif (max_so_far < max_ending_here):
      max_so_far = max_ending_here
  return max_so_far",[],"['assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7', 'assert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8', 'assert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10']"
Benchmark Questions Verification V2.ipynb,560,Write a function to find the union of the elements of two given tuples and output them in sorted order.,"def union_elements(test_tup1, test_tup2):
  res = tuple(set(test_tup1 + test_tup2))
  return (res) ",[],"['assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)', 'assert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)', 'assert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)']"
Benchmark Questions Verification V2.ipynb,562,Write a python function to find the length of the longest sublists.,"def Find_Max_Length(lst):  
    maxLength = max(len(x) for x in lst )
    return maxLength ",[],"['assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4', 'assert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3', 'assert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5']"
Benchmark Questions Verification V2.ipynb,563,Write a function to extract values between quotation marks from a string.,"import re
def extract_values(text):
 return (re.findall(r'""(.*?)""', text))",[],"['assert extract_values(\'""Python"", ""PHP"", ""Java""\')==[\'Python\', \'PHP\', \'Java\']', 'assert extract_values(\'""python"",""program"",""language""\')==[\'python\',\'program\',\'language\']', 'assert extract_values(\'""red"",""blue"",""green"",""yellow""\')==[\'red\',\'blue\',\'green\',\'yellow\']']"
Benchmark Questions Verification V2.ipynb,564,Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.,"def count_Pairs(arr,n): 
    cnt = 0; 
    for i in range(n): 
        for j in range(i + 1,n): 
            if (arr[i] != arr[j]): 
                cnt += 1; 
    return cnt; ",[],"['assert count_Pairs([1,2,1],3) == 2', 'assert count_Pairs([1,1,1,1],4) == 0', 'assert count_Pairs([1,2,3,4,5],5) == 10']"
Benchmark Questions Verification V2.ipynb,565,Write a python function to split a string into characters.,"def split(word): 
    return [char for char in word] ",[],"[""assert split('python') == ['p','y','t','h','o','n']"", ""assert split('Name') == ['N','a','m','e']"", ""assert split('program') == ['p','r','o','g','r','a','m']""]"
Benchmark Questions Verification V2.ipynb,566,Write a function to get the sum of the digits of a non-negative integer.,"def sum_digits(n):
  if n == 0:
    return 0
  else:
    return n % 10 + sum_digits(int(n / 10))",[],"['assert sum_digits(345)==12', 'assert sum_digits(12)==3', 'assert sum_digits(97)==16']"
Benchmark Questions Verification V2.ipynb,567,Write a function to check whether a specified list is sorted or not.,"def issort_list(list1):
    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))
    return result",[],"['assert issort_list([1,2,4,6,8,10,12,14,16,17])==True', 'assert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False', 'assert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False']"
Benchmark Questions Verification V2.ipynb,568,Write a function to create a list of N empty dictionaries.,"def empty_list(length):
 empty_list = [{} for _ in range(length)]
 return empty_list",[],"['assert empty_list(5)==[{},{},{},{},{}]', 'assert empty_list(6)==[{},{},{},{},{},{}]', 'assert empty_list(7)==[{},{},{},{},{},{},{}]']"
Benchmark Questions Verification V2.ipynb,569,Write a function to sort each sublist of strings in a given list of lists.,"def sort_sublists(list1):
    result = list(map(sorted,list1)) 
    return result",[],"[""assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"", ""assert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]"", ""assert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]""]"
Benchmark Questions Verification V2.ipynb,572,Write a python function to remove duplicate numbers from a given number of lists.,"def two_unique_nums(nums):
  return [i for i in nums if nums.count(i)==1]",[],"['assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]', 'assert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]', 'assert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]']"
Benchmark Questions Verification V2.ipynb,573,Write a python function to calculate the product of the unique numbers in a given list.,"def unique_product(list_data):
    temp = list(set(list_data))
    p = 1
    for i in temp:
        p *= i
    return p",[],"['assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000', 'assert unique_product([1, 2, 3, 1,]) == 6', 'assert unique_product([7, 8, 9, 0, 1, 1]) == 0']"
Benchmark Questions Verification V2.ipynb,574,Write a function to find the surface area of a cylinder.,"def surfacearea_cylinder(r,h):
  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))
  return surfacearea",[],"['assert surfacearea_cylinder(10,5)==942.45', 'assert surfacearea_cylinder(4,5)==226.18800000000002', 'assert surfacearea_cylinder(4,10)==351.848']"
Benchmark Questions Verification V2.ipynb,576,Write a python function to check whether a list is sublist of another or not.,"def is_Sub_Array(A,B): 
    n = len(A)
    m = len(B)
    i = 0; j = 0; 
    while (i < n and j < m):  
        if (A[i] == B[j]): 
            i += 1; 
            j += 1; 
            if (j == m): 
                return True;  
        else: 
            i = i - j + 1; 
            j = 0;       
    return False; ",[],"['assert is_Sub_Array([1,4,3,5],[1,2]) == False', 'assert is_Sub_Array([1,2,1],[1,2,1]) == True', 'assert is_Sub_Array([1,0,2,2],[2,2,0]) ==False']"
Benchmark Questions Verification V2.ipynb,577,Write a python function to find the last digit in factorial of a given number.,"def last_Digit_Factorial(n): 
    if (n == 0): return 1
    elif (n <= 2): return n  
    elif (n == 3): return 6
    elif (n == 4): return 4 
    else: 
      return 0",[],"['assert last_Digit_Factorial(4) == 4', 'assert last_Digit_Factorial(21) == 0', 'assert last_Digit_Factorial(30) == 0']"
Benchmark Questions Verification V2.ipynb,578,Write a function to interleave 3 lists of the same length into a single flat list.,"def interleave_lists(list1,list2,list3):
    result = [el for pair in zip(list1, list2, list3) for el in pair]
    return result",[],"['assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]', 'assert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]', 'assert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]']"
Benchmark Questions Verification V2.ipynb,579,Write a function to find the dissimilar elements in the given two tuples.,"def find_dissimilar(test_tup1, test_tup2):
  res = tuple(set(test_tup1) ^ set(test_tup2))
  return (res) ",[],"['assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)', 'assert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)', 'assert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)']"
Benchmark Questions Verification V2.ipynb,580,Write a function to remove uneven elements in the nested mixed tuple.,"def even_ele(test_tuple, even_fnc): 
	res = tuple() 
	for ele in test_tuple: 
		if isinstance(ele, tuple): 
			res += (even_ele(ele, even_fnc), ) 
		elif even_fnc(ele): 
			res += (ele, ) 
	return res 
def extract_even(test_tuple):
  res = even_ele(test_tuple, lambda x: x % 2 == 0)
  return (res) ",[],"['assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)', 'assert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))', 'assert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)']"
Benchmark Questions Verification V2.ipynb,581,Write a python function to find the surface area of a square pyramid with a given base edge and height.,"def surface_Area(b,s): 
    return 2 * b * s + pow(b,2) ",[],"['assert surface_Area(3,4) == 33', 'assert surface_Area(4,5) == 56', 'assert surface_Area(1,2) == 5']"
Benchmark Questions Verification V2.ipynb,582,Write a function to check if a dictionary is empty,"def my_dict(dict1):
  if bool(dict1):
     return False
  else:
     return True",[],"['assert my_dict({10})==False', 'assert my_dict({11})==False', 'assert my_dict({})==True']"
Benchmark Questions Verification V2.ipynb,583,Write a function which returns nth catalan number.,"def catalan_number(num):
    if num <=1:
         return 1   
    res_num = 0
    for i in range(num):
        res_num += catalan_number(i) * catalan_number(num-i-1)
    return res_num",[],"['assert catalan_number(10)==16796', 'assert catalan_number(9)==4862', 'assert catalan_number(7)==429']"
Benchmark Questions Verification V2.ipynb,584,Write a function to find the first adverb ending with ly and its positions in a given string.,"import re
def find_adverbs(text):
  for m in re.finditer(r""\w+ly"", text):
    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))",[],"['assert find_adverbs(""Clearly, he has no excuse for such behavior."") == \'0-7: Clearly\'', 'assert find_adverbs(""Please handle the situation carefuly"") == \'28-36: carefuly\'', 'assert find_adverbs(""Complete the task quickly"") == \'18-25: quickly\'']"
Benchmark Questions Verification V2.ipynb,585,Write a function to find the n most expensive items in a given dataset.,"import heapq
def expensive_items(items,n):
  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])
  return expensive_items",[],"[""assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]"", ""assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]"", ""assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]""]"
Benchmark Questions Verification V2.ipynb,586,Write a python function to split a list at the nth eelment and add the first part to the end.,"def split_Arr(l, n):
  return l[n:] + l[:n]",[],"['assert split_Arr([12,10,5,6,52,36],2) == [5,6,52,36,12,10]', 'assert split_Arr([1,2,3,4],1) == [2,3,4,1]', 'assert split_Arr([0,1,2,3,4,5,6,7],3) == [3,4,5,6,7,0,1,2]']"
Benchmark Questions Verification V2.ipynb,587,Write a function to convert a list to a tuple.,"def list_tuple(listx):
  tuplex = tuple(listx)
  return tuplex",[],"['assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)', 'assert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)', 'assert list_tuple([58,44,56])==(58,44,56)']"
Benchmark Questions Verification V2.ipynb,588,Write a python function to find the difference between largest and smallest value in a given list.,"def big_diff(nums):
     diff= max(nums)-min(nums)
     return diff",[],"['assert big_diff([1,2,3,4]) == 3', 'assert big_diff([4,5,12]) == 8', 'assert big_diff([9,2,3]) == 7']"
Benchmark Questions Verification V2.ipynb,589,Write a function to find perfect squares between two given numbers.,"def perfect_squares(a, b):
    lists=[]
    for i in range (a,b+1):
        j = 1;
        while j*j <= i:
            if j*j == i:
                 lists.append(i)  
            j = j+1
        i = i+1
    return lists",[],"['assert perfect_squares(1,30)==[1, 4, 9, 16, 25]', 'assert perfect_squares(50,100)==[64, 81, 100]', 'assert perfect_squares(100,200)==[100, 121, 144, 169, 196]']"
Benchmark Questions Verification V2.ipynb,590,Write a function to convert polar coordinates to rectangular coordinates.,"import cmath
def polar_rect(x,y):
 cn = complex(x,y)
 cn=cmath.polar(cn)
 cn1 = cmath.rect(2, cmath.pi)
 return (cn,cn1)",[],"['assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))', 'assert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))', 'assert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))']"
Benchmark Questions Verification V2.ipynb,591,Write a python function to interchange the first and last elements in a list.,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp  
    return newList ",[],"['assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]', 'assert swap_List([1, 2, 3]) == [3, 2, 1]', 'assert swap_List([4, 5, 6]) == [6, 5, 4]']"
Benchmark Questions Verification V2.ipynb,592,Write a python function to find the sum of the product of consecutive binomial co-efficients.,"def binomial_Coeff(n,k): 
    C = [0] * (k + 1); 
    C[0] = 1; # nC0 is 1 
    for i in range(1,n + 1):  
        for j in range(min(i, k),0,-1): 
            C[j] = C[j] + C[j - 1]; 
    return C[k]; 
def sum_Of_product(n): 
    return binomial_Coeff(2 * n,n - 1); ",[],"['assert sum_Of_product(3) == 15', 'assert sum_Of_product(4) == 56', 'assert sum_Of_product(1) == 1']"
Benchmark Questions Verification V2.ipynb,593,Write a function to remove leading zeroes from an ip address.,"import re
def removezero_ip(ip):
 string = re.sub('\.[0]*', '.', ip)
 return string
",[],"['assert removezero_ip(""216.08.094.196"")==(\'216.8.94.196\')', 'assert removezero_ip(""12.01.024"")==(\'12.1.24\')', 'assert removezero_ip(""216.08.094.0196"")==(\'216.8.94.196\')']"
Benchmark Questions Verification V2.ipynb,594,Write a function to find the difference of the first even and first odd number of a given list.,"def diff_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even-first_odd)",[],"['assert diff_even_odd([1,3,5,7,4,1,6,8])==3', 'assert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1', 'assert diff_even_odd([1,5,7,9,10])==9']"
Benchmark Questions Verification V2.ipynb,595,Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.,"def min_Swaps(str1,str2) : 
    count = 0
    for i in range(len(str1)) :  
        if str1[i] != str2[i] : 
            count += 1
    if count % 2 == 0 : 
        return (count // 2) 
    else : 
        return (""Not Possible"") ",[],"['assert min_Swaps(""1101"",""1110"") == 1', 'assert min_Swaps(""111"",""000"") == ""Not Possible""', 'assert min_Swaps(""111"",""110"") == ""Not Possible""']"
Benchmark Questions Verification V2.ipynb,596,Write a function to find the size in bytes of the given tuple.,"import sys 
def tuple_size(tuple_list):
  return (sys.getsizeof(tuple_list)) ",[],"['assert tuple_size((""A"", 1, ""B"", 2, ""C"", 3) ) == sys.getsizeof((""A"", 1, ""B"", 2, ""C"", 3))', 'assert tuple_size((1, ""Raju"", 2, ""Nikhil"", 3, ""Deepanshu"") ) == sys.getsizeof((1, ""Raju"", 2, ""Nikhil"", 3, ""Deepanshu""))', 'assert tuple_size(((1, ""Lion""), ( 2, ""Tiger""), (3, ""Fox""), (4, ""Wolf""))  ) == sys.getsizeof(((1, ""Lion""), ( 2, ""Tiger""), (3, ""Fox""), (4, ""Wolf"")))']"
Benchmark Questions Verification V2.ipynb,597,Write a function to find kth element from the given two sorted arrays.,"def find_kth(arr1, arr2, k):
	m = len(arr1)
	n = len(arr2)
	sorted1 = [0] * (m + n)
	i = 0
	j = 0
	d = 0
	while (i < m and j < n):
		if (arr1[i] < arr2[j]):
			sorted1[d] = arr1[i]
			i += 1
		else:
			sorted1[d] = arr2[j]
			j += 1
		d += 1
	while (i < m):
		sorted1[d] = arr1[i]
		d += 1
		i += 1
	while (j < n):
		sorted1[d] = arr2[j]
		d += 1
		j += 1
	return sorted1[k - 1]",[],"['assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5) == 6', 'assert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 7) == 256', 'assert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 6) == 8']"
Benchmark Questions Verification V2.ipynb,598,Write a function to check whether the given number is armstrong or not.,"def armstrong_number(number):
 sum = 0
 times = 0
 temp = number
 while temp > 0:
           times = times + 1
           temp = temp // 10
 temp = number
 while temp > 0:
           reminder = temp % 10
           sum = sum + (reminder ** times)
           temp //= 10
 if number == sum:
           return True
 else:
           return False",[],"['assert armstrong_number(153)==True', 'assert armstrong_number(259)==False', 'assert armstrong_number(4458)==False']"
Benchmark Questions Verification V2.ipynb,599,Write a function to find sum and average of first n natural numbers.,"def sum_average(number):
 total = 0
 for value in range(1, number + 1):
    total = total + value
 average = total / number
 return (total,average)",[],"['assert sum_average(10)==(55, 5.5)', 'assert sum_average(15)==(120, 8.0)', 'assert sum_average(20)==(210, 10.5)']"
Benchmark Questions Verification V2.ipynb,600,Write a python function to check whether the given number is even or not.,"def is_Even(n) : 
    if (n^1 == n+1) :
        return True; 
    else :
        return False; ",[],"['assert is_Even(1) == False', 'assert is_Even(2) == True', 'assert is_Even(3) == False']"
Benchmark Questions Verification V2.ipynb,602,Write a python function to find the first repeated character in a given string.,"def first_repeated_char(str1):
  for index,c in enumerate(str1):
    if str1[:index+1].count(c) > 1:
      return c",[],"['assert first_repeated_char(""abcabc"") == ""a""', 'assert first_repeated_char(""abc"") == None', 'assert first_repeated_char(""123123"") == ""1""']"
Benchmark Questions Verification V2.ipynb,603,Write a function to get all lucid numbers smaller than or equal to a given integer.,"def get_ludic(n):
	ludics = []
	for i in range(1, n + 1):
		ludics.append(i)
	index = 1
	while(index != len(ludics)):
		first_ludic = ludics[index]
		remove_index = index + first_ludic
		while(remove_index < len(ludics)):
			ludics.remove(ludics[remove_index])
			remove_index = remove_index + first_ludic - 1
		index += 1
	return ludics",[],"['assert get_ludic(10) == [1, 2, 3, 5, 7]', 'assert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]', 'assert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]']"
Benchmark Questions Verification V2.ipynb,604,Write a function to reverse words seperated by spaces in a given string.,"def reverse_words(s):
        return ' '.join(reversed(s.split()))",[],"['assert reverse_words(""python program"")==(""program python"")', 'assert reverse_words(""java language"")==(""language java"")', 'assert reverse_words(""indian man"")==(""man indian"")']"
Benchmark Questions Verification V2.ipynb,605,Write a function to check if the given integer is a prime number.,"def prime_num(num):
  if num >=1:
   for i in range(2, num//2):
     if (num % i) == 0:
                return False
     else:
                return True
  else:
          return False",[],"['assert prime_num(13)==True', 'assert prime_num(7)==True', 'assert prime_num(-1010)==False']"
Benchmark Questions Verification V2.ipynb,606,Write a function to convert degrees to radians.,"import math
def radian_degree(degree):
 radian = degree*(math.pi/180)
 return radian",[],"['assert radian_degree(90)==1.5707963267948966', 'assert radian_degree(60)==1.0471975511965976', 'assert radian_degree(120)==2.0943951023931953']"
Benchmark Questions Verification V2.ipynb,607,"Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.","import re

def find_literals(text, pattern):
  match = re.search(pattern, text)
  s = match.start()
  e = match.end()
  return (match.re.pattern, s, e)",[],"[""assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)"", ""assert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)"", ""assert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)""]"
Benchmark Questions Verification V2.ipynb,608,Write a python function to find nth bell number.,"def bell_Number(n): 
    bell = [[0 for i in range(n+1)] for j in range(n+1)] 
    bell[0][0] = 1
    for i in range(1, n+1):
        bell[i][0] = bell[i-1][i-1]
        for j in range(1, i+1): 
            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] 
    return bell[n][0] ",[],"['assert bell_Number(2) == 2', 'assert bell_Number(3) == 5', 'assert bell_Number(4) == 15']"
Benchmark Questions Verification V2.ipynb,610,"Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.","def remove_kth_element(list1, L):
    return  list1[:L-1] + list1[L:]",[],"['assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]', 'assert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]', 'assert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]']"
Benchmark Questions Verification V2.ipynb,611,Write a function which given a matrix represented as a list of lists returns the max of the n'th column.,"def max_of_nth(test_list, N):
  res = max([sub[N] for sub in test_list])
  return (res) ",[],"['assert max_of_nth([[5, 6, 7], [1, 3, 5], [8, 9, 19]], 2) == 19', 'assert max_of_nth([[6, 7, 8], [2, 4, 6], [9, 10, 20]], 1) == 10', 'assert max_of_nth([[7, 8, 9], [3, 5, 7], [10, 11, 21]], 1) == 11']"
Benchmark Questions Verification V2.ipynb,612,"Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.","def merge(lst):  
    return [list(ele) for ele in list(zip(*lst))] ",[],"[""assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]"", 'assert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]', ""assert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]""]"
Benchmark Questions Verification V2.ipynb,614,Write a function to find the cumulative sum of all the values that are present in the given tuple list.,"def cummulative_sum(test_list):
  res = sum(map(sum, test_list))
  return (res)",[],"['assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30', 'assert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37', 'assert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44']"
Benchmark Questions Verification V2.ipynb,615,Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.,"def average_tuple(nums):
    result = [sum(x) / len(x) for x in zip(*nums)]
    return result",[],"['assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]', 'assert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]', 'assert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]']"
Benchmark Questions Verification V2.ipynb,616,Write a function which takes two tuples of the same length and performs the element wise modulo.,"def tuple_modulo(test_tup1, test_tup2):
  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) 
  return (res) ",[],"['assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)', 'assert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)', 'assert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)']"
Benchmark Questions Verification V2.ipynb,617,"Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.","def min_Jumps(steps, d): 
    (a, b) = steps
    temp = a 
    a = min(a, b) 
    b = max(temp, b) 
    if (d >= b): 
        return (d + b - 1) / b 
    if (d == 0): 
        return 0
    if (d == a): 
        return 1
    else:
        return 2",[],"['assert min_Jumps((3,4),11)==3.5', 'assert min_Jumps((3,4),0)==0', 'assert min_Jumps((11,14),11)==1']"
Benchmark Questions Verification V2.ipynb,618,Write a function to divide two lists element wise.,"def div_list(nums1,nums2):
  result = map(lambda x, y: x / y, nums1, nums2)
  return list(result)",[],"['assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]', 'assert div_list([3,2],[1,4])==[3.0, 0.5]', 'assert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]']"
Benchmark Questions Verification V2.ipynb,619,Write a function to move all the numbers to the end of the given string.,"def move_num(test_str):
  res = ''
  dig = ''
  for ele in test_str:
    if ele.isdigit():
      dig += ele
    else:
      res += ele
  res += dig
  return (res) ",[],"[""assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'"", ""assert move_num('Avengers124Assemble') == 'AvengersAssemble124'"", ""assert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'""]"
Benchmark Questions Verification V2.ipynb,620,Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.,"def largest_subset(a):
	n = len(a)
	dp = [0 for i in range(n)]
	dp[n - 1] = 1; 
	for i in range(n - 2, -1, -1):
		mxm = 0;
		for j in range(i + 1, n):
			if a[j] % a[i] == 0 or a[i] % a[j] == 0:
				mxm = max(mxm, dp[j])
		dp[i] = 1 + mxm
	return max(dp)",[],"['assert largest_subset([ 1, 3, 6, 13, 17, 18 ]) == 4', 'assert largest_subset([10, 5, 3, 15, 20]) == 3', 'assert largest_subset([18, 1, 3, 6, 13, 17]) == 4']"
Benchmark Questions Verification V2.ipynb,622,Write a function to find the median of two sorted lists of same size.,"def get_median(arr1, arr2, n):
  i = 0
  j = 0
  m1 = -1
  m2 = -1
  count = 0
  while count < n + 1:
    count += 1
    if i == n:
      m1 = m2
      m2 = arr2[0]
      break
    elif j == n:
      m1 = m2
      m2 = arr1[0]
      break
    if arr1[i] <= arr2[j]:
      m1 = m2
      m2 = arr1[i]
      i += 1
    else:
      m1 = m2
      m2 = arr2[j]
      j += 1
  return (m1 + m2)/2",[],"['assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0', 'assert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5', 'assert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0']"
Benchmark Questions Verification V2.ipynb,623,Write a function to compute the n-th power of each number in a list.,"def nth_nums(nums,n):
 nth_nums = list(map(lambda x: x ** n, nums))
 return nth_nums",[],"['assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]', 'assert nth_nums([10,20,30],3)==([1000, 8000, 27000])', 'assert nth_nums([12,15],5)==([248832, 759375])']"
Benchmark Questions Verification V2.ipynb,624,Write a python function to convert a given string to uppercase.,"def is_upper(string):
  return (string.upper())",[],"['assert is_upper(""person"") ==""PERSON""', 'assert is_upper(""final"") == ""FINAL""', 'assert is_upper(""Valid"") == ""VALID""']"
Benchmark Questions Verification V2.ipynb,625,Write a python function to interchange the first and last element in a given list.,"def swap_List(newList): 
    size = len(newList) 
    temp = newList[0] 
    newList[0] = newList[size - 1] 
    newList[size - 1] = temp   
    return newList ",[],"['assert swap_List([1,2,3]) == [3,2,1]', 'assert swap_List([1,2,3,4,4]) == [4,2,3,4,1]', 'assert swap_List([4,5,6]) == [6,5,4]']"
Benchmark Questions Verification V2.ipynb,626,Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.,"def triangle_area(r) :  
    if r < 0 : 
        return None
    return r * r ",[],"['assert triangle_area(-1) == None', 'assert triangle_area(0) == 0', 'assert triangle_area(2) == 4']"
Benchmark Questions Verification V2.ipynb,627,Write a python function to find the smallest missing number from a sorted list of natural numbers.,"def find_First_Missing(array,start=0,end=None):
    if end is None:
      end = len(array) - 1   
    if (start > end): 
        return end + 1
    if (start != array[start]): 
        return start; 
    mid = int((start + end) / 2) 
    if (array[mid] == mid): 
        return find_First_Missing(array,mid+1,end) 
    return find_First_Missing(array,start,mid) ",[],"['assert find_First_Missing([0,1,2,3]) == 4', 'assert find_First_Missing([0,1,2,6,9]) == 3', 'assert find_First_Missing([2,3,5,8,9]) == 0']"
Benchmark Questions Verification V2.ipynb,628,Write a function to replace all spaces in the given string with '%20'.,"def replace_spaces(string):
  return string.replace("" "", ""%20"")",[],"['assert replace_spaces(""My Name is Dawood"") == \'My%20Name%20is%20Dawood\'', 'assert replace_spaces(""I am a Programmer"") == \'I%20am%20a%20Programmer\'', 'assert replace_spaces(""I love Coding"") == \'I%20love%20Coding\'']"
Benchmark Questions Verification V2.ipynb,629,Write a python function to find even numbers from a list of numbers.,"def Split(list): 
    return [num for num in list if num % 2 == 0]",[],"['assert Split([1,2,3,4,5]) == [2,4]', 'assert Split([4,5,6,7,8,0,1]) == [4,6,8,0]', 'assert Split ([8,12,15,19]) == [8,12]']"
Benchmark Questions Verification V2.ipynb,630,Write a function to extract all the adjacent coordinates of the given coordinate tuple.,"def adjac(ele, sub = []): 
  if not ele: 
     yield sub 
  else: 
     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) 
                for idx in adjac(ele[1:], sub + [j])] 
def get_coordinates(test_tup):
  return list(adjac(test_tup))",[],"['assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]', 'assert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]', 'assert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]']"
Benchmark Questions Verification V2.ipynb,631,Write a function to replace whitespaces with an underscore and vice versa in a given string.,"def replace_spaces(text):
  return """".join("" "" if c == ""_"" else (""_"" if c == "" "" else c) for c in text)",[],"[""assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'"", ""assert replace_spaces('The_Avengers') == 'The Avengers'"", ""assert replace_spaces('Fast and Furious') == 'Fast_and_Furious'""]"
Benchmark Questions Verification V2.ipynb,632,Write a python function to move all zeroes to the end of the given list.,"def move_zero(num_list):
    a = [0 for i in range(num_list.count(0))]
    x = [i for i in num_list if i != 0]
    return x + a",[],"['assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]', 'assert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]', 'assert move_zero([0,1,0,1,1]) == [1,1,1,0,0]']"
Benchmark Questions Verification V2.ipynb,633,Write a python function to find the sum of xor of all pairs of numbers in the given list.,"def pair_xor_Sum(arr,n) : 
    ans = 0 
    for i in range(0,n) :    
        for j in range(i + 1,n) :   
            ans = ans + (arr[i] ^ arr[j])          
    return ans ",[],"['assert pair_xor_Sum([5,9,7,6],4) == 47', 'assert pair_xor_Sum([7,3,5],3) == 12', 'assert pair_xor_Sum([7,3],2) == 4']"
Benchmark Questions Verification V2.ipynb,635,Write a function to sort the given list.,"import heapq as hq
def heap_sort(iterable):
    h = []
    for value in iterable:
        hq.heappush(h, value)
    return [hq.heappop(h) for i in range(len(h))]",[],"['assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]', 'assert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]', 'assert heap_sort( [7, 1, 9, 5])==[1,5,7,9]']"
Benchmark Questions Verification V2.ipynb,637,Write a function to check whether the given amount has no profit and no loss,"def noprofit_noloss(actual_cost,sale_amount): 
  if(sale_amount == actual_cost):
    return True
  else:
    return False",[],"['assert noprofit_noloss(1500,1200)==False', 'assert noprofit_noloss(100,100)==True', 'assert noprofit_noloss(2000,5000)==False']"
Benchmark Questions Verification V2.ipynb,638,Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.,"import math
def wind_chill(v,t):
 windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)
 return int(round(windchill, 0))",[],"['assert wind_chill(120,35)==40', 'assert wind_chill(40,20)==19', 'assert wind_chill(10,8)==6']"
Benchmark Questions Verification V2.ipynb,639,Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.,"def sample_nam(sample_names):
  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))
  return len(''.join(sample_names))",[],"[""assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16"", 'assert sample_nam([""php"", ""res"", ""Python"", ""abcd"", ""Java"", ""aaa""])==10', 'assert sample_nam([""abcd"", ""Python"", ""abba"", ""aba""])==6']"
Benchmark Questions Verification V2.ipynb,640,Write a function to remove the parenthesis and what is inbetween them from a string.,"import re
def remove_parenthesis(items):
 for item in items:
    return (re.sub(r"" ?\([^)]+\)"", """", item))",[],"['assert remove_parenthesis([""python (chrome)""])==(""python"")', 'assert remove_parenthesis([""string(.abc)""])==(""string"")', 'assert remove_parenthesis([""alpha(num)""])==(""alpha"")']"
Benchmark Questions Verification V2.ipynb,641,Write a function to find the nth nonagonal number.,"def is_nonagonal(n): 
	return int(n * (7 * n - 5) / 2) ",[],"['assert is_nonagonal(10) == 325', 'assert is_nonagonal(15) == 750', 'assert is_nonagonal(18) == 1089']"
Benchmark Questions Verification V2.ipynb,643,"Write a function that checks if a strings contains 'z', except at the start and end of the word.","import re
def text_match_wordz_middle(text):
        return bool(re.search(r'\Bz\B',  text))",[],"['assert text_match_wordz_middle(""pythonzabc."")==True', 'assert text_match_wordz_middle(""zxyabc."")==False', 'assert text_match_wordz_middle(""  lang  ."")==False']"
Benchmark Questions Verification V2.ipynb,644,Write a python function to reverse an array upto a given position.,"def reverse_Array_Upto_K(input, k): 
  return (input[k-1::-1] + input[k:]) ",[],"['assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]', 'assert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]', 'assert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]']"
Benchmark Questions Verification V2.ipynb,720,Write a function to add a dictionary to the tuple. The output should be a tuple.,"def add_dict_to_tuple(test_tup, test_dict):
  test_tup = list(test_tup)
  test_tup.append(test_dict)
  test_tup = tuple(test_tup)
  return (test_tup) ",[],"['assert add_dict_to_tuple((4, 5, 6), {""MSAM"" : 1, ""is"" : 2, ""best"" : 3} ) == (4, 5, 6, {\'MSAM\': 1, \'is\': 2, \'best\': 3})', 'assert add_dict_to_tuple((1, 2, 3), {""UTS"" : 2, ""is"" : 3, ""Worst"" : 4} ) == (1, 2, 3, {\'UTS\': 2, \'is\': 3, \'Worst\': 4})', 'assert add_dict_to_tuple((8, 9, 10), {""POS"" : 3, ""is"" : 4, ""Okay"" : 5} ) == (8, 9, 10, {\'POS\': 3, \'is\': 4, \'Okay\': 5})']"
Benchmark Questions Verification V2.ipynb,721,"Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.","def maxAverageOfPath(cost):
  N = len(cost)
  dp = [[0 for i in range(N + 1)] for j in range(N + 1)]
  dp[0][0] = cost[0][0]
  for i in range(1, N):
    dp[i][0] = dp[i - 1][0] + cost[i][0]
  for j in range(1, N):
    dp[0][j] = dp[0][j - 1] + cost[0][j]
  for i in range(1, N):
    for j in range(1, N):
      dp[i][j] = max(dp[i - 1][j],
                     dp[i][j - 1]) + cost[i][j]
  return dp[N - 1][N - 1] / (2 * N - 1)",[],"['assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]]) == 5.2', 'assert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]]) == 6.2', 'assert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]]) == 7.2', 'assert maxAverageOfPath([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 5.8']"
Benchmark Questions Verification V2.ipynb,722,"The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.","def filter_data(students,h,w):
    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}
    return result    ",[],"[""assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}"", ""assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}"", ""assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}""]"
Benchmark Questions Verification V2.ipynb,723,The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.,"from operator import eq
def count_same_pair(nums1, nums2):
    result = sum(map(eq, nums1, nums2))
    return result",[],"['assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4', 'assert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11', 'assert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1', 'assert count_same_pair([0, 1, 1, 2],[0, 1, 2, 2])==3']"
Benchmark Questions Verification V2.ipynb,724,Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.,"def power_base_sum(base, power):
    return sum([int(i) for i in str(pow(base, power))])",[],"['assert power_base_sum(2,100)==115', 'assert power_base_sum(8,10)==37', 'assert power_base_sum(8,15)==62', 'assert power_base_sum(3,3)==9']"
Benchmark Questions Verification V2.ipynb,725,"Write a function to extract values between quotation marks "" "" of the given string.","import re
def extract_quotation(text1):
  return (re.findall(r'""(.*?)""', text1))",[],"['assert extract_quotation(\'Cortex ""A53"" Based ""multi"" tasking ""Processor""\') == [\'A53\', \'multi\', \'Processor\']', 'assert extract_quotation(\'Cast your ""favorite"" entertainment ""apps""\') == [\'favorite\', \'apps\']', 'assert extract_quotation(\'Watch content ""4k Ultra HD"" resolution with ""HDR 10"" Support\') == [\'4k Ultra HD\', \'HDR 10\']', 'assert extract_quotation(""Watch content \'4k Ultra HD\' resolution with \'HDR 10\' Support"") == []']"
Benchmark Questions Verification V2.ipynb,726,"Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.","def multiply_elements(test_tup):
  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))
  return (res) ",[],"['assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)', 'assert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)', 'assert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)', 'assert multiply_elements((12,)) == ()']"
Benchmark Questions Verification V2.ipynb,728,"Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].","def sum_list(lst1,lst2):
  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] 
  return res_list",[],"['assert sum_list([10,20,30],[15,25,35])==[25,45,65]', 'assert sum_list([1,2,3],[5,6,7])==[6,8,10]', 'assert sum_list([15,20,30],[15,45,75])==[30,65,105]']"
Benchmark Questions Verification V2.ipynb,730,Write a function to remove consecutive duplicates of a given list.,"from itertools import groupby
def consecutive_duplicates(nums):
    return [key for key, group in groupby(nums)] ",[],"['assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]', 'assert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]', ""assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']"", ""assert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd', 'a', 'a'])==['a', 'b', 'c', 'd', 'a']""]"
Benchmark Questions Verification V2.ipynb,731,Write a function to find the lateral surface area of a cone given radius r and the height h.,"import math
def lateralsurface_cone(r,h):
  l = math.sqrt(r * r + h * h)
  LSA = math.pi * r  * l
  return LSA",[],"['assert lateralsurface_cone(5,12)==204.20352248333654', 'assert lateralsurface_cone(10,15)==566.3586699569488', 'assert lateralsurface_cone(19,17)==1521.8090132193388']"
Benchmark Questions Verification V2.ipynb,732,"Write a function to replace all occurrences of spaces, commas, or dots with a colon.","import re
def replace_specialchar(text):
 return (re.sub(""[ ,.]"", "":"", text))
",[],"[""assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')"", ""assert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')"", ""assert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')""]"
Benchmark Questions Verification V2.ipynb,733,Write a function to find the index of the first occurrence of a given number in a sorted array.,"def find_first_occurrence(A, x):
    (left, right) = (0, len(A) - 1)
    result = -1
    while left <= right:
        mid = (left + right) // 2
        if x == A[mid]:
            result = mid
            right = mid - 1
        elif x < A[mid]:
            right = mid - 1
        else:
            left = mid + 1
    return result",[],"['assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1', 'assert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2', 'assert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4']"
Benchmark Questions Verification V2.ipynb,734,Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/,"def sum_Of_Subarray_Prod(arr):
    ans = 0
    res = 0
    i = len(arr) - 1
    while (i >= 0):
        incr = arr[i]*(1 + res)
        ans += incr
        res = incr
        i -= 1
    return (ans)",[],"['assert sum_Of_Subarray_Prod([1,2,3]) == 20', 'assert sum_Of_Subarray_Prod([1,2]) == 5', 'assert sum_Of_Subarray_Prod([1,2,3,4]) == 84']"
Benchmark Questions Verification V2.ipynb,735,Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/,"def set_middle_bits(n):  
    n |= n >> 1; 
    n |= n >> 2; 
    n |= n >> 4; 
    n |= n >> 8; 
    n |= n >> 16;  
    return (n >> 1) ^ 1
def toggle_middle_bits(n): 
    if (n == 1): 
        return 1
    return n ^ set_middle_bits(n) ",[],"['assert toggle_middle_bits(9) == 15', 'assert toggle_middle_bits(10) == 12', 'assert toggle_middle_bits(11) == 13', 'assert toggle_middle_bits(0b1000001) == 0b1111111', 'assert toggle_middle_bits(0b1001101) == 0b1110011']"
Benchmark Questions Verification V2.ipynb,736,Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php,"import bisect
def left_insertion(a, x):
    i = bisect.bisect_left(a, x)
    return i",[],"['assert left_insertion([1,2,4,5],6)==4', 'assert left_insertion([1,2,4,5],3)==2', 'assert left_insertion([1,2,4,5],7)==4']"
Benchmark Questions Verification V2.ipynb,737,Write a function to check whether the given string is starting with a vowel or not using regex.,"import re 
regex = '^[aeiouAEIOU][A-Za-z0-9_]*'
def check_str(string): 
	return re.search(regex, string)",[],"['assert check_str(""annie"")', 'assert not check_str(""dawood"")', 'assert check_str(""Else"")']"
Benchmark Questions Verification V2.ipynb,738,Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php,"def geometric_sum(n):
  if n < 0:
    return 0
  else:
    return 1 / (pow(2, n)) + geometric_sum(n - 1)",[],"['assert geometric_sum(7) == 1.9921875', 'assert geometric_sum(4) == 1.9375', 'assert geometric_sum(8) == 1.99609375']"
Benchmark Questions Verification V2.ipynb,739,Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/,"import math 
def find_Index(n): 
    x = math.sqrt(2 * math.pow(10,(n - 1)))
    return round(x)",[],"['assert find_Index(2) == 4', 'assert find_Index(3) == 14', 'assert find_Index(4) == 45']"
Benchmark Questions Verification V2.ipynb,740,Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/,"def tuple_to_dict(test_tup):
  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))
  return (res) ",[],"['assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}', 'assert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}', 'assert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}']"
Benchmark Questions Verification V2.ipynb,741,Write a python function to check whether all the characters are same or not.,"def all_Characters_Same(s) :
    n = len(s)
    for i in range(1,n) :
        if s[i] != s[0] :
            return False
    return True",[],"['assert all_Characters_Same(""python"") == False', 'assert all_Characters_Same(""aaa"") == True', 'assert all_Characters_Same(""data"") == False']"
Benchmark Questions Verification V2.ipynb,742,Write a function to caluclate the area of a tetrahedron.,"import math
def area_tetrahedron(side):
  area = math.sqrt(3)*(side*side)
  return area",[],"['assert area_tetrahedron(3)==15.588457268119894', 'assert area_tetrahedron(20)==692.8203230275509', 'assert area_tetrahedron(10)==173.20508075688772']"
Benchmark Questions Verification V2.ipynb,743,Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/,"def rotate_right(list, m):
  result =  list[-m:] + list[:-m]
  return result",[],"['assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3)==[8, 9, 10, 1, 2, 3, 4, 5, 6, 7]', 'assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]', 'assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]']"
Benchmark Questions Verification V2.ipynb,744,Write a function to check if the given tuple has any none value or not.,"def check_none(test_tup):
  res = any(map(lambda ele: ele is None, test_tup))
  return res ",[],"['assert check_none((10, 4, 5, 6, None)) == True', 'assert check_none((7, 8, 9, 11, 14)) == False', 'assert check_none((1, 2, 3, 4, None)) == True']"
Benchmark Questions Verification V2.ipynb,745,Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php,"def divisible_by_digits(startnum, endnum):
    return [n for n in range(startnum, endnum+1) \
                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]",[],"['assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]', 'assert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]', 'assert divisible_by_digits(20,25)==[22, 24]']"
Benchmark Questions Verification V2.ipynb,746,Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.,"import math
def sector_area(r,a):
    if a > 360:
        return None
    return (math.pi*r**2) * (a/360)",[],"['assert sector_area(4,45)==6.283185307179586', 'assert sector_area(9,45)==31.808625617596654', 'assert sector_area(9,361)==None']"
Benchmark Questions Verification V2.ipynb,747,Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/,"def lcs_of_three(X, Y, Z): 
  m = len(X)
  n = len(Y)
  o = len(Z)
  L = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]
  for i in range(m+1): 
	  for j in range(n+1): 
		  for k in range(o+1): 
			  if (i == 0 or j == 0 or k == 0): 
				  L[i][j][k] = 0
			  elif (X[i-1] == Y[j-1] and X[i-1] == Z[k-1]): 
				  L[i][j][k] = L[i-1][j-1][k-1] + 1
			  else: 
				  L[i][j][k] = max(max(L[i-1][j][k], L[i][j-1][k]), L[i][j][k-1]) 
  return L[m][n][o]",[],"[""assert lcs_of_three('AGGT12', '12TXAYB', '12XBA') == 2"", ""assert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels') == 5"", ""assert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea') == 3""]"
Benchmark Questions Verification V2.ipynb,748,Write a function to put spaces between words starting with capital letters in a given string.,"import re
def capital_words_spaces(str1):
  return re.sub(r""(\w)([A-Z])"", r""\1 \2"", str1)",[],"['assert capital_words_spaces(""Python"") == \'Python\'', 'assert capital_words_spaces(""PythonProgrammingExamples"") == \'Python Programming Examples\'', 'assert capital_words_spaces(""GetReadyToBeCodingFreak"") == \'Get Ready To Be Coding Freak\'']"
Benchmark Questions Verification V2.ipynb,749,Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/,"def sort_numeric_strings(nums_str):
    result = [int(x) for x in nums_str]
    result.sort()
    return result",[],"[""assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]"", ""assert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]"", ""assert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]""]"
Benchmark Questions Verification V2.ipynb,750,Write a function to add the given tuple to the given list.,"def add_tuple(test_list, test_tup):
  test_list += test_tup
  return test_list",[],"['assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]', 'assert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]', 'assert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]']"
Benchmark Questions Verification V2.ipynb,751,Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/,"def check_min_heap_helper(arr, i):
    if 2 * i + 2 > len(arr):
        return True
    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap_helper(arr, 2 * i + 1)
    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] 
                                      and check_min_heap_helper(arr, 2 * i + 2))
    return left_child and right_child

def check_min_heap(arr):
  return check_min_heap_helper(arr, 0)",[],"['assert check_min_heap([1, 2, 3, 4, 5, 6]) == True', 'assert check_min_heap([2, 3, 4, 5, 10, 15]) == True', 'assert check_min_heap([2, 10, 4, 5, 3, 15]) == False']"
Benchmark Questions Verification V2.ipynb,752,"Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...","def jacobsthal_num(n): 
	dp = [0] * (n + 1) 
	dp[0] = 0
	dp[1] = 1
	for i in range(2, n+1): 
		dp[i] = dp[i - 1] + 2 * dp[i - 2] 
	return dp[n]",[],"['assert jacobsthal_num(5) == 11', 'assert jacobsthal_num(2) == 1', 'assert jacobsthal_num(4) == 5', 'assert jacobsthal_num(13) == 2731']"
Benchmark Questions Verification V2.ipynb,753,Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases,"def min_k(test_list, K):
  res = sorted(test_list, key = lambda x: x[1])[:K]
  return (res) ",[],"[""assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]"", ""assert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]"", ""assert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]""]"
Benchmark Questions Verification V2.ipynb,754,"We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.","def extract_index_list(l1, l2, l3):
    result = []
    for m, n, o in zip(l1, l2, l3):
        if (m == n == o):
            result.append(m)
    return result",[],"['assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]', 'assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]', 'assert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]', 'assert extract_index_list([1, 2, 3, 4, 6, 6, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[]']"
Benchmark Questions Verification V2.ipynb,755,Write a function to find the second smallest number in a list.,"def second_smallest(numbers):
  unique_numbers = list(set(numbers))
  unique_numbers.sort()
  if len(unique_numbers) < 2:
    return None
  else:
    return unique_numbers[1]",[],"['assert second_smallest([1, 2, -8, -2, 0, -2])==-2', 'assert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5', 'assert second_smallest([2,2])==None', 'assert second_smallest([2,2,2])==None']"
Benchmark Questions Verification V2.ipynb,756,Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php,"import re
def text_match_zero_one(text):
        patterns = 'ab+?'
        if re.search(patterns,  text):
                return True
        else:
                return False",[],"['assert text_match_zero_one(""ac"")==False', 'assert text_match_zero_one(""dc"")==False', 'assert text_match_zero_one(""abbbba"")==True', 'assert text_match_zero_one(""dsabbbba"")==True', 'assert text_match_zero_one(""asbbbba"")==False', 'assert text_match_zero_one(""abaaa"")==True']"
Benchmark Questions Verification V2.ipynb,757,Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/,"def count_reverse_pairs(test_list):
  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( 
	test_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) 
  return res",[],"['assert count_reverse_pairs([""julia"", ""best"", ""tseb"", ""for"", ""ailuj""])== 2', 'assert count_reverse_pairs([""geeks"", ""best"", ""for"", ""skeeg""]) == 1', 'assert count_reverse_pairs([""makes"", ""best"", ""sekam"", ""for"", ""rof""]) == 2']"
Benchmark Questions Verification V2.ipynb,758,Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.,"def unique_sublists(list1):
    result ={}
    for l in  list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result",[],"['assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}', ""assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}"", 'assert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}', ""assert unique_sublists([['john']])=={('john',): 1}""]"
Benchmark Questions Verification V2.ipynb,759,Write a function to check whether a given string is a decimal number with a precision of 2.,"def is_decimal(num):
    import re
    dnumre = re.compile(r""""""^[0-9]+(\.[0-9]{1,2})?$"""""")
    result = dnumre.search(num)
    return bool(result)",[],"[""assert is_decimal('123.11')==True"", ""assert is_decimal('e666.86')==False"", ""assert is_decimal('3.124587')==False"", ""assert is_decimal('1.11')==True"", ""assert is_decimal('1.1.11')==False""]"
Benchmark Questions Verification V2.ipynb,760,Write a python function to check whether a list of numbers contains only one distinct element or not.,"def unique_Element(arr):
    s = set(arr)
    return len(s) == 1",[],"['assert unique_Element([1,1,1]) == True', 'assert unique_Element([1,2,1,2]) == False', 'assert unique_Element([1,2,3,4,5]) == False']"
Benchmark Questions Verification V2.ipynb,762,Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.,"def check_monthnumber_number(monthnum3):
  return monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11",[],"['assert check_monthnumber_number(6)==True', 'assert check_monthnumber_number(2)==False', 'assert check_monthnumber_number(12)==False']"
Benchmark Questions Verification V2.ipynb,763,Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/,"def find_min_diff(arr,n): 
    arr = sorted(arr) 
    diff = 10**20 
    for i in range(n-1): 
        if arr[i+1] - arr[i] < diff: 
            diff = arr[i+1] - arr[i]  
    return diff ",[],"['assert find_min_diff((1,5,3,19,18,25),6) == 1', 'assert find_min_diff((4,3,2,6),4) == 1', 'assert find_min_diff((30,5,20,9),4) == 4']"
Benchmark Questions Verification V2.ipynb,764,Write a python function to count number of digits in a given string.,"def number_ctr(str):
      number_ctr= 0
      for i in range(len(str)):
          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     
      return  number_ctr",[],"[""assert number_ctr('program2bedone') == 1"", ""assert number_ctr('3wonders') == 1"", ""assert number_ctr('123') == 3"", ""assert number_ctr('3wond-1ers2') == 3""]"
Benchmark Questions Verification V2.ipynb,765,Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/,"import math 
def is_polite(n): 
	n = n + 1
	return (int)(n+(math.log((n + math.log(n, 2)), 2))) ",[],"['assert is_polite(7) == 11', 'assert is_polite(4) == 7', 'assert is_polite(9) == 13']"
Benchmark Questions Verification V2.ipynb,766,Write a function to return a list of all pairs of consecutive items in a given list.,"def pair_wise(l1):
    temp = []
    for i in range(len(l1) - 1):
        current_element, next_element = l1[i], l1[i + 1]
        x = (current_element, next_element)
        temp.append(x)
    return temp",[],"['assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]', 'assert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]', 'assert pair_wise([5,1,9,7,10])==[(5, 1), (1, 9), (9, 7), (7, 10)]', 'assert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]']"
Benchmark Questions Verification V2.ipynb,767,"Write a python function to count the number of pairs whose sum is equal to ‘sum’. The funtion gets as input a list of numbers and the sum,","def get_pairs_count(arr, sum):
    count = 0  
    for i in range(len(arr)):
        for j in range(i + 1,len(arr)):
            if arr[i] + arr[j] == sum:
                count += 1
    return count",[],"['assert get_pairs_count([1,1,1,1],2) == 6', 'assert get_pairs_count([1,5,7,-1,5],6) == 3', 'assert get_pairs_count([1,-2,3],1) == 1', 'assert get_pairs_count([-1,-2,3],-3) == 1']"
Benchmark Questions Verification V2.ipynb,769,Write a python function to get the difference between two lists.,"def Diff(li1,li2):
    return list(set(li1)-set(li2)) + list(set(li2)-set(li1))
 ",[],"['assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]', 'assert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]', 'assert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]']"
Benchmark Questions Verification V2.ipynb,770,Write a python function to find the sum of fourth power of first n odd natural numbers.,"def odd_num_sum(n) : 
    j = 0
    sm = 0
    for i in range(1,n + 1) : 
        j = (2*i-1) 
        sm = sm + (j*j*j*j)   
    return sm ",[],"['assert odd_num_sum(2) == 82', 'assert odd_num_sum(3) == 707', 'assert odd_num_sum(4) == 3108']"
Benchmark Questions Verification V2.ipynb,771,Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/,"from collections import deque
def check_expression(exp):
    if len(exp) & 1:
        return False
    stack = deque()
    for ch in exp:
        if ch == '(' or ch == '{' or ch == '[':
            stack.append(ch)
        if ch == ')' or ch == '}' or ch == ']':
            if not stack:
                return False
            top = stack.pop()
            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):
                return False
    return not stack",[],"['assert check_expression(""{()}[{}]"") == True', 'assert check_expression(""{()}[{]"") == False', 'assert check_expression(""{()}[{}][]({})"") == True']"
Benchmark Questions Verification V2.ipynb,772,Write a function to remove all the words with k length in the given string.,"def remove_length(test_str, K):
  temp = test_str.split()
  res = [ele for ele in temp if len(ele) != K]
  res = ' '.join(res)
  return (res) ",[],"[""assert remove_length('The person is most value tet', 3) == 'person is most value'"", ""assert remove_length('If you told me about this ok', 4) == 'If you me about ok'"", ""assert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'""]"
Benchmark Questions Verification V2.ipynb,773,Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.,"import re
def occurance_substring(text,pattern):
 for match in re.finditer(pattern, text):
    s = match.start()
    e = match.end()
    return (text[s:e], s, e)",[],"[""assert occurance_substring('python programming, python language','python')==('python', 0, 6)"", ""assert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)"", ""assert occurance_substring('python programming,programming language','language')==('language', 31, 39)"", ""assert occurance_substring('c++ programming, c++ language','python')==None""]"
Benchmark Questions Verification V2.ipynb,775,Write a python function to check whether every odd index contains odd numbers of a given list.,"def odd_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))",[],"['assert odd_position([2,1,4,3,6,7,6,3]) == True', 'assert odd_position([4,1,2]) == True', 'assert odd_position([1,2,3]) == False']"
Benchmark Questions Verification V2.ipynb,776,Write a function to count those characters which have vowels as their neighbors in the given string.,"def count_vowels(test_str):
  res = 0
  vow_list = ['a', 'e', 'i', 'o', 'u']
  for idx in range(1, len(test_str) - 1):
    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):
      res += 1
  if test_str[0] not in vow_list and test_str[1] in vow_list:
    res += 1
  if test_str[-1] not in vow_list and test_str[-2] in vow_list:
    res += 1
  return (res) ",[],"[""assert count_vowels('bestinstareels') == 7"", ""assert count_vowels('partofthejourneyistheend') == 12"", ""assert count_vowels('amazonprime') == 5""]"
Benchmark Questions Verification V2.ipynb,777,Write a python function to find the sum of non-repeated elements in a given list.,"def find_sum(arr): 
    arr.sort() 
    sum = arr[0] 
    for i in range(len(arr)-1): 
        if (arr[i] != arr[i+1]): 
            sum = sum + arr[i+1]   
    return sum",[],"['assert find_sum([1,2,3,1,1,4,5,6]) == 21', 'assert find_sum([1,10,9,4,2,10,10,45,4]) == 71', 'assert find_sum([12,10,9,45,2,10,10,45,10]) == 78']"
Benchmark Questions Verification V2.ipynb,778,Write a function to pack consecutive duplicates of a given list elements into sublists.,"from itertools import groupby
def pack_consecutive_duplicates(list1):
    return [list(group) for key, group in groupby(list1)]",[],"['assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]', 'assert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]', ""assert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]""]"
Benchmark Questions Verification V2.ipynb,779,"Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.","def unique_sublists(list1):
    result ={}
    for l in list1: 
        result.setdefault(tuple(l), list()).append(1) 
    for a, b in result.items(): 
        result[a] = sum(b)
    return result",[],"['assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}', ""assert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}"", 'assert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}']"
Benchmark Questions Verification V2.ipynb,780,Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/,"from itertools import combinations 
def find_combinations(test_list):
  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]
  return (res) ",[],"['assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]', 'assert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]', 'assert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]']"
Benchmark Questions Verification V2.ipynb,781,Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php,"import math 
def count_divisors(n) : 
    count = 0
    for i in range(1, (int)(math.sqrt(n)) + 2) : 
        if (n % i == 0) : 
            if( n // i == i) : 
                count = count + 1
            else : 
                count = count + 2
    return count % 2 == 0",[],"['assert count_divisors(10)', 'assert not count_divisors(100)', 'assert count_divisors(125)']"
Benchmark Questions Verification V2.ipynb,782,Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/,"def odd_length_sum(arr):
    Sum = 0
    l = len(arr)
    for i in range(l):
        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])
    return Sum",[],"['assert odd_length_sum([1,2,4]) == 14', 'assert odd_length_sum([1,2,1,2]) == 15', 'assert odd_length_sum([1,7]) == 8']"
Benchmark Questions Verification V2.ipynb,783,Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/,"def rgb_to_hsv(r, g, b):
    r, g, b = r/255.0, g/255.0, b/255.0
    mx = max(r, g, b)
    mn = min(r, g, b)
    df = mx-mn
    if mx == mn:
        h = 0
    elif mx == r:
        h = (60 * ((g-b)/df) + 360) % 360
    elif mx == g:
        h = (60 * ((b-r)/df) + 120) % 360
    elif mx == b:
        h = (60 * ((r-g)/df) + 240) % 360
    if mx == 0:
        s = 0
    else:
        s = (df/mx)*100
    v = mx*100
    return h, s, v",[],"['assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)', 'assert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)', 'assert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)']"
Benchmark Questions Verification V2.ipynb,784,Write a function to find the product of first even and odd number of a given list.,"def mul_even_odd(list1):
    first_even = next((el for el in list1 if el%2==0),-1)
    first_odd = next((el for el in list1 if el%2!=0),-1)
    return (first_even*first_odd)",[],"['assert mul_even_odd([1,3,5,7,4,1,6,8])==4', 'assert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2', 'assert mul_even_odd([1,5,7,9,10])==10']"
Benchmark Questions Verification V2.ipynb,785,Write a function to convert tuple string to integer tuple.,"def tuple_str_int(test_str):
  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))
  return (res) ",[],"['assert tuple_str_int(""(7, 8, 9)"") == (7, 8, 9)', 'assert tuple_str_int(""(1, 2, 3)"") == (1, 2, 3)', 'assert tuple_str_int(""(4, 5, 6)"") == (4, 5, 6)', 'assert tuple_str_int(""(7, 81, 19)"") == (7, 81, 19)']"
Benchmark Questions Verification V2.ipynb,786,Write a function to locate the right insertion point for a specified value in sorted order.,"import bisect
def right_insertion(a, x):
    return bisect.bisect_right(a, x)",[],"['assert right_insertion([1,2,4,5],6)==4', 'assert right_insertion([1,2,4,5],3)==2', 'assert right_insertion([1,2,4,5],7)==4']"
Benchmark Questions Verification V2.ipynb,787,Write a function that matches a string that has an a followed by three 'b'.,"import re
def text_match_three(text):
        patterns = 'ab{3}?'
        return re.search(patterns,  text)",[],"['assert not text_match_three(""ac"")', 'assert not text_match_three(""dc"")', 'assert text_match_three(""abbbba"")', 'assert text_match_three(""caacabbbba"")']"
Benchmark Questions Verification V2.ipynb,788,Write a function to create a new tuple from the given string and list.,"def new_tuple(test_list, test_str):
  return tuple(test_list + [test_str])",[],"['assert new_tuple([""WEB"", ""is""], ""best"") == (\'WEB\', \'is\', \'best\')', 'assert new_tuple([""We"", ""are""], ""Developers"") == (\'We\', \'are\', \'Developers\')', 'assert new_tuple([""Part"", ""is""], ""Wrong"") == (\'Part\', \'is\', \'Wrong\')']"
Benchmark Questions Verification V2.ipynb,790,Write a python function to check whether every even index contains even numbers of a given list.,"def even_position(nums):
	return all(nums[i]%2==i%2 for i in range(len(nums)))",[],"['assert even_position([3,2,1]) == False', 'assert even_position([1,2,3]) == False', 'assert even_position([2,1,4]) == True']"
Benchmark Questions Verification V2.ipynb,791,Write a function to remove tuples from the given tuple.,"def remove_nested(test_tup):
  res = tuple()
  for count, ele in enumerate(test_tup):
    if not isinstance(ele, tuple):
      res = res + (ele, )
  return (res) ",[],"['assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)', 'assert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)', 'assert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)', 'assert remove_nested((3, 7, 9, (6, 8), (5,12), 12)) == (3, 7, 9, 12)']"
Benchmark Questions Verification V2.ipynb,792,Write a python function to count the number of lists in a given number of lists.,"def count_list(input_list): 
    return len(input_list)",[],"['assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4', 'assert count_list([[1,2],[2,3],[4,5]]) == 3', 'assert count_list([[1,0],[2,0]]) == 2']"
Benchmark Questions Verification V2.ipynb,793,Write a python function to find the last position of an element in a sorted array.,"def last(arr,x):
    n = len(arr)
    low = 0
    high = n - 1
    res = -1  
    while (low <= high):
        mid = (low + high) // 2 
        if arr[mid] > x:
            high = mid - 1
        elif arr[mid] < x:
            low = mid + 1
        else:
            res = mid
            low = mid + 1
    return res",[],"['assert last([1,2,3],1) == 0', 'assert last([1,1,1,2,3,4],1) == 2', 'assert last([2,3,2,3,6,8,9],3) == 3']"
Benchmark Questions Verification V2.ipynb,794,"Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.","import re
def text_starta_endb(text):
        patterns = 'a.*?b$'
        return re.search(patterns,  text)",[],"['assert text_starta_endb(""aabbbb"")', 'assert not text_starta_endb(""aabAbbbc"")', 'assert not text_starta_endb(""accddbbjjj"")']"
Benchmark Questions Verification V2.ipynb,796,Write function to find the sum of all items in the given dictionary.,"def return_sum(dict):
  sum = 0
  for i in dict.values():
    sum = sum + i
  return sum",[],"[""assert return_sum({'a': 100, 'b':200, 'c':300}) == 600"", ""assert return_sum({'a': 25, 'b':18, 'c':45}) == 88"", ""assert return_sum({'a': 36, 'b':39, 'c':49}) == 124""]"
Benchmark Questions Verification V2.ipynb,797,Write a python function to find the sum of all odd natural numbers within the range l and r.,"def sum_odd(n): 
    terms = (n + 1)//2
    sum1 = terms * terms 
    return sum1  
def sum_in_range(l,r): 
    return sum_odd(r) - sum_odd(l - 1)",[],"['assert sum_in_range(2,5) == 8', 'assert sum_in_range(5,7) == 12', 'assert sum_in_range(7,13) == 40']"
Benchmark Questions Verification V2.ipynb,798,Write a python function to find the sum of an array.,"def _sum(arr):  
    sum=0
    for i in arr: 
        sum = sum + i      
    return(sum)  ",[],"['assert _sum([1, 2, 3]) == 6', 'assert _sum([15, 12, 13, 10]) == 50', 'assert _sum([0, 1, 2]) == 3']"
Benchmark Questions Verification V2.ipynb,799,Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.,"def left_rotate(n,d):   
    INT_BITS = 32
    return (n << d)|(n >> (INT_BITS - d))  ",[],"['assert left_rotate(16,2) == 64', 'assert left_rotate(10,2) == 40', 'assert left_rotate(99,3) == 792', 'assert left_rotate(99,3) == 792', 'assert left_rotate(0b0001,3) == 0b1000', 'assert left_rotate(0b0101,3) == 0b101000', 'assert left_rotate(0b11101,3) == 0b11101000']"
Benchmark Questions Verification V2.ipynb,800,Write a function to remove all whitespaces from a string.,"import re
def remove_all_spaces(text):
 return (re.sub(r'\s+', '',text))",[],"[""assert remove_all_spaces('python  program')==('pythonprogram')"", ""assert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')"", ""assert remove_all_spaces('python                     program')==('pythonprogram')"", ""assert remove_all_spaces('   python                     program')=='pythonprogram'""]"
Benchmark Questions Verification V2.ipynb,801,Write a python function to count the number of equal numbers from three given integers.,"def test_three_equal(x,y,z):
  result = set([x,y,z])
  if len(result)==3:
    return 0
  else:
    return 4-len(result)",[],"['assert test_three_equal(1,1,1) == 3', 'assert test_three_equal(-1,-2,-3) == 0', 'assert test_three_equal(1,2,2) == 2']"
Benchmark Questions Verification V2.ipynb,802,Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/,"def count_rotation(arr):   
    for i in range (1,len(arr)): 
        if (arr[i] < arr[i - 1]): 
            return i  
    return 0",[],"['assert count_rotation([3,2,1]) == 1', 'assert count_rotation([4,5,1,2,3]) == 2', 'assert count_rotation([7,8,9,1,2,3]) == 3', 'assert count_rotation([1,2,3]) == 0', 'assert count_rotation([1,3,2]) == 2']"
Benchmark Questions Verification V2.ipynb,803,Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/,"def is_perfect_square(n) :
    i = 1
    while (i * i<= n):
        if ((n % i == 0) and (n / i == i)):
            return True     
        i = i + 1
    return False",[],"['assert not is_perfect_square(10)', 'assert is_perfect_square(36)', 'assert not is_perfect_square(14)', 'assert is_perfect_square(14*14)', 'assert not is_perfect_square(125)', 'assert is_perfect_square(125*125)']"
Benchmark Questions Verification V2.ipynb,804,Write a function to check whether the product of numbers in a list is even or not.,"def is_product_even(arr): 
    for i in range(len(arr)): 
        if (arr[i] & 1) == 0: 
            return True
    return False",[],"['assert is_product_even([1,2,3])', 'assert is_product_even([1,2,1,4])', 'assert not is_product_even([1,1])']"
Benchmark Questions Verification V2.ipynb,805,Write a function that returns the list in a list of lists whose sum of elements is the highest.,"def max_sum_list(lists):
 return max(lists, key=sum)",[],"['assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12]', 'assert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10]', 'assert max_sum_list([[2,3,1]])==[2,3,1]']"
Benchmark Questions Verification V2.ipynb,806,Write a function to find maximum run of uppercase characters in the given string.,"def max_run_uppercase(test_str):
  cnt = 0
  res = 0
  for idx in range(0, len(test_str)):
    if test_str[idx].isupper():
      cnt += 1
    else:
      res = cnt
      cnt = 0
  if test_str[len(test_str) - 1].isupper():
    res = cnt
  return (res)",[],"[""assert max_run_uppercase('GeMKSForGERksISBESt') == 5"", ""assert max_run_uppercase('PrECIOusMOVemENTSYT') == 6"", ""assert max_run_uppercase('GooGLEFluTTER') == 4""]"
Benchmark Questions Verification V2.ipynb,807,Write a python function to find the first odd number in a given list of numbers.,"def first_odd(nums):
  first_odd = next((el for el in nums if el%2!=0),-1)
  return first_odd",[],"['assert first_odd([1,3,5]) == 1', 'assert first_odd([2,4,1,3]) == 1', 'assert first_odd ([8,9,1]) == 9']"
Benchmark Questions Verification V2.ipynb,808,Write a function to check if the given tuples contain the k or not.,"def check_K(test_tup, K):
  res = False
  for ele in test_tup:
    if ele == K:
      res = True
      break
  return res ",[],"['assert check_K((10, 4, 5, 6, 8), 6) == True', 'assert check_K((1, 2, 3, 4, 5, 6), 7) == False', 'assert check_K((7, 8, 9, 44, 11, 12), 11) == True']"
Benchmark Questions Verification V2.ipynb,809,Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.,"def check_smaller(test_tup1, test_tup2):
  return all(x > y for x, y in zip(test_tup1, test_tup2))",[],"['assert check_smaller((1, 2, 3), (2, 3, 4)) == False', 'assert check_smaller((4, 5, 6), (3, 4, 5)) == True', 'assert check_smaller((11, 12, 13), (10, 11, 12)) == True']"
