{"422": {"title": "Valid Word Square", "difficulty": "Easy", "question": "Given an array of strings `words`, return `true` _if it forms a valid **word square**_.\n\nA sequence of strings forms a valid **word square** if the `kth` row and column read the same string, where `0 <= k < max(numRows, numColumns)`.\n\n**Example 1:**\n\n**Input:** words = \\[ \"abcd \", \"bnrt \", \"crmy \", \"dtye \"\\]\n**Output:** true\n**Explanation:**\nThe 1st row and 1st column both read  \"abcd \".\nThe 2nd row and 2nd column both read  \"bnrt \".\nThe 3rd row and 3rd column both read  \"crmy \".\nThe 4th row and 4th column both read  \"dtye \".\nTherefore, it is a valid word square.\n\n**Example 2:**\n\n**Input:** words = \\[ \"abcd \", \"bnrt \", \"crm \", \"dt \"\\]\n**Output:** true\n**Explanation:**\nThe 1st row and 1st column both read  \"abcd \".\nThe 2nd row and 2nd column both read  \"bnrt \".\nThe 3rd row and 3rd column both read  \"crm \".\nThe 4th row and 4th column both read  \"dt \".\nTherefore, it is a valid word square.\n\n**Example 3:**\n\n**Input:** words = \\[ \"ball \", \"area \", \"read \", \"lady \"\\]\n**Output:** false\n**Explanation:**\nThe 3rd row reads  \"read \" while the 3rd column reads  \"lead \".\nTherefore, it is NOT a valid word square.\n\n**Constraints:**\n\n*   `1 <= words.length <= 500`\n*   `1 <= words[i].length <= 500`\n*   `words[i]` consists of only lowercase English letters.", "answer": "```python\ndef valid_word_square(words):\n    for i in range(len(words)):\n        for j in range(len(words[i])):\n            if j >= len(words) or i >= len(words[j]) or words[i][j] != words[j][i]:\n                return False\n    return True\n```\n\n"}, "566": {"title": "Reshape the Matrix", "difficulty": "Easy", "question": "In MATLAB, there is a handy function called `reshape` which can reshape an `m x n` matrix into a new one with a different size `r x c` keeping its original data.\n\nYou are given an `m x n` matrix `mat` and two integers `r` and `c` representing the number of rows and the number of columns of the wanted reshaped matrix.\n\nThe reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.\n\nIf the `reshape` operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.\n\n**Example 1:**\n\n**Input:** mat = \\[\\[1,2\\],\\[3,4\\]\\], r = 1, c = 4\n**Output:** \\[\\[1,2,3,4\\]\\]\n\n**Example 2:**\n\n**Input:** mat = \\[\\[1,2\\],\\[3,4\\]\\], r = 2, c = 4\n**Output:** \\[\\[1,2\\],\\[3,4\\]\\]\n\n**Constraints:**\n\n*   `m == mat.length`\n*   `n == mat[i].length`\n*   `1 <= m, n <= 100`\n*   `-1000 <= mat[i][j] <= 1000`\n*   `1 <= r, c <= 300`", "answer": "```python\ndef matrixReshape(mat, r, c):\n    m, n = len(mat), len(mat[0])\n    if m * n != r * c:\n        return mat\n\n    reshaped = [[0] * c for _ in range(r)]\n    for i in range(m * n):\n        reshaped[i // c][i % c] = mat[i // n][i % n]\n\n    return reshaped\n```\n"}, "661": {"title": "Image Smoother", "difficulty": "Easy", "question": "An **image smoother** is a filter of the size `3 x 3` that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).\n\nGiven an `m x n` integer matrix `img` representing the grayscale of an image, return _the image after applying the smoother on each cell of it_.\n\n**Example 1:**\n\n**Input:** img = \\[\\[1,1,1\\],\\[1,0,1\\],\\[1,1,1\\]\\]\n**Output:** \\[\\[0,0,0\\],\\[0,0,0\\],\\[0,0,0\\]\\]\n**Explanation:**\nFor the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0\nFor the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0\nFor the point (1,1): floor(8/9) = floor(0.88888889) = 0\n\n**Example 2:**\n\n**Input:** img = \\[\\[100,200,100\\],\\[200,50,200\\],\\[100,200,100\\]\\]\n**Output:** \\[\\[137,141,137\\],\\[141,138,141\\],\\[137,141,137\\]\\]\n**Explanation:**\nFor the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137\nFor the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141\nFor the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138\n\n**Constraints:**\n\n*   `m == img.length`\n*   `n == img[i].length`\n*   `1 <= m, n <= 200`\n*   `0 <= img[i][j] <= 255`", "answer": "```python\ndef imageSmoother(img):\n    m, n = len(img), len(img[0])\n    result = [[0] * n for _ in range(m)]\n\n    for i in range(m):\n        for j in range(n):\n            count, total = 0, 0\n            for x in range(i - 1, i + 2):\n                for y in range(j - 1, j + 2):\n                    if 0 <= x < m and 0 <= y < n:\n                        total += img[x][y]\n                        count += 1\n            result[i][j] = total // count\n\n    return result\n```\n"}, "821": {"title": "Shortest Distance to a Character", "difficulty": "Easy", "question": "Given a string `s` and a character `c` that occurs in `s`, return _an array of integers_ `answer` _where_ `answer.length == s.length` _and_ `answer[i]` _is the **distance** from index_ `i` _to the **closest** occurrence of character_ `c` _in_ `s`.\n\nThe **distance** between two indices `i` and `j` is `abs(i - j)`, where `abs` is the absolute value function.\n\n**Example 1:**\n\n**Input:** s =  \"loveleetcode \", c =  \"e \"\n**Output:** \\[3,2,1,0,1,0,0,1,2,2,1,0\\]\n**Explanation:** The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).\nThe closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.\nThe closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.\nFor index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.\nThe closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.\n\n**Example 2:**\n\n**Input:** s =  \"aaab \", c =  \"b \"\n**Output:** \\[3,2,1,0\\]\n\n**Constraints:**\n\n*   `1 <= s.length <= 104`\n*   `s[i]` and `c` are lowercase English letters.\n*   It is guaranteed that `c` occurs at least once in `s`.", "answer": "```python\nfrom typing import List\n\ndef hitBricks(grid: List[List[int]], hits: List[List[int]]) -> List[int]:\n    def dfs(x, y):\n        if not (0 <= x < m) or not (0 <= y < n) or grid[x][y] <= 0:\n            return 0\n        grid[x][y] = -1\n        return 1 + sum(dfs(x + dx, y + dy) for dx, dy in directions)\n\n    m, n = len(grid), len(grid[0])\n    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]\n\n    for x, y in hits:\n        grid[x][y] -= 1\n\n    for j in range(n):\n        if grid[0][j] == 1:\n            dfs(0, j)\n\n    result = []\n    for x, y in hits:\n        grid[x][y] += 1\n        if grid[x][y] != 1:\n            result.append(0)\n            continue\n        for dx, dy in directions:\n            if dfs(x + dx, y + dy) != 0:\n                result.append(dfs(x, y) - 1)\n                break\n        else:\n            result.append(0)\n\n    return result\n```\n"}, "1022": {"title": "Sum of Root To Leaf Binary Numbers", "difficulty": "Easy", "question": "You are given the `root` of a binary tree where each node has a value `0` or `1`. Each root-to-leaf path represents a binary number starting with the most significant bit.\n\n*   For example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent `01101` in binary, which is `13`.\n\nFor all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return _the sum of these numbers_.\n\nThe test cases are generated so that the answer fits in a **32-bits** integer.\n\n**Example 1:**\n\n**Input:** root = \\[1,0,1,0,1,0,1\\]\n**Output:** 22\n**Explanation:** (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22\n\n**Example 2:**\n\n**Input:** root = \\[0\\]\n**Output:** 0\n\n**Constraints:**\n\n*   The number of nodes in the tree is in the range `[1, 1000]`.\n*   `Node.val` is `0` or `1`.", "answer": "```python\ndef uniquePathsIII(grid):\n    x, y, empty = 0, 0, 1\n    for i in range(len(grid)):\n        for j in range(len(grid[0])):\n            if grid[i][j] == 1:\n                x, y = i, j\n            elif grid[i][j] == 0:\n                empty += 1\n    return dfs(grid, x, y, empty)\n\ndef dfs(grid, x, y, empty):\n    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == -1:\n        return 0\n    if grid[x][y] == 2:\n        return 1 if empty == -1 else 0\n    grid[x][y] = -1\n    paths = dfs(grid, x + 1, y, empty - 1) + dfs(grid, x - 1, y, empty - 1) + dfs(grid, x, y + 1, empty - 1) + dfs(grid, x, y - 1, empty - 1)\n    grid[x][y] = 0\n    return paths\n```\n"}, "1331": {"title": "Rank Transform of an Array", "difficulty": "Easy", "question": "Given an array of integers `arr`, replace each element with its rank.\n\nThe rank represents how large the element is. The rank has the following rules:\n\n*   Rank is an integer starting from 1.\n*   The larger the element, the larger the rank. If two elements are equal, their rank must be the same.\n*   Rank should be as small as possible.\n\n**Example 1:**\n\n**Input:** arr = \\[40,10,20,30\\]\n**Output:** \\[4,1,2,3\\]\n**Explanation**: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.\n\n**Example 2:**\n\n**Input:** arr = \\[100,100,100\\]\n**Output:** \\[1,1,1\\]\n**Explanation**: Same elements share the same rank.\n\n**Example 3:**\n\n**Input:** arr = \\[37,12,28,9,100,56,80,5,12\\]\n**Output:** \\[5,3,4,2,8,6,7,1,3\\]\n\n**Constraints:**\n\n*   `0 <= arr.length <= 105`\n*   `-109 <= arr[i] <= 109`\n\n\\- Every time you are in a cell you will collect all the gold in that cell. - From your position, you can walk one step to the left, right, up, or down. - You can't visit the same cell more than once. - Never visit a cell with 0 gold. - You can start and stop collecting gold from any position in the grid that has some gold.", "answer": "```python\ndef getMaximumGold(grid):\n    m, n, max_gold = len(grid), len(grid[0]), 0\n\n    def getMaximumGoldHelper(x, y):\n        if not (0 <= x < m) or not (0 <= y < n) or grid[x][y] == 0:\n            return 0\n\n        original_gold = grid[x][y]\n        grid[x][y] = 0\n\n        max_gold = 0\n        max_gold = max(max_gold, getMaximumGoldHelper(x + 1, y))\n        max_gold = max(max_gold, getMaximumGoldHelper(x - 1, y))\n        max_gold = max(max_gold, getMaximumGoldHelper(x, y + 1))\n        max_gold = max(max_gold, getMaximumGoldHelper(x, y - 1))\n\n        grid[x][y] = original_gold\n        return max_gold + original_gold\n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] != 0:\n                max_gold = max(max_gold, getMaximumGoldHelper(i, j))\n\n    return max_gold\n```\n\n"}, "1342": {"title": "Number of Steps to Reduce a Number to Zero", "difficulty": "Easy", "question": "Given an integer `num`, return _the number of steps to reduce it to zero_.\n\nIn one step, if the current number is even, you have to divide it by `2`, otherwise, you have to subtract `1` from it.\n\n**Example 1:**\n\n**Input:** num = 14\n**Output:** 6\n**Explanation:** \nStep 1) 14 is even; divide by 2 and obtain 7. \nStep 2) 7 is odd; subtract 1 and obtain 6.\nStep 3) 6 is even; divide by 2 and obtain 3. \nStep 4) 3 is odd; subtract 1 and obtain 2. \nStep 5) 2 is even; divide by 2 and obtain 1. \nStep 6) 1 is odd; subtract 1 and obtain 0.\n\n**Example 2:**\n\n**Input:** num = 8\n**Output:** 4\n**Explanation:** \nStep 1) 8 is even; divide by 2 and obtain 4. \nStep 2) 4 is even; divide by 2 and obtain 2. \nStep 3) 2 is even; divide by 2 and obtain 1. \nStep 4) 1 is odd; subtract 1 and obtain 0.\n\n**Example 3:**\n\n**Input:** num = 123\n**Output:** 12\n\n**Constraints:**\n\n*   `0 <= num <= 106`", "answer": "```python\ndef queensAttacktheKing(queens, king):\n    result = []\n    for x in range(-1, 2):\n        for y in range(-1, 2):\n            if x == 0 and y == 0:\n                continue\n            posX, posY = king[0] + x, king[1] + y\n            while 0 <= posX < 8 and 0 <= posY < 8:\n                for queen in queens:\n                    if posX == queen[0] and posY == queen[1]:\n                        result.append([queen[0], queen[1]])\n                        break\n                posX += x\n                posY += y\n    return result\n```\n"}, "1374": {"title": "Generate a String With Characters That Have Odd Counts", "difficulty": "Easy", "question": "Given an integer `n`, _return a string with `n` characters such that each character in such string occurs **an odd number of times**_.\n\nThe returned string must contain only lowercase English letters. If there are multiples valid strings, return **any** of them.\n\n**Example 1:**\n\n**Input:** n = 4\n**Output:**  \"pppz \"\n**Explanation:**  \"pppz \" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as  \"ohhh \" and  \"love \".\n\n**Example 2:**\n\n**Input:** n = 2\n**Output:**  \"xy \"\n**Explanation:**  \"xy \" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as  \"ag \" and  \"ur \".\n\n**Example 3:**\n\n**Input:** n = 7\n**Output:**  \"holasss \"\n\n**Constraints:**\n\n*   `1 <= n <= 500`", "answer": "```python\ndef generateTheString(n: int) -> str:\n    result = 'a' * n\n    if n % 2 == 0:\n        result = result[:-1] + 'b'\n    return result\n```\n"}, "1379": {"title": "Find a Corresponding Node of a Binary Tree in a Clone of That Tree", "difficulty": "Easy", "question": "Given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree.\n\nThe `cloned` tree is a **copy of** the `original` tree.\n\nReturn _a reference to the same node_ in the `cloned` tree.\n\n**Note** that you are **not allowed** to change any of the two trees or the `target` node and the answer **must be** a reference to a node in the `cloned` tree.\n\n**Example 1:**\n\n**Input:** tree = \\[7,4,3,null,null,6,19\\], target = 3\n**Output:** 3\n**Explanation:** In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.\n\n**Example 2:**\n\n**Input:** tree = \\[7\\], target =  7\n**Output:** 7\n\n**Example 3:**\n\n**Input:** tree = \\[8,null,6,null,5,null,4,null,3,null,2,null,1\\], target = 4\n**Output:** 4\n\n**Constraints:**\n\n*   The number of nodes in the `tree` is in the range `[1, 104]`.\n*   The values of the nodes of the `tree` are unique.\n*   `target` node is a node from the `original` tree and is not `null`.\n\n**Follow up:** Could you solve the problem if repeated values on the tree are allowed?", "answer": "```python\ndef reconstructMatrix(upper, lower, colsum):\n    result = [[0] * len(colsum) for _ in range(2)]\n    \n    for i in range(len(colsum)):\n        if colsum[i] == 2:\n            result[0][i] = 1\n            result[1][i] = 1\n            upper -= 1\n            lower -= 1\n        elif colsum[i] == 1:\n            if upper > lower:\n                result[0][i] = 1\n                upper -= 1\n            else:\n                result[1][i] = 1\n                lower -= 1\n        \n        if upper < 0 or lower < 0:\n            return []\n    \n    if upper > 0 or lower > 0:\n        return []\n    \n    return result\n```\n"}, "1413": {"title": "Minimum Value to Get Positive Step by Step Sum", "difficulty": "Easy", "question": "Given an array of integers `nums`, you start with an initial **positive** value _startValue__._\n\nIn each iteration, you calculate the step by step sum of _startValue_ plus elements in `nums` (from left to right).\n\nReturn the minimum **positive** value of _startValue_ such that the step by step sum is never less than 1.\n\n**Example 1:**\n\n**Input:** nums = \\[-3,2,-3,4,2\\]\n**Output:** 5\n**Explanation:** If you choose startValue = 4, in the third iteration your step by step sum is less than 1.\n**step by step sum**\n**startValue = 4 | startValue = 5 | nums**\n  (4 **\\-3** ) = 1  | (5 **\\-3** ) = 2    |  -3\n  (1 **+2** ) = 3  | (2 **+2** ) = 4    |   2\n  (3 **\\-3** ) = 0  | (4 **\\-3** ) = 1    |  -3\n  (0 **+4** ) = 4  | (1 **+4** ) = 5    |   4\n  (4 **+2** ) = 6  | (5 **+2** ) = 7    |   2\n\n**Example 2:**\n\n**Input:** nums = \\[1,2\\]\n**Output:** 1\n**Explanation:** Minimum start value should be positive. \n\n**Example 3:**\n\n**Input:** nums = \\[1,-2,-3\\]\n**Output:** 5\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `-100 <= nums[i] <= 100`", "answer": "```python\ndef maxSideLength(mat, threshold):\n    m, n = len(mat), len(mat[0])\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    ans = 0\n\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            dp[i][j] = mat[i - 1][j - 1] + dp[i][j - 1] + dp[i - 1][j] - dp[i - 1][j - 1]\n            k = ans + 1\n            if i >= k and j >= k and dp[i][j] - dp[i][j - k] - dp[i - k][j] + dp[i - k][j - k] <= threshold:\n                ans += 1\n\n    return ans\n```\n"}, "1496": {"title": "Path Crossing", "difficulty": "Easy", "question": "Given a string `path`, where `path[i] = 'N'`, `'S'`, `'E'` or `'W'`, each representing moving one unit north, south, east, or west, respectively. You start at the origin `(0, 0)` on a 2D plane and walk on the path specified by `path`.\n\nReturn `true` _if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited_. Return `false` otherwise.\n\n**Example 1:**\n\n**Input:** path =  \"NES \"\n**Output:** false \n**Explanation:** Notice that the path doesn't cross any point more than once.\n\n**Example 2:**\n\n**Input:** path =  \"NESWW \"\n**Output:** true\n**Explanation:** Notice that the path visits the origin twice.\n\n**Constraints:**\n\n*   `1 <= path.length <= 104`\n*   `path[i]` is either `'N'`, `'S'`, `'E'`, or `'W'`.", "answer": "```python\ndef lucky_numbers(matrix):\n    m, n = len(matrix), len(matrix[0])\n    lucky_numbers = []\n\n    for i in range(m):\n        min_row = min(matrix[i])\n        min_row_idx = matrix[i].index(min_row)\n        is_lucky = all(matrix[k][min_row_idx] <= min_row for k in range(m))\n\n        if is_lucky:\n            lucky_numbers.append(min_row)\n\n    return lucky_numbers\n```\n"}, "1550": {"title": "Three Consecutive Odds", "difficulty": "Easy", "question": "Given an integer array `arr`, return `true` if there are three consecutive odd numbers in the array. Otherwise, return `false`.\n\n**Example 1:**\n\n**Input:** arr = \\[2,6,4,1\\]\n**Output:** false\n**Explanation:** There are no three consecutive odds.\n\n**Example 2:**\n\n**Input:** arr = \\[1,2,34,3,4,5,7,23,12\\]\n**Output:** true\n**Explanation:** \\[5,7,23\\] are three consecutive odds.\n\n**Constraints:**\n\n*   `1 <= arr.length <= 1000`\n*   `1 <= arr[i] <= 1000`", "answer": "```python\nimport heapq\n\ndef kthSmallest(mat, k):\n    m, n = len(mat), len(mat[0])\n    \n    minHeap = [(mat[0][0], 0, 0)]\n    visited = [[False for _ in range(n)] for _ in range(m)]\n    visited[0][0] = True\n    \n    for _ in range(k):\n        res, i, j = heapq.heappop(minHeap)\n        \n        if i < m - 1 and not visited[i+1][j]:\n            heapq.heappush(minHeap, (res - mat[i][j] + mat[i + 1][j], i + 1, j))\n            visited[i+1][j] = True\n        if j < n - 1 and not visited[i][j+1]:\n            heapq.heappush(minHeap, (res - mat[i][j] + mat[i][j + 1], i, j + 1))\n            visited[i][j+1] = True\n            \n    return res\n```\n"}, "1572": {"title": "Matrix Diagonal Sum", "difficulty": "Easy", "question": "Given a square matrix `mat`, return the sum of the matrix diagonals.\n\nOnly include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.\n\n**Example 1:**\n\n**Input:** mat = \\[\\[**1**,2,**3**\\],\n              \\[4,**5**,6\\],\n              \\[**7**,8,**9**\\]\\]\n**Output:** 25\n**Explanation:** Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25\nNotice that element mat\\[1\\]\\[1\\] = 5 is counted only once.\n\n**Example 2:**\n\n**Input:** mat = \\[\\[**1**,1,1,**1**\\],\n              \\[1,**1**,**1**,1\\],\n              \\[1,**1**,**1**,1\\],\n              \\[**1**,1,1,**1**\\]\\]\n**Output:** 8\n\n**Example 3:**\n\n**Input:** mat = \\[\\[**5**\\]\\]\n**Output:** 5\n\n**Constraints:**\n\n*   `n == mat.length == mat[i].length`\n*   `1 <= n <= 100`\n*   `1 <= mat[i][j] <= 100`", "answer": "```python\nclass SubrectangleQueries:\n    def __init__(self, rectangle: List[List[int]]):\n        self.rectangle = rectangle\n\n    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:\n        for i in range(row1, row2 + 1):\n            for j in range(col1, col2 + 1):\n                self.rectangle[i][j] = newValue\n\n    def getValue(self, row: int, col: int) -> int:\n        return self.rectangle[row][col]\n```\n"}, "1704": {"title": "Determine if String Halves Are Alike", "difficulty": "Easy", "question": "You are given a string `s` of even length. Split this string into two halves of equal lengths, and let `a` be the first half and `b` be the second half.\n\nTwo strings are **alike** if they have the same number of vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`, `'A'`, `'E'`, `'I'`, `'O'`, `'U'`). Notice that `s` contains uppercase and lowercase letters.\n\nReturn `true` _if_ `a` _and_ `b` _are **alike**_. Otherwise, return `false`.\n\n**Example 1:**\n\n**Input:** s =  \"book \"\n**Output:** true\n**Explanation:** a =  \"bo \" and b =  \"ok \". a has 1 vowel and b has 1 vowel. Therefore, they are alike.\n\n**Example 2:**\n\n**Input:** s =  \"textbook \"\n**Output:** false\n**Explanation:** a =  \"text \" and b =  \"book \". a has 1 vowel whereas b has 2. Therefore, they are not alike.\nNotice that the vowel o is counted twice.\n\n**Constraints:**\n\n*   `2 <= s.length <= 1000`\n*   `s.length` is even.\n*   `s` consists of **uppercase and lowercase** letters.", "answer": "```python\ndef numSpecial(mat):\n    m, n = len(mat), len(mat[0])\n    row, col = [0] * m, [0] * n\n\n    for i in range(m):\n        for j in range(n):\n            if mat[i][j] == 1:\n                row[i] += 1\n                col[j] += 1\n\n    special_positions = 0\n    for i in range(m):\n        for j in range(n):\n            if mat[i][j] == 1 and row[i] == 1 and col[j] == 1:\n                special_positions += 1\n\n    return special_positions\n```\n"}, "1716": {"title": "Calculate Money in Leetcode Bank", "difficulty": "Easy", "question": "Hercy wants to save money for his first car. He puts money in the Leetcode bank **every day**.\n\nHe starts by putting in `$1` on Monday, the first day. Every day from Tuesday to Sunday, he will put in `$1` more than the day before. On every subsequent Monday, he will put in `$1` more than the **previous Monday**.\n\nGiven `n`, return _the total amount of money he will have in the Leetcode bank at the end of the_ `nth` _day._\n\n**Example 1:**\n\n**Input:** n = 4\n**Output:** 10\n**Explanation:** After the 4th day, the total is 1 + 2 + 3 + 4 = 10.\n\n**Example 2:**\n\n**Input:** n = 10\n**Output:** 37\n**Explanation:** After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.\n\n**Example 3:**\n\n**Input:** n = 20\n**Output:** 96\n**Explanation:** After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.\n\n**Constraints:**\n\n*   `1 <= n <= 1000`", "answer": "```python\ndef maxProductPath(grid):\n    m, n, mod = len(grid), len(grid[0]), int(1e9 + 7)\n    dp = [[[0, 0] for _ in range(n)] for _ in range(m)]\n    \n    dp[0][0] = [grid[0][0], grid[0][0]]\n    \n    for i in range(1, m):\n        dp[i][0] = [dp[i - 1][0][0] * grid[i][0], dp[i - 1][0][0] * grid[i][0]]\n    for j in range(1, n):\n        dp[0][j] = [dp[0][j - 1][0] * grid[0][j], dp[0][j - 1][0] * grid[0][j]]\n    \n    for i in range(1, m):\n        for j in range(1, n):\n            if grid[i][j] < 0:\n                dp[i][j][0] = min(dp[i - 1][j][1], dp[i][j - 1][1]) * grid[i][j]\n                dp[i][j][1] = max(dp[i - 1][j][0], dp[i][j - 1][0]) * grid[i][j]\n            else:\n                dp[i][j][0] = max(dp[i - 1][j][0], dp[i][j - 1][0]) * grid[i][j]\n                dp[i][j][1] = min(dp[i - 1][j][1], dp[i][j - 1][1]) * grid[i][j]\n            \n    return dp[m - 1][n - 1][0] % mod if dp[m - 1][n - 1][0] >= 0 else -1\n```\n\n"}, "1791": {"title": "Find Center of Star Graph", "difficulty": "Easy", "question": "There is an undirected **star** graph consisting of `n` nodes labeled from `1` to `n`. A star graph is a graph where there is one **center** node and **exactly** `n - 1` edges that connect the center node with every other node.\n\nYou are given a 2D integer array `edges` where each `edges[i] = [ui, vi]` indicates that there is an edge between the nodes `ui` and `vi`. Return the center of the given star graph.\n\n**Example 1:**\n\n**Input:** edges = \\[\\[1,2\\],\\[2,3\\],\\[4,2\\]\\]\n**Output:** 2\n**Explanation:** As shown in the figure above, node 2 is connected to every other node, so 2 is the center.\n\n**Example 2:**\n\n**Input:** edges = \\[\\[1,2\\],\\[5,1\\],\\[1,3\\],\\[1,4\\]\\]\n**Output:** 1\n\n**Constraints:**\n\n*   `3 <= n <= 105`\n*   `edges.length == n - 1`\n*   `edges[i].length == 2`\n*   `1 <= ui, vi <= n`\n*   `ui != vi`\n*   The given `edges` represent a valid star graph.", "answer": "```python\ndef maximum_wealth(accounts):\n    return max(sum(customer) for customer in accounts)\n```\n\n"}, "1876": {"title": "Substrings of Size Three with Distinct Characters", "difficulty": "Easy", "question": "A string is **good** if there are no repeated characters.\n\nGiven a string `s`\u200b\u200b\u200b\u200b\u200b, return _the number of **good substrings** of length **three** in_ `s`\u200b\u200b\u200b\u200b\u200b\u200b.\n\nNote that if there are multiple occurrences of the same substring, every occurrence should be counted.\n\nA **substring** is a contiguous sequence of characters in a string.\n\n**Example 1:**\n\n**Input:** s =  \"xyzzaz \"\n**Output:** 1\n**Explanation:** There are 4 substrings of size 3:  \"xyz \",  \"yzz \",  \"zza \", and  \"zaz \". \nThe only good substring of length 3 is  \"xyz \".\n\n**Example 2:**\n\n**Input:** s =  \"aababcabc \"\n**Output:** 4\n**Explanation:** There are 7 substrings of size 3:  \"aab \",  \"aba \",  \"bab \",  \"abc \",  \"bca \",  \"cab \", and  \"abc \".\nThe good substrings are  \"abc \",  \"bca \",  \"cab \", and  \"abc \".\n\n**Constraints:**\n\n*   `1 <= s.length <= 100`\n*   `s`\u200b\u200b\u200b\u200b\u200b\u200b consists of lowercase English letters.", "answer": "```python\nfrom collections import deque\n\ndef highest_island(is_water):\n    m, n = len(is_water), len(is_water[0])\n    height = [[-1] * n for _ in range(m)]\n    q = deque()\n\n    for i in range(m):\n        for j in range(n):\n            if is_water[i][j] == 1:\n                height[i][j] = 0\n                q.append((i, j))\n\n    dx = [-1, 0, 1, 0]\n    dy = [0, 1, 0, -1]\n\n    while q:\n        x, y = q.popleft()\n\n        for i in range(4):\n            newX = x + dx[i]\n            newY = y + dy[i]\n\n            if 0 <= newX < m and 0 <= newY < n and height[newX][newY] == -1:\n                height[newX][newY] = height[x][y] + 1\n                q.append((newX, newY))\n\n    return height\n```\n"}, "2047": {"title": "Number of Valid Words in a Sentence", "difficulty": "Easy", "question": "A sentence consists of lowercase letters (`'a'` to `'z'`), digits (`'0'` to `'9'`), hyphens (`'-'`), punctuation marks (`'!'`, `'.'`, and `','`), and spaces (`' '`) only. Each sentence can be broken down into **one or more tokens** separated by one or more spaces `' '`.\n\nA token is a valid word if **all three** of the following are true:\n\n*   It only contains lowercase letters, hyphens, and/or punctuation (**no** digits).\n*   There is **at most one** hyphen `'-'`. If present, it **must** be surrounded by lowercase characters ( `\"a-b \"` is valid, but `\"-ab \"` and `\"ab- \"` are not valid).\n*   There is **at most one** punctuation mark. If present, it **must** be at the **end** of the token ( `\"ab, \"`, `\"cd! \"`, and `\". \"` are valid, but `\"a!b \"` and `\"c., \"` are not valid).\n\nExamples of valid words include `\"a-b. \"`, `\"afad \"`, `\"ba-c \"`, `\"a! \"`, and `\"! \"`.\n\nGiven a string `sentence`, return _the **number** of valid words in_ `sentence`.\n\n**Example 1:**\n\n**Input:** sentence =  \"cat and  dog \"\n**Output:** 3\n**Explanation:** The valid words in the sentence are  \"cat \",  \"and \", and  \"dog \".\n\n**Example 2:**\n\n**Input:** sentence =  \"!this  1-s b8d! \"\n**Output:** 0\n**Explanation:** There are no valid words in the sentence.\n \"!this \" is invalid because it starts with a punctuation mark.\n \"1-s \" and  \"b8d \" are invalid because they contain digits.\n\n**Example 3:**\n\n**Input:** sentence =  \"alice and  bob are playing stone-game10 \"\n**Output:** 5\n**Explanation:** The valid words in the sentence are  \"alice \",  \"and \",  \"bob \",  \"are \", and  \"playing \".\n \"stone-game10 \" is invalid because it contains digits.\n\n**Constraints:**\n\n*   `1 <= sentence.length <= 1000`\n*   `sentence` only contains lowercase English letters, digits, `' '`, `'-'`, `'!'`, `'.'`, and `','`.\n*   There will be at least `1` token.", "answer": "```python\ndef findPeakGrid(mat: List[List[int]]) -> List[int]:\n    m, n = len(mat), len(mat[0])\n    l, r = 0, n - 1\n\n    while l < r:\n        mid = (l + r) // 2\n        max_row = 0\n\n        for i in range(1, m):\n            if mat[i][mid] > mat[max_row][mid]:\n                max_row = i\n\n        if mat[max_row][mid] < mat[max_row][mid + 1]:\n            l = mid + 1\n        else:\n            r = mid\n\n    max_row = 0\n    for i in range(1, m):\n        if mat[i][l] > mat[max_row][l]:\n            max_row = i\n\n    return [max_row, l]\n```\n"}, "2089": {"title": "Find Target Indices After Sorting Array", "difficulty": "Easy", "question": "You are given a **0-indexed** integer array `nums` and a target element `target`.\n\nA **target index** is an index `i` such that `nums[i] == target`.\n\nReturn _a list of the target indices of_ `nums` after _sorting_ `nums` _in **non-decreasing** order_. If there are no target indices, return _an **empty** list_. The returned list must be sorted in **increasing** order.\n\n**Example 1:**\n\n**Input:** nums = \\[1,2,5,2,3\\], target = 2\n**Output:** \\[1,2\\]\n**Explanation:** After sorting, nums is \\[1,**2**,**2**,3,5\\].\nThe indices where nums\\[i\\] == 2 are 1 and 2.\n\n**Example 2:**\n\n**Input:** nums = \\[1,2,5,2,3\\], target = 3\n**Output:** \\[3\\]\n**Explanation:** After sorting, nums is \\[1,2,2,**3**,5\\].\nThe index where nums\\[i\\] == 3 is 3.\n\n**Example 3:**\n\n**Input:** nums = \\[1,2,5,2,3\\], target = 5\n**Output:** \\[4\\]\n**Explanation:** After sorting, nums is \\[1,2,2,3,**5**\\].\nThe index where nums\\[i\\] == 5 is 4.\n\n**Constraints:**\n\n*   `1 <= nums.length <= 100`\n*   `1 <= nums[i], target <= 100`", "answer": "```python\ndef maxMatrixSum(matrix):\n    n = len(matrix)\n    minValue, negativeCount, total = float('inf'), 0, 0\n\n    for i in range(n):\n        for j in range(n):\n            total += abs(matrix[i][j])\n            minValue = min(minValue, abs(matrix[i][j]))\n            if matrix[i][j] < 0:\n                negativeCount += 1\n\n    if negativeCount % 2 == 0:\n        return total\n    else:\n        return total - 2 * minValue\n```\n"}, "2108": {"title": "Find First Palindromic String in the Array", "difficulty": "Easy", "question": "Given an array of strings `words`, return _the first **palindromic** string in the array_. If there is no such string, return _an **empty string**_ `\" \"`.\n\nA string is **palindromic** if it reads the same forward and backward.\n\n**Example 1:**\n\n**Input:** words = \\[ \"abc \", \"car \", \"ada \", \"racecar \", \"cool \"\\]\n**Output:**  \"ada \"\n**Explanation:** The first string that is palindromic is  \"ada \".\nNote that  \"racecar \" is also palindromic, but it is not the first.\n\n**Example 2:**\n\n**Input:** words = \\[ \"notapalindrome \", \"racecar \"\\]\n**Output:**  \"racecar \"\n**Explanation:** The first and only string that is palindromic is  \"racecar \".\n\n**Example 3:**\n\n**Input:** words = \\[ \"def \", \"ghi \"\\]\n**Output:**  \" \"\n**Explanation:** There are no palindromic strings, so the empty string is returned.\n\n**Constraints:**\n\n*   `1 <= words.length <= 100`\n*   `1 <= words[i].length <= 100`\n*   `words[i]` consists only of lowercase English letters.", "answer": "```python\ndef minimizeTheDifference(mat, target):\n    m, n = len(mat), len(mat[0])\n    dp, new_dp = [1] + [0] * 4900, [0] * 4901\n    for i in range(m):\n        for j in range(n):\n            for k in range(4900 - mat[i][j] + 1):\n                new_dp[k + mat[i][j]] |= dp[k]\n        dp, new_dp = new_dp, [0] * 4901\n    for i in range(4901):\n        if dp[i]:\n            return abs(target - i)\n    return float('inf')\n```\n"}, "2160": {"title": "Minimum Sum of Four Digit Number After Splitting Digits", "difficulty": "Easy", "question": "You are given a **positive** integer `num` consisting of exactly four digits. Split `num` into two new integers `new1` and `new2` by using the **digits** found in `num`. **Leading zeros** are allowed in `new1` and `new2`, and **all** the digits found in `num` must be used.\n\n*   For example, given `num = 2932`, you have the following digits: two `2`'s, one `9` and one `3`. Some of the possible pairs `[new1, new2]` are `[22, 93]`, `[23, 92]`, `[223, 9]` and `[2, 329]`.\n\nReturn _the **minimum** possible sum of_ `new1` _and_ `new2`.\n\n**Example 1:**\n\n**Input:** num = 2932\n**Output:** 52\n**Explanation:** Some possible pairs \\[new1, new2\\] are \\[29, 23\\], \\[223, 9\\], etc.\nThe minimum sum can be obtained by the pair \\[29, 23\\]: 29 + 23 = 52.\n\n**Example 2:**\n\n**Input:** num = 4009\n**Output:** 13\n**Explanation:** Some possible pairs \\[new1, new2\\] are \\[0, 49\\], \\[490, 0\\], etc. \nThe minimum sum can be obtained by the pair \\[4, 9\\]: 4 + 9 = 13.\n\n**Constraints:**\n\n*   `1000 <= num <= 9999`", "answer": "```python\ndef min_operations(grid, x):\n    min_element = min(min(row) for row in grid)\n    min_ops = float('inf')\n\n    base = min_element\n    while True:\n        operations = 0\n        impossible = False\n        for row in grid:\n            if impossible:\n                break\n            for cell in row:\n                diff = abs(cell - base)\n                if diff % x != 0:\n                    impossible = True\n                    break\n                operations += diff // x\n        if impossible:\n            break\n        min_ops = min(min_ops, operations)\n        base -= 1\n\n    return -1 if min_ops == float('inf') else min_ops\n```\n"}, "2200": {"title": "Find All K-Distant Indices in an Array", "difficulty": "Easy", "question": "You are given a **0-indexed** integer array `nums` and two integers `key` and `k`. A **k-distant index** is an index `i` of `nums` for which there exists at least one index `j` such that `|i - j| <= k` and `nums[j] == key`.\n\nReturn _a list of all k-distant indices sorted in **increasing order**_.\n\n**Example 1:**\n\n**Input:** nums = \\[3,4,9,1,3,9,5\\], key = 9, k = 1\n**Output:** \\[1,2,3,4,5,6\\]\n**Explanation:** Here, `nums[2] == key` and `nums[5] == key. - For index 0, |0 - 2| > k and |0 - 5| > k, so there is no j` where `|0 - j| <= k` and `nums[j] == key. Thus, 0 is not a k-distant index. - For index 1, |1 - 2| <= k and nums[2] == key, so 1 is a k-distant index. - For index 2, |2 - 2| <= k and nums[2] == key, so 2 is a k-distant index. - For index 3, |3 - 2| <= k and nums[2] == key, so 3 is a k-distant index. - For index 4, |4 - 5| <= k and nums[5] == key, so 4 is a k-distant index. - For index 5, |5 - 5| <= k and nums[5] == key, so 5 is a k-distant index. - For index 6, |6 - 5| <= k and nums[5] == key, so 6 is a k-distant index.`\nThus, we return \\[1,2,3,4,5,6\\] which is sorted in increasing order. \n\n**Example 2:**\n\n**Input:** nums = \\[2,2,2,2,2\\], key = 2, k = 2\n**Output:** \\[0,1,2,3,4\\]\n**Explanation:** For all indices i in nums, there exists some index j such that |i - j| <= k and nums\\[j\\] == key, so every index is a k-distant index. \nHence, we return \\[0,1,2,3,4\\].\n\n**Constraints:**\n\n*   `1 <= nums.length <= 1000`\n*   `1 <= nums[i] <= 1000`\n*   `key` is an integer from the array `nums`.\n*   `1 <= k <= nums.length`", "answer": "```python\ndef can_fit_stamps(grid, stampHeight, stampWidth):\n    m, n = len(grid), len(grid[0])\n    for i in range(m - stampHeight + 1):\n        for j in range(n - stampWidth + 1):\n            canFit = True\n            for x in range(stampHeight):\n                for y in range(stampWidth):\n                    if grid[i + x][j + y] == 1:\n                        canFit = False\n                        break\n                if not canFit:\n                    break\n            if canFit:\n                return True\n    return False\n```\n"}, "2259": {"title": "Remove Digit From Number to Maximize Result", "difficulty": "Easy", "question": "You are given a string `number` representing a **positive integer** and a character `digit`.\n\nReturn _the resulting string after removing **exactly one occurrence** of_ `digit` _from_ `number` _such that the value of the resulting string in **decimal** form is **maximized**_. The test cases are generated such that `digit` occurs at least once in `number`.\n\n**Example 1:**\n\n**Input:** number =  \"123 \", digit =  \"3 \"\n**Output:**  \"12 \"\n**Explanation:** There is only one '3' in  \"123 \". After removing '3', the result is  \"12 \".\n\n**Example 2:**\n\n**Input:** number =  \"1231 \", digit =  \"1 \"\n**Output:**  \"231 \"\n**Explanation:** We can remove the first '1' to get  \"231 \" or remove the second '1' to get  \"123 \".\nSince 231 > 123, we return  \"231 \".\n\n**Example 3:**\n\n**Input:** number =  \"551 \", digit =  \"5 \"\n**Output:**  \"51 \"\n**Explanation:** We can remove either the first or second '5' from  \"551 \".\nBoth result in the string  \"51 \".\n\n**Constraints:**\n\n*   `2 <= number.length <= 100`\n*   `number` consists of digits from `'1'` to `'9'`.\n*   `digit` is a digit from `'1'` to `'9'`.\n*   `digit` occurs at least once in `number`.", "answer": "```python\ndef max_number_after_remove_digit(number: str, digit: str) -> str:\n    index = number.find(digit)\n    return number[:index] + number[index + 1:]\n```\n"}}