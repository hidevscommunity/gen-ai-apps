title,difficulty,question,answer
Two Sum,Easy,"Given an array of integers `nums` and an integer `target`, return _indices of the two numbers such that they add up to `target`_.

You may assume that each input would have **_exactly_ one solution**, and you may not use the _same_ element twice.

You can return the answer in any order.

**Example 1:**

**Input:** nums = \[2,7,11,15\], target = 9
**Output:** \[0,1\]
**Explanation:** Because nums\[0\] + nums\[1\] == 9, we return \[0, 1\].

**Example 2:**

**Input:** nums = \[3,2,4\], target = 6
**Output:** \[1,2\]

**Example 3:**

**Input:** nums = \[3,3\], target = 6
**Output:** \[0,1\]

**Constraints:**

*   `2 <= nums.length <= 104`
*   `-109 <= nums[i] <= 109`
*   `-109 <= target <= 109`
*   **Only one valid answer exists.**

**Follow-up:** Can you come up with an algorithm that is less than `O(n2)` time complexity?","```python
def twoSum(nums, target):
    map = {}
    for i, num in enumerate(nums):
        complement = target - num
        if complement in map:
            return [map[complement], i]
        map[num] = i
    return []
```
"
Remove Duplicates from Sorted Array,Easy,"Given an integer array `nums` sorted in **non-decreasing order**, remove the duplicates [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm) such that each unique element appears only **once**. The **relative order** of the elements should be kept the **same**. Then return _the number of unique elements in_ `nums`.

Consider the number of unique elements of `nums` be `k`, to get accepted, you need to do the following things:

*   Change the array `nums` such that the first `k` elements of `nums` contain the unique elements in the order they were present in `nums` initially. The remaining elements of `nums` are not important as well as the size of `nums`.
*   Return `k`.

**Custom Judge:**

The judge will test your solution with the following code:

int\[\] nums = \[...\]; // Input array
int\[\] expectedNums = \[...\]; // The expected answer with correct length

int k = removeDuplicates(nums); // Calls your implementation

assert k == expectedNums.length;
for (int i = 0; i < k; i++) {
    assert nums\[i\] == expectedNums\[i\];
}

If all assertions pass, then your solution will be **accepted**.

**Example 1:**

**Input:** nums = \[1,1,2\]
**Output:** 2, nums = \[1,2,\_\]
**Explanation:** Your function should return k = 2, with the first two elements of nums being 1 and 2 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Example 2:**

**Input:** nums = \[0,0,1,1,1,2,2,3,3,4\]
**Output:** 5, nums = \[0,1,2,3,4,\_,\_,\_,\_,\_\]
**Explanation:** Your function should return k = 5, with the first five elements of nums being 0, 1, 2, 3, and 4 respectively.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Constraints:**

*   `1 <= nums.length <= 3 * 104`
*   `-100 <= nums[i] <= 100`
*   `nums` is sorted in **non-decreasing** order.","```python
def removeDuplicates(nums):
    if not nums: return 0
    i = 0
    for j in range(1, len(nums)):
        if nums[j] != nums[i]:
            i += 1
            nums[i] = nums[j]
    return i + 1
```

"
Remove Element,Easy,"Given an integer array `nums` and an integer `val`, remove all occurrences of `val` in `nums` [**in-place**](https://en.wikipedia.org/wiki/In-place_algorithm). The order of the elements may be changed. Then return _the number of elements in_ `nums` _which are not equal to_ `val`.

Consider the number of elements in `nums` which are not equal to `val` be `k`, to get accepted, you need to do the following things:

*   Change the array `nums` such that the first `k` elements of `nums` contain the elements which are not equal to `val`. The remaining elements of `nums` are not important as well as the size of `nums`.
*   Return `k`.

**Custom Judge:**

The judge will test your solution with the following code:

int\[\] nums = \[...\]; // Input array
int val = ...; // Value to remove
int\[\] expectedNums = \[...\]; // The expected answer with correct length.
                            // It is sorted with no values equaling val.

int k = removeElement(nums, val); // Calls your implementation

assert k == expectedNums.length;
sort(nums, 0, k); // Sort the first k elements of nums
for (int i = 0; i < actualLength; i++) {
    assert nums\[i\] == expectedNums\[i\];
}

If all assertions pass, then your solution will be **accepted**.

**Example 1:**

**Input:** nums = \[3,2,2,3\], val = 3
**Output:** 2, nums = \[2,2,\_,\_\]
**Explanation:** Your function should return k = 2, with the first two elements of nums being 2.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Example 2:**

**Input:** nums = \[0,1,2,2,3,0,4,2\], val = 2
**Output:** 5, nums = \[0,1,4,0,3,\_,\_,\_\]
**Explanation:** Your function should return k = 5, with the first five elements of nums containing 0, 0, 1, 3, and 4.
Note that the five elements can be returned in any order.
It does not matter what you leave beyond the returned k (hence they are underscores).

**Constraints:**

*   `0 <= nums.length <= 100`
*   `0 <= nums[i] <= 50`
*   `0 <= val <= 100`","```python
def removeElement(nums, val):
    i = 0
    for j in range(len(nums)):
        if nums[j] != val:
            nums[i] = nums[j]
            i += 1
    return i
```
"
Search Insert Position,Easy,"Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.

You must write an algorithm with `O(log n)` runtime complexity.

**Example 1:**

**Input:** nums = \[1,3,5,6\], target = 5
**Output:** 2

**Example 2:**

**Input:** nums = \[1,3,5,6\], target = 2
**Output:** 1

**Example 3:**

**Input:** nums = \[1,3,5,6\], target = 7
**Output:** 4

**Constraints:**

*   `1 <= nums.length <= 104`
*   `-104 <= nums[i] <= 104`
*   `nums` contains **distinct** values sorted in **ascending** order.
*   `-104 <= target <= 104`","```python
def searchInsert(nums, target):
    left, right = 0, len(nums) - 1
    while left <= right:
        mid = left + (right - left) // 2
        if nums[mid] == target:
            return mid
        if nums[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return left
```
"
Plus One,Easy,"You are given a **large integer** represented as an integer array `digits`, where each `digits[i]` is the `ith` digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading `0`'s.

Increment the large integer by one and return _the resulting array of digits_.

**Example 1:**

**Input:** digits = \[1,2,3\]
**Output:** \[1,2,4\]
**Explanation:** The array represents the integer 123.
Incrementing by one gives 123 + 1 = 124.
Thus, the result should be \[1,2,4\].

**Example 2:**

**Input:** digits = \[4,3,2,1\]
**Output:** \[4,3,2,2\]
**Explanation:** The array represents the integer 4321.
Incrementing by one gives 4321 + 1 = 4322.
Thus, the result should be \[4,3,2,2\].

**Example 3:**

**Input:** digits = \[9\]
**Output:** \[1,0\]
**Explanation:** The array represents the integer 9.
Incrementing by one gives 9 + 1 = 10.
Thus, the result should be \[1,0\].

**Constraints:**

*   `1 <= digits.length <= 100`
*   `0 <= digits[i] <= 9`
*   `digits` does not contain any leading `0`'s.","```python
def plusOne(digits: List[int]) -> List[int]:
    n = len(digits)

    for i in range(n - 1, -1, -1):
        if digits[i] < 9:
            digits[i] += 1
            return digits
        digits[i] = 0

    digits.insert(0, 1)
    return digits
```

"
Merge Sorted Array,Easy,"You are given two integer arrays `nums1` and `nums2`, sorted in **non-decreasing order**, and two integers `m` and `n`, representing the number of elements in `nums1` and `nums2` respectively.

**Merge** `nums1` and `nums2` into a single array sorted in **non-decreasing order**.

The final sorted array should not be returned by the function, but instead be _stored inside the array_ `nums1`. To accommodate this, `nums1` has a length of `m + n`, where the first `m` elements denote the elements that should be merged, and the last `n` elements are set to `0` and should be ignored. `nums2` has a length of `n`.

**Example 1:**

**Input:** nums1 = \[1,2,3,0,0,0\], m = 3, nums2 = \[2,5,6\], n = 3
**Output:** \[1,2,2,3,5,6\]
**Explanation:** The arrays we are merging are \[1,2,3\] and \[2,5,6\].
The result of the merge is \[1,2,2,3,5,6\] with the underlined elements coming from nums1.

**Example 2:**

**Input:** nums1 = \[1\], m = 1, nums2 = \[\], n = 0
**Output:** \[1\]
**Explanation:** The arrays we are merging are \[1\] and \[\].
The result of the merge is \[1\].

**Example 3:**

**Input:** nums1 = \[0\], m = 0, nums2 = \[1\], n = 1
**Output:** \[1\]
**Explanation:** The arrays we are merging are \[\] and \[1\].
The result of the merge is \[1\].
Note that because m = 0, there are no elements in nums1. The 0 is only there to ensure the merge result can fit in nums1.

**Constraints:**

*   `nums1.length == m + n`
*   `nums2.length == n`
*   `0 <= m, n <= 200`
*   `1 <= m + n <= 200`
*   `-109 <= nums1[i], nums2[j] <= 109`

**Follow up:** Can you come up with an algorithm that runs in `O(m + n)` time?","```python
def merge(nums1, m, nums2, n):
    i, j, k = m - 1, n - 1, m + n - 1
    while i >= 0 and j >= 0:
        if nums1[i] > nums2[j]:
            nums1[k] = nums1[i]
            i -= 1
        else:
            nums1[k] = nums2[j]
            j -= 1
        k -= 1
    while j >= 0:
        nums1[k] = nums2[j]
        k -= 1
        j -= 1
```
"
Convert Sorted Array to Binary Search Tree,Easy,"Given an integer array `nums` where the elements are sorted in **ascending order**, convert _it to a_ **_height-balanced_** _binary search tree_.

**Example 1:**

**Input:** nums = \[-10,-3,0,5,9\]
**Output:** \[0,-3,9,-10,null,5\]
**Explanation:** \[0,-10,5,null,-3,null,9\] is also accepted:
 

**Example 2:**

**Input:** nums = \[1,3\]
**Output:** \[3,1\]
**Explanation:** \[1,null,3\] and \[3,1\] are both height-balanced BSTs.

**Constraints:**

*   `1 <= nums.length <= 104`
*   `-104 <= nums[i] <= 104`
*   `nums` is sorted in a **strictly increasing** order.","```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

def sorted_array_to_bst(nums):
    def helper(start, end):
        if start > end:
            return None

        mid = start + (end - start) // 2
        node = TreeNode(nums[mid])
        node.left = helper(start, mid - 1)
        node.right = helper(mid + 1, end)

        return node

    return helper(0, len(nums) - 1)
```

"
Pascal's Triangle,Easy,"Given an integer `numRows`, return the first numRows of **Pascal's triangle**.

In **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown:

**Example 1:**

**Input:** numRows = 5
**Output:** \[\[1\],\[1,1\],\[1,2,1\],\[1,3,3,1\],\[1,4,6,4,1\]\]

**Example 2:**

**Input:** numRows = 1
**Output:** \[\[1\]\]

**Constraints:**

*   `1 <= numRows <= 30`","```python
def generate(numRows):
    pascalsTriangle = []
    for i in range(numRows):
        row = [1]
        if i > 0:
            for j in range(1, i):
                row.append(pascalsTriangle[i-1][j-1] + pascalsTriangle[i-1][j])
            row.append(1)
        pascalsTriangle.append(row)
    return pascalsTriangle
```
"
Pascal's Triangle II,Easy,"Given an integer `rowIndex`, return the `rowIndexth` (**0-indexed**) row of the **Pascal's triangle**.

In **Pascal's triangle**, each number is the sum of the two numbers directly above it as shown:

**Example 1:**

**Input:** rowIndex = 3
**Output:** \[1,3,3,1\]

**Example 2:**

**Input:** rowIndex = 0
**Output:** \[1\]

**Example 3:**

**Input:** rowIndex = 1
**Output:** \[1,1\]

**Constraints:**

*   `0 <= rowIndex <= 33`

**Follow up:** Could you optimize your algorithm to use only `O(rowIndex)` extra space?","```python
def get_row(rowIndex):
    row = [1] * (rowIndex + 1)
    for i in range(1, rowIndex + 1):
        for j in range(i - 1, 0, -1):
            row[j] += row[j - 1]
    return row
```
"
Best Time to Buy and Sell Stock,Easy,"You are given an array `prices` where `prices[i]` is the price of a given stock on the `ith` day.

You want to maximize your profit by choosing a **single day** to buy one stock and choosing a **different day in the future** to sell that stock.

Return _the maximum profit you can achieve from this transaction_. If you cannot achieve any profit, return `0`.

**Example 1:**

**Input:** prices = \[7,1,5,3,6,4\]
**Output:** 5
**Explanation:** Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

**Example 2:**

**Input:** prices = \[7,6,4,3,1\]
**Output:** 0
**Explanation:** In this case, no transactions are done and the max profit = 0.

**Constraints:**

*   `1 <= prices.length <= 105`
*   `0 <= prices[i] <= 104`","```python
def maxProfit(prices):
    minPrice = float('inf')
    maxProfit = 0
    for price in prices:
        minPrice = min(minPrice, price)
        maxProfit = max(maxProfit, price - minPrice)
    return maxProfit
```
"
Single Number,Easy,"Given a **non-empty** array of integers `nums`, every element appears _twice_ except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

**Example 1:**

**Input:** nums = \[2,2,1\]
**Output:** 1

**Example 2:**

**Input:** nums = \[4,1,2,1,2\]
**Output:** 4

**Example 3:**

**Input:** nums = \[1\]
**Output:** 1

**Constraints:**

*   `1 <= nums.length <= 3 * 104`
*   `-3 * 104 <= nums[i] <= 3 * 104`
*   Each element in the array appears twice except for one element which appears only once.","```python
def singleNumber(nums):
    result = 0
    for num in nums:
        result ^= num
    return result
```
"
Missing Ranges,Easy,"You are given an inclusive range `[lower, upper]` and a **sorted unique** integer array `nums`, where all elements are in the inclusive range.

A number `x` is considered **missing** if `x` is in the range `[lower, upper]` and `x` is not in `nums`.

Return _the **smallest sorted** list of ranges that **cover every missing number exactly**_. That is, no element of `nums` is in any of the ranges, and each missing number is in one of the ranges.

Each range `[a,b]` in the list should be output as:

*   `""a->b ""` if `a != b`
*   `""a ""` if `a == b`

**Example 1:**

**Input:** nums = \[0,1,3,50,75\], lower = 0, upper = 99
**Output:** \[ ""2 "", ""4->49 "", ""51->74 "", ""76->99 ""\]
**Explanation:** The ranges are:
\[2,2\] -->  ""2 ""
\[4,49\] -->  ""4->49 ""
\[51,74\] -->  ""51->74 ""
\[76,99\] -->  ""76->99 ""

**Example 2:**

**Input:** nums = \[-1\], lower = -1, upper = -1
**Output:** \[\]
**Explanation:** There are no missing ranges since there are no missing numbers.

**Constraints:**

*   `-109 <= lower <= upper <= 109`
*   `0 <= nums.length <= 100`
*   `lower <= nums[i] <= upper`
*   All the values of `nums` are **unique**.","```python
from typing import List

def find_missing_ranges(nums: List[int], lower: int, upper: int) -> List[str]:
    result = []
    prev = lower - 1

    for i, num in enumerate(nums + [upper + 1]):
        if num - prev >= 2:
            result.append(f""{prev + 1}"" + ("""" if num - prev == 2 else ""->"") + f""{num - 1}"")
        prev = num

    return result
```
"
Majority Element,Easy,"Given an array `nums` of size `n`, return _the majority element_.

The majority element is the element that appears more than `⌊n / 2⌋` times. You may assume that the majority element always exists in the array.

**Example 1:**

**Input:** nums = \[3,2,3\]
**Output:** 3

**Example 2:**

**Input:** nums = \[2,2,1,1,1,2,2\]
**Output:** 2

**Constraints:**

*   `n == nums.length`
*   `1 <= n <= 5 * 104`
*   `-109 <= nums[i] <= 109`

**Follow-up:** Could you solve the problem in linear time and in `O(1)` space?","```python
def majority_element(nums):
    count = 0
    candidate = None

    for num in nums:
        if count == 0:
            candidate = num
        count += (num == candidate) - (num != candidate)

    return candidate
```
"
Two Sum III - Data structure design,Easy,"Design a data structure that accepts a stream of integers and checks if it has a pair of integers that sum up to a particular value.

Implement the `TwoSum` class:

*   `TwoSum()` Initializes the `TwoSum` object, with an empty array initially.
*   `void add(int number)` Adds `number` to the data structure.
*   `boolean find(int value)` Returns `true` if there exists any pair of numbers whose sum is equal to `value`, otherwise, it returns `false`.

**Example 1:**

**Input**
\[ ""TwoSum "",  ""add "",  ""add "",  ""add "",  ""find "",  ""find ""\]
\[\[\], \[1\], \[3\], \[5\], \[4\], \[7\]\]
**Output**
\[null, null, null, null, true, false\]

**Explanation**
TwoSum twoSum = new TwoSum();
twoSum.add(1);   // \[\] --> \[1\]
twoSum.add(3);   // \[1\] --> \[1,3\]
twoSum.add(5);   // \[1,3\] --> \[1,3,5\]
twoSum.find(4);  // 1 + 3 = 4, return true
twoSum.find(7);  // No two integers sum up to 7, return false

**Constraints:**

*   `-105 <= number <= 105`
*   `-231 <= value <= 231 - 1`
*   At most `104` calls will be made to `add` and `find`.","```python
class TwoSum:

    def __init__(self):
        self.nums = {}

    def add(self, number: int) -> None:
        if number in self.nums:
            self.nums[number] += 1
        else:
            self.nums[number] = 1

    def find(self, value: int) -> bool:
        for num in self.nums:
            target = value - num
            if target in self.nums:
                if target != num or self.nums[num] > 1:
                    return True
        return False
```
"
Contains Duplicate,Easy,"Given an integer array `nums`, return `true` if any value appears **at least twice** in the array, and return `false` if every element is distinct.

**Example 1:**

**Input:** nums = \[1,2,3,1\]
**Output:** true

**Example 2:**

**Input:** nums = \[1,2,3,4\]
**Output:** false

**Example 3:**

**Input:** nums = \[1,1,1,3,3,4,3,2,4,2\]
**Output:** true

**Constraints:**

*   `1 <= nums.length <= 105`
*   `-109 <= nums[i] <= 109`","```python
def containsDuplicate(nums):
    return len(nums) != len(set(nums))
```

"
Contains Duplicate II,Easy,"Given an integer array `nums` and an integer `k`, return `true` _if there are two **distinct indices**_ `i` _and_ `j` _in the array such that_ `nums[i] == nums[j]` _and_ `abs(i - j) <= k`.

**Example 1:**

**Input:** nums = \[1,2,3,1\], k = 3
**Output:** true

**Example 2:**

**Input:** nums = \[1,0,1,1\], k = 1
**Output:** true

**Example 3:**

**Input:** nums = \[1,2,3,1,2,3\], k = 2
**Output:** false

**Constraints:**

*   `1 <= nums.length <= 105`
*   `-109 <= nums[i] <= 109`
*   `0 <= k <= 105`","```python
def containsNearbyDuplicate(nums, k):
    value_index_map = {}
    for i, num in enumerate(nums):
        if num in value_index_map and i - value_index_map[num] <= k:
            return True
        value_index_map[num] = i
    return False
```
"
Summary Ranges,Easy,"You are given a **sorted unique** integer array `nums`.

A **range** `[a,b]` is the set of all integers from `a` to `b` (inclusive).

Return _the **smallest sorted** list of ranges that **cover all the numbers in the array exactly**_. That is, each element of `nums` is covered by exactly one of the ranges, and there is no integer `x` such that `x` is in one of the ranges but not in `nums`.

Each range `[a,b]` in the list should be output as:

*   `""a->b ""` if `a != b`
*   `""a ""` if `a == b`

**Example 1:**

**Input:** nums = \[0,1,2,4,5,7\]
**Output:** \[ ""0->2 "", ""4->5 "", ""7 ""\]
**Explanation:** The ranges are:
\[0,2\] -->  ""0->2 ""
\[4,5\] -->  ""4->5 ""
\[7,7\] -->  ""7 ""

**Example 2:**

**Input:** nums = \[0,2,3,4,6,8,9\]
**Output:** \[ ""0 "", ""2->4 "", ""6 "", ""8->9 ""\]
**Explanation:** The ranges are:
\[0,0\] -->  ""0 ""
\[2,4\] -->  ""2->4 ""
\[6,6\] -->  ""6 ""
\[8,9\] -->  ""8->9 ""

**Constraints:**

*   `0 <= nums.length <= 20`
*   `-231 <= nums[i] <= 231 - 1`
*   All the values of `nums` are **unique**.
*   `nums` is sorted in ascending order.","```python
from typing import List

def find_ranges(nums: List[int]) -> List[str]:
    result = []
    n = len(nums)
    if n == 0: 
        return result

    start = nums[0]
    for i in range(1, n):
        if nums[i] > nums[i-1] + 1:
            if start == nums[i-1]:
                result.append(str(start))
            else:
                result.append(str(start) + ""->"" + str(nums[i-1]))
            start = nums[i]

    if start == nums[n-1]:
        result.append(str(start))
    else:
        result.append(str(start) + ""->"" + str(nums[n-1]))

    return result
```
"
Shortest Word Distance,Easy,"Given an array of strings `wordsDict` and two different strings that already exist in the array `word1` and `word2`, return _the shortest distance between these two words in the list_.

**Example 1:**

**Input:** wordsDict = \[ ""practice "",  ""makes "",  ""perfect "",  ""coding "",  ""makes ""\], word1 =  ""coding "", word2 =  ""practice ""
**Output:** 3

**Example 2:**

**Input:** wordsDict = \[ ""practice "",  ""makes "",  ""perfect "",  ""coding "",  ""makes ""\], word1 =  ""makes "", word2 =  ""coding ""
**Output:** 1

**Constraints:**

*   `2 <= wordsDict.length <= 3 * 104`
*   `1 <= wordsDict[i].length <= 10`
*   `wordsDict[i]` consists of lowercase English letters.
*   `word1` and `word2` are in `wordsDict`.
*   `word1 != word2`","```python
def shortestDistance(wordsDict, word1, word2):
    idx1, idx2, minDistance = -1, -1, float('inf')
    for i, word in enumerate(wordsDict):
        if word == word1:
            idx1 = i
        if word == word2:
            idx2 = i
        if idx1 != -1 and idx2 != -1:
            minDistance = min(minDistance, abs(idx1 - idx2))
    return minDistance
```
"
Meeting Rooms,Easy,"Given an array of meeting time `intervals` where `intervals[i] = [starti, endi]`, determine if a person could attend all meetings.

**Example 1:**

**Input:** intervals = \[\[0,30\],\[5,10\],\[15,20\]\]
**Output:** false

**Example 2:**

**Input:** intervals = \[\[7,10\],\[2,4\]\]
**Output:** true

**Constraints:**

*   `0 <= intervals.length <= 104`
*   `intervals[i].length == 2`
*   `0 <= starti < endi <= 106`","```python
def can_attend_meetings(intervals):
    intervals.sort()

    for i in range(1, len(intervals)):
        if intervals[i][0] < intervals[i - 1][1]:
            return False

    return True
```
"
Missing Number,Easy,"Given an array `nums` containing `n` distinct numbers in the range `[0, n]`, return _the only number in the range that is missing from the array._

**Example 1:**

**Input:** nums = \[3,0,1\]
**Output:** 2
**Explanation:** n = 3 since there are 3 numbers, so all numbers are in the range \[0,3\]. 2 is the missing number in the range since it does not appear in nums.

**Example 2:**

**Input:** nums = \[0,1\]
**Output:** 2
**Explanation:** n = 2 since there are 2 numbers, so all numbers are in the range \[0,2\]. 2 is the missing number in the range since it does not appear in nums.

**Example 3:**

**Input:** nums = \[9,6,4,2,3,5,7,0,1\]
**Output:** 8
**Explanation:** n = 9 since there are 9 numbers, so all numbers are in the range \[0,9\]. 8 is the missing number in the range since it does not appear in nums.

**Constraints:**

*   `n == nums.length`
*   `1 <= n <= 104`
*   `0 <= nums[i] <= n`
*   All the numbers of `nums` are **unique**.

**Follow up:** Could you implement a solution using only `O(1)` extra space complexity and `O(n)` runtime complexity?","```python
def missingNumber(nums):
    n = len(nums)
    expected_sum = (n * (n + 1)) // 2
    actual_sum = sum(nums)
    return expected_sum - actual_sum
```
"
Move Zeroes,Easy,"Given an integer array `nums`, move all `0`'s to the end of it while maintaining the relative order of the non-zero elements.

**Note** that you must do this in-place without making a copy of the array.

**Example 1:**

**Input:** nums = \[0,1,0,3,12\]
**Output:** \[1,3,12,0,0\]

**Example 2:**

**Input:** nums = \[0\]
**Output:** \[0\]

**Constraints:**

*   `1 <= nums.length <= 104`
*   `-231 <= nums[i] <= 231 - 1`

**Follow up:** Could you minimize the total number of operations done?","```python
def moveZeroes(nums):
    index = 0
    for i in range(len(nums)):
        if nums[i] != 0:
            nums[index] = nums[i]
            index += 1
    for i in range(index, len(nums)):
        nums[i] = 0
```
"
Range Sum Query - Immutable,Easy,"Given an integer array `nums`, handle multiple queries of the following type:

1.  Calculate the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** where `left <= right`.

Implement the `NumArray` class:

*   `NumArray(int[] nums)` Initializes the object with the integer array `nums`.
*   `int sumRange(int left, int right)` Returns the **sum** of the elements of `nums` between indices `left` and `right` **inclusive** (i.e. `nums[left] + nums[left + 1] + ... + nums[right]`).

**Example 1:**

**Input**
\[ ""NumArray "",  ""sumRange "",  ""sumRange "",  ""sumRange ""\]
\[\[\[-2, 0, 3, -5, 2, -1\]\], \[0, 2\], \[2, 5\], \[0, 5\]\]
**Output**
\[null, 1, -1, -3\]

**Explanation**
NumArray numArray = new NumArray(\[-2, 0, 3, -5, 2, -1\]);
numArray.sumRange(0, 2); // return (-2) + 0 + 3 = 1
numArray.sumRange(2, 5); // return 3 + (-5) + 2 + (-1) = -1
numArray.sumRange(0, 5); // return (-2) + 0 + 3 + (-5) + 2 + (-1) = -3

**Constraints:**

*   `1 <= nums.length <= 104`
*   `-105 <= nums[i] <= 105`
*   `0 <= left <= right < nums.length`
*   At most `104` calls will be made to `sumRange`.","```python
class NumArray:

    def __init__(self, nums: List[int]):
        self.pSum = [0] * (len(nums) + 1)
        for i, num in enumerate(nums):
            self.pSum[i + 1] = self.pSum[i] + num

    def sumRange(self, left: int, right: int) -> int:
        return self.pSum[right + 1] - self.pSum[left]
```
"
Moving Average from Data Stream,Easy,"Given a stream of integers and a window size, calculate the moving average of all integers in the sliding window.

Implement the `MovingAverage` class:

*   `MovingAverage(int size)` Initializes the object with the size of the window `size`.
*   `double next(int val)` Returns the moving average of the last `size` values of the stream.

**Example 1:**

**Input**
\[ ""MovingAverage "",  ""next "",  ""next "",  ""next "",  ""next ""\]
\[\[3\], \[1\], \[10\], \[3\], \[5\]\]
**Output**
\[null, 1.0, 5.5, 4.66667, 6.0\]

**Explanation**
MovingAverage movingAverage = new MovingAverage(3);
movingAverage.next(1); // return 1.0 = 1 / 1
movingAverage.next(10); // return 5.5 = (1 + 10) / 2
movingAverage.next(3); // return 4.66667 = (1 + 10 + 3) / 3
movingAverage.next(5); // return 6.0 = (10 + 3 + 5) / 3

**Constraints:**

*   `1 <= size <= 1000`
*   `-105 <= val <= 105`
*   At most `104` calls will be made to `next`.","```python
from collections import deque

class MovingAverage:
    def __init__(self, size: int):
        self.queue = deque()
        self.maxSize = size
        self.sum = 0.0

    def next(self, val: int) -> float:
        if len(self.queue) == self.maxSize:
            self.sum -= self.queue.popleft()
        self.queue.append(val)
        self.sum += val
        return self.sum / len(self.queue)
```
"
Intersection of Two Arrays,Easy,"Given two integer arrays `nums1` and `nums2`, return _an array of their intersection_. Each element in the result must be **unique** and you may return the result in **any order**.

**Example 1:**

**Input:** nums1 = \[1,2,2,1\], nums2 = \[2,2\]
**Output:** \[2\]

**Example 2:**

**Input:** nums1 = \[4,9,5\], nums2 = \[9,4,9,8,4\]
**Output:** \[9,4\]
**Explanation:** \[4,9\] is also accepted.

**Constraints:**

*   `1 <= nums1.length, nums2.length <= 1000`
*   `0 <= nums1[i], nums2[i] <= 1000`","```python
def intersection(nums1, nums2):
    set1 = set(nums1)
    result = set1.intersection(nums2)
    return list(result)
```
"
Intersection of Two Arrays II,Easy,"Given two integer arrays `nums1` and `nums2`, return _an array of their intersection_. Each element in the result must appear as many times as it shows in both arrays and you may return the result in **any order**.

**Example 1:**

**Input:** nums1 = \[1,2,2,1\], nums2 = \[2,2\]
**Output:** \[2,2\]

**Example 2:**

**Input:** nums1 = \[4,9,5\], nums2 = \[9,4,9,8,4\]
**Output:** \[4,9\]
**Explanation:** \[9,4\] is also accepted.

**Constraints:**

*   `1 <= nums1.length, nums2.length <= 1000`
*   `0 <= nums1[i], nums2[i] <= 1000`

**Follow up:**

*   What if the given array is already sorted? How would you optimize your algorithm?
*   What if `nums1`'s size is small compared to `nums2`'s size? Which algorithm is better?
*   What if elements of `nums2` are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?","```python
def intersect(nums1, nums2):
    count_map = {}
    result = []
    
    for num in nums1:
        count_map[num] = count_map.get(num, 0) + 1
    
    for num in nums2:
        if count_map.get(num, 0) > 0:
            result.append(num)
            count_map[num] -= 1

    return result
```

"
Third Maximum Number,Easy,"Given an integer array `nums`, return _the **third distinct maximum** number in this array. If the third maximum does not exist, return the **maximum** number_.

**Example 1:**

**Input:** nums = \[3,2,1\]
**Output:** 1
**Explanation:**
The first distinct maximum is 3.
The second distinct maximum is 2.
The third distinct maximum is 1.

**Example 2:**

**Input:** nums = \[1,2\]
**Output:** 2
**Explanation:**
The first distinct maximum is 2.
The second distinct maximum is 1.
The third distinct maximum does not exist, so the maximum (2) is returned instead.

**Example 3:**

**Input:** nums = \[2,2,3,1\]
**Output:** 1
**Explanation:**
The first distinct maximum is 3.
The second distinct maximum is 2 (both 2's are counted together since they have the same value).
The third distinct maximum is 1.

**Constraints:**

*   `1 <= nums.length <= 104`
*   `-231 <= nums[i] <= 231 - 1`

**Follow up:** Can you find an `O(n)` solution?","```python
def third_max(nums):
    top3 = set()
    for num in nums:
        top3.add(num)
        if len(top3) > 3:
            top3.remove(min(top3))
    return min(top3) if len(top3) == 3 else max(top3)
```
"
Valid Word Square,Easy,"Given an array of strings `words`, return `true` _if it forms a valid **word square**_.

A sequence of strings forms a valid **word square** if the `kth` row and column read the same string, where `0 <= k < max(numRows, numColumns)`.

**Example 1:**

**Input:** words = \[ ""abcd "", ""bnrt "", ""crmy "", ""dtye ""\]
**Output:** true
**Explanation:**
The 1st row and 1st column both read  ""abcd "".
The 2nd row and 2nd column both read  ""bnrt "".
The 3rd row and 3rd column both read  ""crmy "".
The 4th row and 4th column both read  ""dtye "".
Therefore, it is a valid word square.

**Example 2:**

**Input:** words = \[ ""abcd "", ""bnrt "", ""crm "", ""dt ""\]
**Output:** true
**Explanation:**
The 1st row and 1st column both read  ""abcd "".
The 2nd row and 2nd column both read  ""bnrt "".
The 3rd row and 3rd column both read  ""crm "".
The 4th row and 4th column both read  ""dt "".
Therefore, it is a valid word square.

**Example 3:**

**Input:** words = \[ ""ball "", ""area "", ""read "", ""lady ""\]
**Output:** false
**Explanation:**
The 3rd row reads  ""read "" while the 3rd column reads  ""lead "".
Therefore, it is NOT a valid word square.

**Constraints:**

*   `1 <= words.length <= 500`
*   `1 <= words[i].length <= 500`
*   `words[i]` consists of only lowercase English letters.","```python
def valid_word_square(words):
    for i in range(len(words)):
        for j in range(len(words[i])):
            if j >= len(words) or i >= len(words[j]) or words[i][j] != words[j][i]:
                return False
    return True
```

"
Find All Numbers Disappeared in an Array,Easy,"Given an array `nums` of `n` integers where `nums[i]` is in the range `[1, n]`, return _an array of all the integers in the range_ `[1, n]` _that do not appear in_ `nums`.

**Example 1:**

**Input:** nums = \[4,3,2,7,8,2,3,1\]
**Output:** \[5,6\]

**Example 2:**

**Input:** nums = \[1,1\]
**Output:** \[2\]

**Constraints:**

*   `n == nums.length`
*   `1 <= n <= 105`
*   `1 <= nums[i] <= n`

**Follow up:** Could you do it without extra space and in `O(n)` runtime? You may assume the returned list does not count as extra space.","```python
def find_disappeared_numbers(nums):
    result = []
    
    for num in nums:
        index = abs(num) - 1
        nums[index] = -abs(nums[index])

    for i, num in enumerate(nums):
        if num > 0:
            result.append(i + 1)

    return result
```
"
Assign Cookies,Easy,"Assume you are an awesome parent and want to give your children some cookies. But, you should give each child at most one cookie.

Each child `i` has a greed factor `g[i]`, which is the minimum size of a cookie that the child will be content with; and each cookie `j` has a size `s[j]`. If `s[j] >= g[i]`, we can assign the cookie `j` to the child `i`, and the child `i` will be content. Your goal is to maximize the number of your content children and output the maximum number.

**Example 1:**

**Input:** g = \[1,2,3\], s = \[1,1\]
**Output:** 1
**Explanation:** You have 3 children and 2 cookies. The greed factors of 3 children are 1, 2, 3. 
And even though you have 2 cookies, since their size is both 1, you could only make the child whose greed factor is 1 content.
You need to output 1.

**Example 2:**

**Input:** g = \[1,2\], s = \[1,2,3\]
**Output:** 2
**Explanation:** You have 2 children and 3 cookies. The greed factors of 2 children are 1, 2. 
You have 3 cookies and their sizes are big enough to gratify all of the children, 
You need to output 2.

**Constraints:**

*   `1 <= g.length <= 3 * 104`
*   `0 <= s.length <= 3 * 104`
*   `1 <= g[i], s[j] <= 231 - 1`","```python
def find_content_children(g, s):
    g.sort()
    s.sort()
    i = j = 0

    while i < len(g) and j < len(s):
        if s[j] >= g[i]:
            i += 1

        j += 1

    return i
```

"
Island Perimeter,Easy,"You are given `row x col` `grid` representing a map where `grid[i][j] = 1` represents land and `grid[i][j] = 0` represents water.

Grid cells are connected **horizontally/vertically** (not diagonally). The `grid` is completely surrounded by water, and there is exactly one island (i.e., one or more connected land cells).

The island doesn't have ""lakes "", meaning the water inside isn't connected to the water around the island. One cell is a square with side length 1. The grid is rectangular, width and height don't exceed 100. Determine the perimeter of the island.

**Example 1:**

**Input:** grid = \[\[0,1,0,0\],\[1,1,1,0\],\[0,1,0,0\],\[1,1,0,0\]\]
**Output:** 16
**Explanation:** The perimeter is the 16 yellow stripes in the image above.

**Example 2:**

**Input:** grid = \[\[1\]\]
**Output:** 4

**Example 3:**

**Input:** grid = \[\[1,0\]\]
**Output:** 4

**Constraints:**

*   `row == grid.length`
*   `col == grid[i].length`
*   `1 <= row, col <= 100`
*   `grid[i][j]` is `0` or `1`.
*   There is exactly one island in `grid`.","```python
def islandPerimeter(grid):
    perimeter = 0
    for row in range(len(grid)):
        for col in range(len(grid[row])):
            if grid[row][col] == 1:
                perimeter += 4
                if row > 0 and grid[row - 1][col] == 1:
                    perimeter -= 2
                if col > 0 and grid[row][col - 1] == 1:
                    perimeter -= 2
    return perimeter
```
"
Max Consecutive Ones,Easy,"Given a binary array `nums`, return _the maximum number of consecutive_ `1`_'s in the array_.

**Example 1:**

**Input:** nums = \[1,1,0,1,1,1\]
**Output:** 3
**Explanation:** The first two digits or the last three digits are consecutive 1s. The maximum number of consecutive 1s is 3.

**Example 2:**

**Input:** nums = \[1,0,1,1,0,1\]
**Output:** 2

**Constraints:**

*   `1 <= nums.length <= 105`
*   `nums[i]` is either `0` or `1`.","```python
def findMaxConsecutiveOnes(nums):
    max_consecutive, current_consecutive = 0, 0
    for num in nums:
        current_consecutive = current_consecutive + 1 if num == 1 else 0
        max_consecutive = max(max_consecutive, current_consecutive)
    return max_consecutive
```
"
Teemo Attacking,Easy,"Our hero Teemo is attacking an enemy Ashe with poison attacks! When Teemo attacks Ashe, Ashe gets poisoned for a exactly `duration` seconds. More formally, an attack at second `t` will mean Ashe is poisoned during the **inclusive** time interval `[t, t + duration - 1]`. If Teemo attacks again **before** the poison effect ends, the timer for it is **reset**, and the poison effect will end `duration` seconds after the new attack.

You are given a **non-decreasing** integer array `timeSeries`, where `timeSeries[i]` denotes that Teemo attacks Ashe at second `timeSeries[i]`, and an integer `duration`.

Return _the **total** number of seconds that Ashe is poisoned_.

**Example 1:**

**Input:** timeSeries = \[1,4\], duration = 2
**Output:** 4
**Explanation:** Teemo's attacks on Ashe go as follows:
- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.
- At second 4, Teemo attacks, and Ashe is poisoned for seconds 4 and 5.
Ashe is poisoned for seconds 1, 2, 4, and 5, which is 4 seconds in total.

**Example 2:**

**Input:** timeSeries = \[1,2\], duration = 2
**Output:** 3
**Explanation:** Teemo's attacks on Ashe go as follows:
- At second 1, Teemo attacks, and Ashe is poisoned for seconds 1 and 2.
- At second 2 however, Teemo attacks again and resets the poison timer. Ashe is poisoned for seconds 2 and 3.
Ashe is poisoned for seconds 1, 2, and 3, which is 3 seconds in total.

**Constraints:**

*   `1 <= timeSeries.length <= 104`
*   `0 <= timeSeries[i], duration <= 107`
*   `timeSeries` is sorted in **non-decreasing** order.","```python
def find_poisoned_duration(time_series, duration):
    if not time_series:
        return 0
    total = 0
    for i in range(1, len(time_series)):
        total += min(time_series[i] - time_series[i - 1], duration)
    return total + duration
```
"
Next Greater Element I,Easy,"The **next greater element** of some element `x` in an array is the **first greater** element that is **to the right** of `x` in the same array.

You are given two **distinct 0-indexed** integer arrays `nums1` and `nums2`, where `nums1` is a subset of `nums2`.

For each `0 <= i < nums1.length`, find the index `j` such that `nums1[i] == nums2[j]` and determine the **next greater element** of `nums2[j]` in `nums2`. If there is no next greater element, then the answer for this query is `-1`.

Return _an array_ `ans` _of length_ `nums1.length` _such that_ `ans[i]` _is the **next greater element** as described above._

**Example 1:**

**Input:** nums1 = \[4,1,2\], nums2 = \[1,3,4,2\]
**Output:** \[-1,3,-1\]
**Explanation:** The next greater element for each value of nums1 is as follows:
- 4 is underlined in nums2 = \[1,3,4,2\]. There is no next greater element, so the answer is -1.
- 1 is underlined in nums2 = \[1,3,4,2\]. The next greater element is 3.
- 2 is underlined in nums2 = \[1,3,4,2\]. There is no next greater element, so the answer is -1.

**Example 2:**

**Input:** nums1 = \[2,4\], nums2 = \[1,2,3,4\]
**Output:** \[3,-1\]
**Explanation:** The next greater element for each value of nums1 is as follows:
- 2 is underlined in nums2 = \[1,2,3,4\]. The next greater element is 3.
- 4 is underlined in nums2 = \[1,2,3,4\]. There is no next greater element, so the answer is -1.

**Constraints:**

*   `1 <= nums1.length <= nums2.length <= 1000`
*   `0 <= nums1[i], nums2[i] <= 104`
*   All integers in `nums1` and `nums2` are **unique**.
*   All the integers of `nums1` also appear in `nums2`.

**Follow up:** Could you find an `O(nums1.length + nums2.length)` solution?","```python
def next_greater_element(nums1, nums2):
    next_greater = {}
    stack = []

    for num in nums2:
        while stack and stack[-1] < num:
            next_greater[stack.pop()] = num
        stack.append(num)

    return [next_greater.get(n, -1) for n in nums1]
```
"
Keyboard Row,Easy,"Given an array of strings `words`, return _the words that can be typed using letters of the alphabet on only one row of American keyboard like the image below_.

In the **American keyboard**:

*   the first row consists of the characters `""qwertyuiop ""`,
*   the second row consists of the characters `""asdfghjkl ""`, and
*   the third row consists of the characters `""zxcvbnm ""`.

**Example 1:**

**Input:** words = \[ ""Hello "", ""Alaska "", ""Dad "", ""Peace ""\]
**Output:** \[ ""Alaska "", ""Dad ""\]

**Example 2:**

**Input:** words = \[ ""omk ""\]
**Output:** \[\]

**Example 3:**

**Input:** words = \[ ""adsdf "", ""sfd ""\]
**Output:** \[ ""adsdf "", ""sfd ""\]

**Constraints:**

*   `1 <= words.length <= 20`
*   `1 <= words[i].length <= 100`
*   `words[i]` consists of English letters (both lowercase and uppercase).","```python
def find_words(words):
    rows = [
        set(""qwertyuiopQWERTYUIOP""),
        set(""asdfghjklASDFGHJKL""),
        set(""zxcvbnmZXCVBNM"")
    ]
    res = []

    for word in words:
        row = -1
        for i in range(3):
            if word[0] in rows[i]:
                row = i
                break

        if all(c in rows[row] for c in word):
            res.append(word)

    return res
```

"
Relative Ranks,Easy,"You are given an integer array `score` of size `n`, where `score[i]` is the score of the `ith` athlete in a competition. All the scores are guaranteed to be **unique**.

The athletes are **placed** based on their scores, where the `1st` place athlete has the highest score, the `2nd` place athlete has the `2nd` highest score, and so on. The placement of each athlete determines their rank:

*   The `1st` place athlete's rank is `""Gold Medal ""`.
*   The `2nd` place athlete's rank is `""Silver Medal ""`.
*   The `3rd` place athlete's rank is `""Bronze Medal ""`.
*   For the `4th` place to the `nth` place athlete, their rank is their placement number (i.e., the `xth` place athlete's rank is `""x ""`).

Return an array `answer` of size `n` where `answer[i]` is the **rank** of the `ith` athlete.

**Example 1:**

**Input:** score = \[5,4,3,2,1\]
**Output:** \[ ""Gold Medal "", ""Silver Medal "", ""Bronze Medal "", ""4 "", ""5 ""\]
**Explanation:** The placements are \[1st, 2nd, 3rd, 4th, 5th\].

**Example 2:**

**Input:** score = \[10,3,8,9,4\]
**Output:** \[ ""Gold Medal "", ""5 "", ""Bronze Medal "", ""Silver Medal "", ""4 ""\]
**Explanation:** The placements are \[1st, 5th, 3rd, 2nd, 4th\].

**Constraints:**

*   `n == score.length`
*   `1 <= n <= 104`
*   `0 <= score[i] <= 106`
*   All the values in `score` are **unique**.","```python
def find_relative_ranks(score):
    rank_sort = sorted(range(len(score)), key=lambda i: score[i], reverse=True)
    result = [0] * len(score)
    for i, rank in enumerate(rank_sort):
        result[rank] = i + 1
    return result
```

"
Array Partition,Easy,"Given an integer array `nums` of `2n` integers, group these integers into `n` pairs `(a1, b1), (a2, b2), ..., (an, bn)` such that the sum of `min(ai, bi)` for all `i` is **maximized**. Return _the maximized sum_.

**Example 1:**

**Input:** nums = \[1,4,3,2\]
**Output:** 4
**Explanation:** All possible pairings (ignoring the ordering of elements) are:
1. (1, 4), (2, 3) -> min(1, 4) + min(2, 3) = 1 + 2 = 3
2. (1, 3), (2, 4) -> min(1, 3) + min(2, 4) = 1 + 2 = 3
3. (1, 2), (3, 4) -> min(1, 2) + min(3, 4) = 1 + 3 = 4
So the maximum possible sum is 4.

**Example 2:**

**Input:** nums = \[6,2,6,5,1,2\]
**Output:** 9
**Explanation:** The optimal pairing is (2, 1), (2, 5), (6, 6). min(2, 1) + min(2, 5) + min(6, 6) = 1 + 2 + 6 = 9.

**Constraints:**

*   `1 <= n <= 104`
*   `nums.length == 2 * n`
*   `-104 <= nums[i] <= 104`","```python
def array_pair_sum(nums):
    nums.sort()
    return sum(nums[::2])
```
"
Reshape the Matrix,Easy,"In MATLAB, there is a handy function called `reshape` which can reshape an `m x n` matrix into a new one with a different size `r x c` keeping its original data.

You are given an `m x n` matrix `mat` and two integers `r` and `c` representing the number of rows and the number of columns of the wanted reshaped matrix.

The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.

If the `reshape` operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the original matrix.

**Example 1:**

**Input:** mat = \[\[1,2\],\[3,4\]\], r = 1, c = 4
**Output:** \[\[1,2,3,4\]\]

**Example 2:**

**Input:** mat = \[\[1,2\],\[3,4\]\], r = 2, c = 4
**Output:** \[\[1,2\],\[3,4\]\]

**Constraints:**

*   `m == mat.length`
*   `n == mat[i].length`
*   `1 <= m, n <= 100`
*   `-1000 <= mat[i][j] <= 1000`
*   `1 <= r, c <= 300`","```python
def matrixReshape(mat, r, c):
    m, n = len(mat), len(mat[0])
    if m * n != r * c:
        return mat

    reshaped = [[0] * c for _ in range(r)]
    for i in range(m * n):
        reshaped[i // c][i % c] = mat[i // n][i % n]

    return reshaped
```
"
Distribute Candies,Easy,"Alice has `n` candies, where the `ith` candy is of type `candyType[i]`. Alice noticed that she started to gain weight, so she visited a doctor.

The doctor advised Alice to only eat `n / 2` of the candies she has (`n` is always even). Alice likes her candies very much, and she wants to eat the maximum number of different types of candies while still following the doctor's advice.

Given the integer array `candyType` of length `n`, return _the **maximum** number of different types of candies she can eat if she only eats_ `n / 2` _of them_.

**Example 1:**

**Input:** candyType = \[1,1,2,2,3,3\]
**Output:** 3
**Explanation:** Alice can only eat 6 / 2 = 3 candies. Since there are only 3 types, she can eat one of each type.

**Example 2:**

**Input:** candyType = \[1,1,2,3\]
**Output:** 2
**Explanation:** Alice can only eat 4 / 2 = 2 candies. Whether she eats types \[1,2\], \[1,3\], or \[2,3\], she still can only eat 2 different types.

**Example 3:**

**Input:** candyType = \[6,6,6,6\]
**Output:** 1
**Explanation:** Alice can only eat 4 / 2 = 2 candies. Even though she can eat 2 candies, she only has 1 type.

**Constraints:**

*   `n == candyType.length`
*   `2 <= n <= 104`
*   `n` is even.
*   `-105 <= candyType[i] <= 105`","```python
def maxNumberOfCandies(candyType):
    uniqueCandies = set(candyType)
    return min(len(uniqueCandies), len(candyType) // 2)
```

"
Longest Harmonious Subsequence,Easy,"We define a harmonious array as an array where the difference between its maximum value and its minimum value is **exactly** `1`.

Given an integer array `nums`, return _the length of its longest harmonious subsequence among all its possible subsequences_.

A **subsequence** of array is a sequence that can be derived from the array by deleting some or no elements without changing the order of the remaining elements.

**Example 1:**

**Input:** nums = \[1,3,2,2,5,2,3,7\]
**Output:** 5
**Explanation:** The longest harmonious subsequence is \[3,2,2,2,3\].

**Example 2:**

**Input:** nums = \[1,2,3,4\]
**Output:** 2

**Example 3:**

**Input:** nums = \[1,1,1,1\]
**Output:** 0

**Constraints:**

*   `1 <= nums.length <= 2 * 104`
*   `-109 <= nums[i] <= 109`","```python
def findLHS(nums):
    count = {}
    for num in nums:
        count[num] = count.get(num, 0) + 1

    longest_sequence = 0
    for key in count:
        if key + 1 in count:
            longest_sequence = max(longest_sequence, count[key] + count[key + 1])

    return longest_sequence
```
"
Range Addition II,Easy,"You are given an `m x n` matrix `M` initialized with all `0`'s and an array of operations `ops`, where `ops[i] = [ai, bi]` means `M[x][y]` should be incremented by one for all `0 <= x < ai` and `0 <= y < bi`.

Count and return _the number of maximum integers in the matrix after performing all the operations_.

**Example 1:**

**Input:** m = 3, n = 3, ops = \[\[2,2\],\[3,3\]\]
**Output:** 4
**Explanation:** The maximum integer in M is 2, and there are four of it in M. So return 4.

**Example 2:**

**Input:** m = 3, n = 3, ops = \[\[2,2\],\[3,3\],\[3,3\],\[3,3\],\[2,2\],\[3,3\],\[3,3\],\[3,3\],\[2,2\],\[3,3\],\[3,3\],\[3,3\]\]
**Output:** 4

**Example 3:**

**Input:** m = 3, n = 3, ops = \[\]
**Output:** 9

**Constraints:**

*   `1 <= m, n <= 4 * 104`
*   `0 <= ops.length <= 104`
*   `ops[i].length == 2`
*   `1 <= ai <= m`
*   `1 <= bi <= n`","```python
def maxCount(m: int, n: int, ops: List[List[int]]) -> int:
    for op in ops:
        m = min(m, op[0])
        n = min(n, op[1])
    return m * n
```
"
Minimum Index Sum of Two Lists,Easy,"Given two arrays of strings `list1` and `list2`, find the **common strings with the least index sum**.

A **common string** is a string that appeared in both `list1` and `list2`.

A **common string with the least index sum** is a common string such that if it appeared at `list1[i]` and `list2[j]` then `i + j` should be the minimum value among all the other **common strings**.

Return _all the **common strings with the least index sum**_. Return the answer in **any order**.

**Example 1:**

**Input:** list1 = \[ ""Shogun "", ""Tapioca Express "", ""Burger King "", ""KFC ""\], list2 = \[ ""Piatti "", ""The Grill at Torrey Pines "", ""Hungry Hunter Steakhouse "", ""Shogun ""\]
**Output:** \[ ""Shogun ""\]
**Explanation:** The only common string is  ""Shogun "".

**Example 2:**

**Input:** list1 = \[ ""Shogun "", ""Tapioca Express "", ""Burger King "", ""KFC ""\], list2 = \[ ""KFC "", ""Shogun "", ""Burger King ""\]
**Output:** \[ ""Shogun ""\]
**Explanation:** The common string with the least index sum is  ""Shogun "" with index sum = (0 + 1) = 1.

**Example 3:**

**Input:** list1 = \[ ""happy "", ""sad "", ""good ""\], list2 = \[ ""sad "", ""happy "", ""good ""\]
**Output:** \[ ""sad "", ""happy ""\]
**Explanation:** There are three common strings:
 ""happy "" with index sum = (0 + 1) = 1.
 ""sad "" with index sum = (1 + 0) = 1.
 ""good "" with index sum = (2 + 2) = 4.
The strings with the least index sum are  ""sad "" and  ""happy "".

**Constraints:**

*   `1 <= list1.length, list2.length <= 1000`
*   `1 <= list1[i].length, list2[i].length <= 30`
*   `list1[i]` and `list2[i]` consist of spaces `' '` and English letters.
*   All the strings of `list1` are **unique**.
*   All the strings of `list2` are **unique**.
*   There is at least a common string between `list1` and `list2`.","```python
from typing import List

def findRestaurant(list1: List[str], list2: List[str]) -> List[str]:
    restaurantMap = {restaurant: i for i, restaurant in enumerate(list1)}

    minSum = float(""inf"")
    result = []
    for j, restaurant in enumerate(list2):
        if restaurant in restaurantMap:
            totalSum = j + restaurantMap[restaurant]
            if totalSum < minSum:
                result = [restaurant]
                minSum = totalSum
            elif totalSum == minSum:
                result.append(restaurant)

    return result
```

"
Design Compressed String Iterator,Easy,"Design and implement a data structure for a compressed string iterator. The given compressed string will be in the form of each letter followed by a positive integer representing the number of this letter existing in the original uncompressed string.

Implement the StringIterator class:

*   `next()` Returns **the next character** if the original string still has uncompressed characters, otherwise returns a **white space**.
*   `hasNext()` Returns true if there is any letter needs to be uncompressed in the original string, otherwise returns `false`.

**Example 1:**

**Input**
\[ ""StringIterator "",  ""next "",  ""next "",  ""next "",  ""next "",  ""next "",  ""next "",  ""hasNext "",  ""next "",  ""hasNext ""\]
\[\[ ""L1e2t1C1o1d1e1 ""\], \[\], \[\], \[\], \[\], \[\], \[\], \[\], \[\], \[\]\]
**Output**
\[null,  ""L "",  ""e "",  ""e "",  ""t "",  ""C "",  ""o "", true,  ""d "", true\]

**Explanation**
StringIterator stringIterator = new StringIterator( ""L1e2t1C1o1d1e1 "");
stringIterator.next(); // return  ""L ""
stringIterator.next(); // return  ""e ""
stringIterator.next(); // return  ""e ""
stringIterator.next(); // return  ""t ""
stringIterator.next(); // return  ""C ""
stringIterator.next(); // return  ""o ""
stringIterator.hasNext(); // return True
stringIterator.next(); // return  ""d ""
stringIterator.hasNext(); // return True

**Constraints:**

*   `1 <= compressedString.length <= 1000`
*   `compressedString` consists of lower-case an upper-case English letters and digits.
*   The number of a single character repetitions in `compressedString` is in the range `[1, 10^9]`
*   At most `100` calls will be made to `next` and `hasNext`.","```python
class StringIterator:
    def __init__(self, compressedString: str):
        self.s = compressedString
        self.i = 0
        self.count = 0
        self.ch = "" ""
    
    def next(self) -> str:
        if not self.hasNext():
            return "" ""
        if self.count == 0:
            self.ch = self.s[self.i]
            self.i += 1
            while self.i < len(self.s) and self.s[self.i].isdigit():
                self.count = self.count * 10 + int(self.s[self.i])
                self.i += 1
        self.count -= 1
        return self.ch
    
    def hasNext(self) -> bool:
        return self.i < len(self.s) or self.count != 0
```

"
Can Place Flowers,Easy,"You have a long flowerbed in which some of the plots are planted, and some are not. However, flowers cannot be planted in **adjacent** plots.

Given an integer array `flowerbed` containing `0`'s and `1`'s, where `0` means empty and `1` means not empty, and an integer `n`, return `true` _if_ `n` _new flowers can be planted in the_ `flowerbed` _without violating the no-adjacent-flowers rule and_ `false` _otherwise_.

**Example 1:**

**Input:** flowerbed = \[1,0,0,0,1\], n = 1
**Output:** true

**Example 2:**

**Input:** flowerbed = \[1,0,0,0,1\], n = 2
**Output:** false

**Constraints:**

*   `1 <= flowerbed.length <= 2 * 104`
*   `flowerbed[i]` is `0` or `1`.
*   There are no two adjacent flowers in `flowerbed`.
*   `0 <= n <= flowerbed.length`","```python
def canPlaceFlowers(flowerbed, n):
    count = 0
    for i in range(len(flowerbed)):
        if flowerbed[i] == 0 and (i == 0 or flowerbed[i - 1] == 0) and (i == len(flowerbed) - 1 or flowerbed[i + 1] == 0):
            flowerbed[i] = 1
            count += 1
        if count >= n:
            return True
    return count >= n
```

"
Maximum Product of Three Numbers,Easy,"Given an integer array `nums`, _find three numbers whose product is maximum and return the maximum product_.

**Example 1:**

**Input:** nums = \[1,2,3\]
**Output:** 6

**Example 2:**

**Input:** nums = \[1,2,3,4\]
**Output:** 24

**Example 3:**

**Input:** nums = \[-1,-2,-3\]
**Output:** -6

**Constraints:**

*   `3 <= nums.length <= 104`
*   `-1000 <= nums[i] <= 1000`","```python
def maximumProduct(nums):
    nums.sort()
    n = len(nums)
    return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])
```
"
Maximum Average Subarray I,Easy,"You are given an integer array `nums` consisting of `n` elements, and an integer `k`.

Find a contiguous subarray whose **length is equal to** `k` that has the maximum average value and return _this value_. Any answer with a calculation error less than `10-5` will be accepted.

**Example 1:**

**Input:** nums = \[1,12,-5,-6,50,3\], k = 4
**Output:** 12.75000
**Explanation:** Maximum average is (12 - 5 - 6 + 50) / 4 = 51 / 4 = 12.75

**Example 2:**

**Input:** nums = \[5\], k = 1
**Output:** 5.00000

**Constraints:**

*   `n == nums.length`
*   `1 <= k <= n <= 105`
*   `-104 <= nums[i] <= 104`","```python
def findMaxAverage(nums, k):
    n = len(nums)
    sum_ = sum(nums[:k])
    max_avg = sum_ / k
    for i in range(k, n):
        sum_ = sum_ - nums[i - k] + nums[i]
        max_avg = max(max_avg, sum_ / k)
    return max_avg
```
"
Set Mismatch,Easy,"You have a set of integers `s`, which originally contains all the numbers from `1` to `n`. Unfortunately, due to some error, one of the numbers in `s` got duplicated to another number in the set, which results in **repetition of one** number and **loss of another** number.

You are given an integer array `nums` representing the data status of this set after the error.

Find the number that occurs twice and the number that is missing and return _them in the form of an array_.

**Example 1:**

**Input:** nums = \[1,2,2,4\]
**Output:** \[2,3\]

**Example 2:**

**Input:** nums = \[1,1\]
**Output:** \[1,2\]

**Constraints:**

*   `2 <= nums.length <= 104`
*   `1 <= nums[i] <= 104`","```python
def findErrorNums(nums):
    result = []
    for num in nums:
        index = abs(num) - 1
        if nums[index] > 0:
            nums[index] = -nums[index]
        else:
            result.append(index + 1)
    for i, num in enumerate(nums):
        if num > 0:
            result.append(i + 1)
            break
    return result
```
"
Image Smoother,Easy,"An **image smoother** is a filter of the size `3 x 3` that can be applied to each cell of an image by rounding down the average of the cell and the eight surrounding cells (i.e., the average of the nine cells in the blue smoother). If one or more of the surrounding cells of a cell is not present, we do not consider it in the average (i.e., the average of the four cells in the red smoother).

Given an `m x n` integer matrix `img` representing the grayscale of an image, return _the image after applying the smoother on each cell of it_.

**Example 1:**

**Input:** img = \[\[1,1,1\],\[1,0,1\],\[1,1,1\]\]
**Output:** \[\[0,0,0\],\[0,0,0\],\[0,0,0\]\]
**Explanation:**
For the points (0,0), (0,2), (2,0), (2,2): floor(3/4) = floor(0.75) = 0
For the points (0,1), (1,0), (1,2), (2,1): floor(5/6) = floor(0.83333333) = 0
For the point (1,1): floor(8/9) = floor(0.88888889) = 0

**Example 2:**

**Input:** img = \[\[100,200,100\],\[200,50,200\],\[100,200,100\]\]
**Output:** \[\[137,141,137\],\[141,138,141\],\[137,141,137\]\]
**Explanation:**
For the points (0,0), (0,2), (2,0), (2,2): floor((100+200+200+50)/4) = floor(137.5) = 137
For the points (0,1), (1,0), (1,2), (2,1): floor((200+200+50+200+100+100)/6) = floor(141.666667) = 141
For the point (1,1): floor((50+200+200+200+200+100+100+100+100)/9) = floor(138.888889) = 138

**Constraints:**

*   `m == img.length`
*   `n == img[i].length`
*   `1 <= m, n <= 200`
*   `0 <= img[i][j] <= 255`","```python
def imageSmoother(img):
    m, n = len(img), len(img[0])
    result = [[0] * n for _ in range(m)]

    for i in range(m):
        for j in range(n):
            count, total = 0, 0
            for x in range(i - 1, i + 2):
                for y in range(j - 1, j + 2):
                    if 0 <= x < m and 0 <= y < n:
                        total += img[x][y]
                        count += 1
            result[i][j] = total // count

    return result
```
"
Longest Continuous Increasing Subsequence,Easy,"Given an unsorted array of integers `nums`, return _the length of the longest **continuous increasing subsequence** (i.e. subarray)_. The subsequence must be **strictly** increasing.

A **continuous increasing subsequence** is defined by two indices `l` and `r` (`l < r`) such that it is `[nums[l], nums[l + 1], ..., nums[r - 1], nums[r]]` and for each `l <= i < r`, `nums[i] < nums[i + 1]`.

**Example 1:**

**Input:** nums = \[1,3,5,4,7\]
**Output:** 3
**Explanation:** The longest continuous increasing subsequence is \[1,3,5\] with length 3.
Even though \[1,3,5,7\] is an increasing subsequence, it is not continuous as elements 5 and 7 are separated by element
4.

**Example 2:**

**Input:** nums = \[2,2,2,2,2\]
**Output:** 1
**Explanation:** The longest continuous increasing subsequence is \[2\] with length 1. Note that it must be strictly
increasing.

**Constraints:**

*   `1 <= nums.length <= 104`
*   `-109 <= nums[i] <= 109`","```python
def findLengthOfLCIS(nums):
    if not nums:
        return 0
    result, current = 1, 1
    for i in range(1, len(nums)):
        current = current + 1 if nums[i] > nums[i - 1] else 1
        result = max(result, current)
    return result
```
"
Baseball Game,Easy,"You are keeping the scores for a baseball game with strange rules. At the beginning of the game, you start with an empty record.

You are given a list of strings `operations`, where `operations[i]` is the `ith` operation you must apply to the record and is one of the following:

*   An integer `x`.
    *   Record a new score of `x`.
*   `'+'`.
    *   Record a new score that is the sum of the previous two scores.
*   `'D'`.
    *   Record a new score that is the double of the previous score.
*   `'C'`.
    *   Invalidate the previous score, removing it from the record.

Return _the sum of all the scores on the record after applying all the operations_.

The test cases are generated such that the answer and all intermediate calculations fit in a **32-bit** integer and that all operations are valid.

**Example 1:**

**Input:** ops = \[ ""5 "", ""2 "", ""C "", ""D "", ""+ ""\]
**Output:** 30
**Explanation:**
 ""5 "" - Add 5 to the record, record is now \[5\].
 ""2 "" - Add 2 to the record, record is now \[5, 2\].
 ""C "" - Invalidate and remove the previous score, record is now \[5\].
 ""D "" - Add 2 \* 5 = 10 to the record, record is now \[5, 10\].
 ""+ "" - Add 5 + 10 = 15 to the record, record is now \[5, 10, 15\].
The total sum is 5 + 10 + 15 = 30.

**Example 2:**

**Input:** ops = \[ ""5 "", ""-2 "", ""4 "", ""C "", ""D "", ""9 "", ""+ "", ""+ ""\]
**Output:** 27
**Explanation:**
 ""5 "" - Add 5 to the record, record is now \[5\].
 ""-2 "" - Add -2 to the record, record is now \[5, -2\].
 ""4 "" - Add 4 to the record, record is now \[5, -2, 4\].
 ""C "" - Invalidate and remove the previous score, record is now \[5, -2\].
 ""D "" - Add 2 \* -2 = -4 to the record, record is now \[5, -2, -4\].
 ""9 "" - Add 9 to the record, record is now \[5, -2, -4, 9\].
 ""+ "" - Add -4 + 9 = 5 to the record, record is now \[5, -2, -4, 9, 5\].
 ""+ "" - Add 9 + 5 = 14 to the record, record is now \[5, -2, -4, 9, 5, 14\].
The total sum is 5 + -2 + -4 + 9 + 5 + 14 = 27.

**Example 3:**

**Input:** ops = \[ ""1 "", ""C ""\]
**Output:** 0
**Explanation:**
 ""1 "" - Add 1 to the record, record is now \[1\].
 ""C "" - Invalidate and remove the previous score, record is now \[\].
Since the record is empty, the total sum is 0.

**Constraints:**

*   `1 <= operations.length <= 1000`
*   `operations[i]` is `""C ""`, `""D ""`, `""+ ""`, or a string representing an integer in the range `[-3 * 104, 3 * 104]`.
*   For operation `""+ ""`, there will always be at least two previous scores on the record.
*   For operations `""C ""` and `""D ""`, there will always be at least one previous score on the record.","```python
def calPoints(ops):
    record = []
    for op in ops:
        if op == '+':
            record.append(record[-1] + record[-2])
        elif op == 'D':
            record.append(record[-1] * 2)
        elif op == 'C':
            record.pop()
        else:
            record.append(int(op))
    return sum(record)
```

"
Degree of an Array,Easy,"Given a non-empty array of non-negative integers `nums`, the **degree** of this array is defined as the maximum frequency of any one of its elements.

Your task is to find the smallest possible length of a (contiguous) subarray of `nums`, that has the same degree as `nums`.

**Example 1:**

**Input:** nums = \[1,2,2,3,1\]
**Output:** 2
**Explanation:** 
The input array has a degree of 2 because both elements 1 and 2 appear twice.
Of the subarrays that have the same degree:
\[1, 2, 2, 3, 1\], \[1, 2, 2, 3\], \[2, 2, 3, 1\], \[1, 2, 2\], \[2, 2, 3\], \[2, 2\]
The shortest length is 2. So return 2.

**Example 2:**

**Input:** nums = \[1,2,2,3,1,4,2\]
**Output:** 6
**Explanation:** 
The degree is 3 because the element 2 is repeated 3 times.
So \[2,2,3,1,4,2\] is the shortest subarray, therefore returning 6.

**Constraints:**

*   `nums.length` will be between 1 and 50,000.
*   `nums[i]` will be an integer between 0 and 49,999.","```python
def findShortestSubArray(nums):
    freq_map, start_map = {}, {}
    max_freq, min_length = 0, len(nums)

    for i, num in enumerate(nums):
        if num not in start_map:
            start_map[num] = i
        freq_map[num] = freq_map.get(num, 0) + 1

        freq = freq_map[num]
        if freq > max_freq:
            max_freq = freq
            min_length = i - start_map[num] + 1
        elif freq == max_freq:
            min_length = min(min_length, i - start_map[num] + 1)

    return min_length
```
"
1-bit and 2-bit Characters,Easy,"We have two special characters:

*   The first character can be represented by one bit `0`.
*   The second character can be represented by two bits (`10` or `11`).

Given a binary array `bits` that ends with `0`, return `true` if the last character must be a one-bit character.

**Example 1:**

**Input:** bits = \[1,0,0\]
**Output:** true
**Explanation:** The only way to decode it is two-bit character and one-bit character.
So the last character is one-bit character.

**Example 2:**

**Input:** bits = \[1,1,1,0\]
**Output:** false
**Explanation:** The only way to decode it is two-bit character and two-bit character.
So the last character is not one-bit character.

**Constraints:**

*   `1 <= bits.length <= 1000`
*   `bits[i]` is either `0` or `1`.","```python
def is_one_bit_character(bits):
    i = 0
    while i < len(bits) - 1:
        i += bits[i] + 1
    return i == len(bits) - 1
```
"
Find Pivot Index,Easy,"Given an array of integers `nums`, calculate the **pivot index** of this array.

The **pivot index** is the index where the sum of all the numbers **strictly** to the left of the index is equal to the sum of all the numbers **strictly** to the index's right.

If the index is on the left edge of the array, then the left sum is `0` because there are no elements to the left. This also applies to the right edge of the array.

Return _the **leftmost pivot index**_. If no such index exists, return `-1`.

**Example 1:**

**Input:** nums = \[1,7,3,6,5,6\]
**Output:** 3
**Explanation:**
The pivot index is 3.
Left sum = nums\[0\] + nums\[1\] + nums\[2\] = 1 + 7 + 3 = 11
Right sum = nums\[4\] + nums\[5\] = 5 + 6 = 11

**Example 2:**

**Input:** nums = \[1,2,3\]
**Output:** -1
**Explanation:**
There is no index that satisfies the conditions in the problem statement.

**Example 3:**

**Input:** nums = \[2,1,-1\]
**Output:** 0
**Explanation:**
The pivot index is 0.
Left sum = 0 (no elements to the left of index 0)
Right sum = nums\[1\] + nums\[2\] = 1 + -1 = 0

**Constraints:**

*   `1 <= nums.length <= 104`
*   `-1000 <= nums[i] <= 1000`

**Note:** This question is the same as 1991: [https://leetcode.com/problems/find-the-middle-index-in-array/](https://leetcode.com/problems/find-the-middle-index-in-array/)","```python
def pivotIndex(nums):
    total_sum = sum(nums)
    left_sum = 0
    for i, num in enumerate(nums):
        if left_sum == total_sum - left_sum - num:
            return i
        left_sum += num
    return -1
```

"
Flood Fill,Easy,"An image is represented by an `m x n` integer grid `image` where `image[i][j]` represents the pixel value of the image.

You are also given three integers `sr`, `sc`, and `color`. You should perform a **flood fill** on the image starting from the pixel `image[sr][sc]`.

To perform a **flood fill**, consider the starting pixel, plus any pixels connected **4-directionally** to the starting pixel of the same color as the starting pixel, plus any pixels connected **4-directionally** to those pixels (also with the same color), and so on. Replace the color of all of the aforementioned pixels with `color`.

Return _the modified image after performing the flood fill_.

**Example 1:**

**Input:** image = \[\[1,1,1\],\[1,1,0\],\[1,0,1\]\], sr = 1, sc = 1, color = 2
**Output:** \[\[2,2,2\],\[2,2,0\],\[2,0,1\]\]
**Explanation:** From the center of the image with position (sr, sc) = (1, 1) (i.e., the red pixel), all pixels connected by a path of the same color as the starting pixel (i.e., the blue pixels) are colored with the new color.
Note the bottom corner is not colored 2, because it is not 4-directionally connected to the starting pixel.

**Example 2:**

**Input:** image = \[\[0,0,0\],\[0,0,0\]\], sr = 0, sc = 0, color = 0
**Output:** \[\[0,0,0\],\[0,0,0\]\]
**Explanation:** The starting pixel is already colored 0, so no changes are made to the image.

**Constraints:**

*   `m == image.length`
*   `n == image[i].length`
*   `1 <= m, n <= 50`
*   `0 <= image[i][j], color < 216`
*   `0 <= sr < m`
*   `0 <= sc < n`","```python
def floodFill(image, sr, sc, newColor):
    startColor = image[sr][sc]
    def fill(sr, sc):
        if not (0 <= sr < len(image)) or not (0 <= sc < len(image[0])) or image[sr][sc] != startColor or image[sr][sc] == newColor: 
            return
        image[sr][sc] = newColor
        fill(sr - 1, sc)
        fill(sr + 1, sc)
        fill(sr, sc - 1)
        fill(sr, sc + 1)
    
    fill(sr, sc)
    return image
```

"
Sentence Similarity,Easy,"We can represent a sentence as an array of words, for example, the sentence `""I am happy with leetcode ""` can be represented as `arr = [ ""I "", ""am "",happy "", ""with "", ""leetcode ""]`.

Given two sentences `sentence1` and `sentence2` each represented as a string array and given an array of string pairs `similarPairs` where `similarPairs[i] = [xi, yi]` indicates that the two words `xi` and `yi` are similar.

Return _`true` if `sentence1` and `sentence2` are similar, or `false` if they are not similar_.

Two sentences are similar if:

*   They have **the same length** (i.e., the same number of words)
*   `sentence1[i]` and `sentence2[i]` are similar.

Notice that a word is always similar to itself, also notice that the similarity relation is not transitive. For example, if the words `a` and `b` are similar, and the words `b` and `c` are similar, `a` and `c` are **not necessarily similar**.

**Example 1:**

**Input:** sentence1 = \[ ""great "", ""acting "", ""skills ""\], sentence2 = \[ ""fine "", ""drama "", ""talent ""\], similarPairs = \[\[ ""great "", ""fine ""\],\[ ""drama "", ""acting ""\],\[ ""skills "", ""talent ""\]\]
**Output:** true
**Explanation:** The two sentences have the same length and each word i of sentence1 is also similar to the corresponding word in sentence2.

**Example 2:**

**Input:** sentence1 = \[ ""great ""\], sentence2 = \[ ""great ""\], similarPairs = \[\]
**Output:** true
**Explanation:** A word is similar to itself.

**Example 3:**

**Input:** sentence1 = \[ ""great ""\], sentence2 = \[ ""doubleplus "", ""good ""\], similarPairs = \[\[ ""great "", ""doubleplus ""\]\]
**Output:** false
**Explanation:** As they don't have the same length, we return false.

**Constraints:**

*   `1 <= sentence1.length, sentence2.length <= 1000`
*   `1 <= sentence1[i].length, sentence2[i].length <= 20`
*   `sentence1[i]` and `sentence2[i]` consist of English letters.
*   `0 <= similarPairs.length <= 1000`
*   `similarPairs[i].length == 2`
*   `1 <= xi.length, yi.length <= 20`
*   `xi` and `yi` consist of lower-case and upper-case English letters.
*   All the pairs `(xi, yi)` are **distinct**.","```python
from collections import defaultdict

def areSentencesSimilar(sentence1, sentence2, similarPairs):
    if len(sentence1) != len(sentence2): return False
    similarityMap = defaultdict(set)
    for pair in similarPairs:
        similarityMap[pair[0]].add(pair[1])
        similarityMap[pair[1]].add(pair[0])
    for i in range(len(sentence1)):
        if sentence1[i] != sentence2[i] and sentence2[i] not in similarityMap[sentence1[i]]:
            return False
    return True
```

"
Largest Number At Least Twice of Others,Easy,"You are given an integer array `nums` where the largest integer is **unique**.

Determine whether the largest element in the array is **at least twice** as much as every other number in the array. If it is, return _the **index** of the largest element, or return_ `-1` _otherwise_.

**Example 1:**

**Input:** nums = \[3,6,1,0\]
**Output:** 1
**Explanation:** 6 is the largest integer.
For every other number in the array x, 6 is at least twice as big as x.
The index of value 6 is 1, so we return 1.

**Example 2:**

**Input:** nums = \[1,2,3,4\]
**Output:** -1
**Explanation:** 4 is less than twice the value of 3, so we return -1.

**Constraints:**

*   `2 <= nums.length <= 50`
*   `0 <= nums[i] <= 100`
*   The largest element in `nums` is unique.","```python
def minCostClimbingStairs(cost):
    for i in range(2, len(cost)):
        cost[i] += min(cost[i-1], cost[i-2])
    return min(cost[-1], cost[-2])
```
"
Shortest Completing Word,Easy,"Given a string `licensePlate` and an array of strings `words`, find the **shortest completing** word in `words`.

A **completing** word is a word that **contains all the letters** in `licensePlate`. **Ignore numbers and spaces** in `licensePlate`, and treat letters as **case insensitive**. If a letter appears more than once in `licensePlate`, then it must appear in the word the same number of times or more.

For example, if `licensePlate` `= ""aBc 12c ""`, then it contains letters `'a'`, `'b'` (ignoring case), and `'c'` twice. Possible **completing** words are `""abccdef ""`, `""caaacab ""`, and `""cbca ""`.

Return _the shortest **completing** word in_ `words`_._ It is guaranteed an answer exists. If there are multiple shortest **completing** words, return the **first** one that occurs in `words`.

**Example 1:**

**Input:** licensePlate =  ""1s3 PSt "", words = \[ ""step "", ""steps "", ""stripe "", ""stepple ""\]
**Output:**  ""steps ""
**Explanation:** licensePlate contains letters 's', 'p', 's' (ignoring case), and 't'.
 ""step "" contains 't' and 'p', but only contains 1 's'.
 ""steps "" contains 't', 'p', and both 's' characters.
 ""stripe "" is missing an 's'.
 ""stepple "" is missing an 's'.
Since  ""steps "" is the only word containing all the letters, that is the answer.

**Example 2:**

**Input:** licensePlate =  ""1s3 456 "", words = \[ ""looks "", ""pest "", ""stew "", ""show ""\]
**Output:**  ""pest ""
**Explanation:** licensePlate only contains the letter 's'. All the words contain 's', but among these  ""pest "",  ""stew "", and  ""show "" are shortest. The answer is  ""pest "" because it is the word that appears earliest of the 3.

**Constraints:**

*   `1 <= licensePlate.length <= 7`
*   `licensePlate` contains digits, letters (uppercase or lowercase), or space `' '`.
*   `1 <= words.length <= 1000`
*   `1 <= words[i].length <= 15`
*   `words[i]` consists of lower case English letters.","```python
def shortestCompletingWord(licensePlate: str, words: list[str]) -> str:
    from collections import Counter

    lp_count = Counter(c.lower() for c in licensePlate if c.isalpha())

    result = """"
    for word in words:
        word_count = Counter(word)

        valid = all(word_count[ch] >= count for ch, count in lp_count.items())

        if valid and (not result or len(word) < len(result)):
            result = word

    return result
```

"
Find Anagram Mappings,Easy,"You are given two integer arrays `nums1` and `nums2` where `nums2` is **an anagram** of `nums1`. Both arrays may contain duplicates.

Return _an index mapping array_ `mapping` _from_ `nums1` _to_ `nums2` _where_ `mapping[i] = j` _means the_ `ith` _element in_ `nums1` _appears in_ `nums2` _at index_ `j`. If there are multiple answers, return **any of them**.

An array `a` is **an anagram** of an array `b` means `b` is made by randomizing the order of the elements in `a`.

**Example 1:**

**Input:** nums1 = \[12,28,46,32,50\], nums2 = \[50,12,32,46,28\]
**Output:** \[1,4,3,2,0\]
**Explanation:** As mapping\[0\] = 1 because the 0th element of nums1 appears at nums2\[1\], and mapping\[1\] = 4 because the 1st element of nums1 appears at nums2\[4\], and so on.

**Example 2:**

**Input:** nums1 = \[84,46\], nums2 = \[84,46\]
**Output:** \[0,1\]

**Constraints:**

*   `1 <= nums1.length <= 100`
*   `nums2.length == nums1.length`
*   `0 <= nums1[i], nums2[i] <= 105`
*   `nums2` is an anagram of `nums1`.","```python
def anagramMappings(nums1, nums2):
    num_map = {num: i for i, num in enumerate(nums2)}
    mapping = [num_map[num] for num in nums1]
    return mapping
```

"
Prime Number of Set Bits in Binary Representation,Easy,"Given two integers `left` and `right`, return _the **count** of numbers in the **inclusive** range_ `[left, right]` _having a **prime number of set bits** in their binary representation_.

Recall that the **number of set bits** an integer has is the number of `1`'s present when written in binary.

*   For example, `21` written in binary is `10101`, which has `3` set bits.

**Example 1:**

**Input:** left = 6, right = 10
**Output:** 4
**Explanation:**
6  -> 110 (2 set bits, 2 is prime)
7  -> 111 (3 set bits, 3 is prime)
8  -> 1000 (1 set bit, 1 is not prime)
9  -> 1001 (2 set bits, 2 is prime)
10 -> 1010 (2 set bits, 2 is prime)
4 numbers have a prime number of set bits.

**Example 2:**

**Input:** left = 10, right = 15
**Output:** 5
**Explanation:**
10 -> 1010 (2 set bits, 2 is prime)
11 -> 1011 (3 set bits, 3 is prime)
12 -> 1100 (2 set bits, 2 is prime)
13 -> 1101 (3 set bits, 3 is prime)
14 -> 1110 (3 set bits, 3 is prime)
15 -> 1111 (4 set bits, 4 is not prime)
5 numbers have a prime number of set bits.

**Constraints:**

*   `1 <= left <= right <= 106`
*   `0 <= right - left <= 104`","```python
def is_prime(n: int) -> bool:
    if n <= 1:
        return False
    if n <= 3:
        return True
    if n % 2 == 0 or n % 3 == 0:
        return False
    i = 5
    while i * i <= n:
        if n % i == 0 or n % (i + 2) == 0:
            return False
        i += 6
    return True

def count_prime_set_bits(left: int, right: int) -> int:
    return sum(is_prime(bin(i).count('1')) for i in range(left, right + 1))
```

"
Most Common Word,Easy,"Given a string `paragraph` and a string array of the banned words `banned`, return _the most frequent word that is not banned_. It is **guaranteed** there is **at least one word** that is not banned, and that the answer is **unique**.

The words in `paragraph` are **case-insensitive** and the answer should be returned in **lowercase**.

**Example 1:**

**Input:** paragraph =  ""Bob hit a ball, the hit BALL flew far after it was hit. "", banned = \[ ""hit ""\]
**Output:**  ""ball ""
**Explanation:** 
 ""hit "" occurs 3 times, but it is a banned word.
 ""ball "" occurs twice (and no other word does), so it is the most frequent non-banned word in the paragraph. 
Note that words in the paragraph are not case sensitive,
that punctuation is ignored (even if adjacent to words, such as  ""ball, ""), 
and that  ""hit "" isn't the answer even though it occurs more because it is banned.

**Example 2:**

**Input:** paragraph =  ""a. "", banned = \[\]
**Output:**  ""a ""

**Constraints:**

*   `1 <= paragraph.length <= 1000`
*   paragraph consists of English letters, space `' '`, or one of the symbols: `""!?',;. ""`.
*   `0 <= banned.length <= 100`
*   `1 <= banned[i].length <= 10`
*   `banned[i]` consists of only lowercase English letters.","```python
def minSwaps(nums1, nums2):
    n = len(nums1)
    noSwap = [float('inf')] * n
    doSwap = [float('inf')] * n
    noSwap[0] = 0
    doSwap[0] = 1

    for i in range(1, n):
        if nums1[i] > nums1[i - 1] and nums2[i] > nums2[i - 1]:
            noSwap[i] = noSwap[i - 1]
            doSwap[i] = doSwap[i - 1] + 1
        if nums1[i] > nums2[i - 1] and nums2[i] > nums1[i - 1]:
            noSwap[i] = min(noSwap[i], doSwap[i - 1])
            doSwap[i] = min(doSwap[i], noSwap[i - 1] + 1)

    return min(noSwap[n - 1], doSwap[n - 1])
```
"
Shortest Distance to a Character,Easy,"Given a string `s` and a character `c` that occurs in `s`, return _an array of integers_ `answer` _where_ `answer.length == s.length` _and_ `answer[i]` _is the **distance** from index_ `i` _to the **closest** occurrence of character_ `c` _in_ `s`.

The **distance** between two indices `i` and `j` is `abs(i - j)`, where `abs` is the absolute value function.

**Example 1:**

**Input:** s =  ""loveleetcode "", c =  ""e ""
**Output:** \[3,2,1,0,1,0,0,1,2,2,1,0\]
**Explanation:** The character 'e' appears at indices 3, 5, 6, and 11 (0-indexed).
The closest occurrence of 'e' for index 0 is at index 3, so the distance is abs(0 - 3) = 3.
The closest occurrence of 'e' for index 1 is at index 3, so the distance is abs(1 - 3) = 2.
For index 4, there is a tie between the 'e' at index 3 and the 'e' at index 5, but the distance is still the same: abs(4 - 3) == abs(4 - 5) = 1.
The closest occurrence of 'e' for index 8 is at index 6, so the distance is abs(8 - 6) = 2.

**Example 2:**

**Input:** s =  ""aaab "", c =  ""b ""
**Output:** \[3,2,1,0\]

**Constraints:**

*   `1 <= s.length <= 104`
*   `s[i]` and `c` are lowercase English letters.
*   It is guaranteed that `c` occurs at least once in `s`.","```python
from typing import List

def hitBricks(grid: List[List[int]], hits: List[List[int]]) -> List[int]:
    def dfs(x, y):
        if not (0 <= x < m) or not (0 <= y < n) or grid[x][y] <= 0:
            return 0
        grid[x][y] = -1
        return 1 + sum(dfs(x + dx, y + dy) for dx, dy in directions)

    m, n = len(grid), len(grid[0])
    directions = [(0, 1), (1, 0), (0, -1), (-1, 0)]

    for x, y in hits:
        grid[x][y] -= 1

    for j in range(n):
        if grid[0][j] == 1:
            dfs(0, j)

    result = []
    for x, y in hits:
        grid[x][y] += 1
        if grid[x][y] != 1:
            result.append(0)
            continue
        for dx, dy in directions:
            if dfs(x + dx, y + dy) != 0:
                result.append(dfs(x, y) - 1)
                break
        else:
            result.append(0)

    return result
```
"
Goat Latin,Easy,"You are given a string `sentence` that consist of words separated by spaces. Each word consists of lowercase and uppercase letters only.

We would like to convert the sentence to ""Goat Latin "" (a made-up language similar to Pig Latin.) The rules of Goat Latin are as follows:

*   If a word begins with a vowel (`'a'`, `'e'`, `'i'`, `'o'`, or `'u'`), append `""ma ""` to the end of the word.
    *   For example, the word `""apple ""` becomes `""applema ""`.
*   If a word begins with a consonant (i.e., not a vowel), remove the first letter and append it to the end, then add `""ma ""`.
    *   For example, the word `""goat ""` becomes `""oatgma ""`.
*   Add one letter `'a'` to the end of each word per its word index in the sentence, starting with `1`.
    *   For example, the first word gets `""a ""` added to the end, the second word gets `""aa ""` added to the end, and so on.

Return _the final sentence representing the conversion from sentence to Goat Latin_.

**Example 1:**

**Input:** sentence = ""I speak Goat Latin""
**Output:** ""Imaa peaksmaaa oatGmaaaa atinLmaaaaa""

**Example 2:**

**Input:** sentence = ""The quick brown fox jumped over the lazy dog""
**Output:** ""heTmaa uickqmaaa rownbmaaaa oxfmaaaaa umpedjmaaaaaa overmaaaaaaa hetmaaaaaaaa azylmaaaaaaaaa ogdmaaaaaaaaaa""

**Constraints:**

*   `1 <= sentence.length <= 150`
*   `sentence` consists of English letters and spaces.
*   `sentence` has no leading or trailing spaces.
*   All the words in `sentence` are separated by a single space.","```python
def number_of_lines(widths, s):
    lines = 1
    current_pixel = 0
    for c in s:
        letter_pixels = widths[ord(c) - ord('a')]
        if current_pixel + letter_pixels > 100:
            lines += 1
            current_pixel = 0
        current_pixel += letter_pixels
    return [lines, current_pixel]
```

"
Positions of Large Groups,Easy,"In a string `s` of lowercase letters, these letters form consecutive groups of the same character.

For example, a string like `s = ""abbxxxxzyy ""` has the groups `""a ""`, `""bb ""`, `""xxxx ""`, `""z ""`, and `""yy ""`.

A group is identified by an interval `[start, end]`, where `start` and `end` denote the start and end indices (inclusive) of the group. In the above example, `""xxxx ""` has the interval `[3,6]`.

A group is considered **large** if it has 3 or more characters.

Return _the intervals of every **large** group sorted in **increasing order by start index**_.

**Example 1:**

**Input:** s =  ""abbxxxxzzy ""
**Output:** \[\[3,6\]\]
**Explanation:** `""xxxx "" is the only` large group with start index 3 and end index 6.

**Example 2:**

**Input:** s =  ""abc ""
**Output:** \[\]
**Explanation:** We have groups  ""a "",  ""b "", and  ""c "", none of which are large groups.

**Example 3:**

**Input:** s =  ""abcdddeeeeaabbbcd ""
**Output:** \[\[3,5\],\[6,9\],\[12,14\]\]
**Explanation:** The large groups are  ""ddd "",  ""eeee "", and  ""bbb "".

**Constraints:**

*   `1 <= s.length <= 1000`
*   `s` contains lowercase English letters only.","```python
from itertools import combinations

def largestTriangleArea(points):
    return max(0.5 * abs(x1 * (y2 - y3) + x2 * (y3 - y1) + x3 * (y1 - y2)) for (x1, y1), (x2, y2), (x3, y3) in combinations(points, 3))
```
"
Buddy Strings,Easy,"Given two strings `s` and `goal`, return `true` _if you can swap two letters in_ `s` _so the result is equal to_ `goal`_, otherwise, return_ `false`_._

Swapping letters is defined as taking two indices `i` and `j` (0-indexed) such that `i != j` and swapping the characters at `s[i]` and `s[j]`.

*   For example, swapping at indices `0` and `2` in `""abcd ""` results in `""cbad ""`.

**Example 1:**

**Input:** s =  ""ab "", goal =  ""ba ""
**Output:** true
**Explanation:** You can swap s\[0\] = 'a' and s\[1\] = 'b' to get  ""ba "", which is equal to goal.

**Example 2:**

**Input:** s =  ""ab "", goal =  ""ab ""
**Output:** false
**Explanation:** The only letters you can swap are s\[0\] = 'a' and s\[1\] = 'b', which results in  ""ba "" != goal.

**Example 3:**

**Input:** s =  ""aa "", goal =  ""aa ""
**Output:** true
**Explanation:** You can swap s\[0\] = 'a' and s\[1\] = 'a' to get  ""aa "", which is equal to goal.

**Constraints:**

*   `1 <= s.length, goal.length <= 2 * 104`
*   `s` and `goal` consist of lowercase letters.","#

```javascript
class MyCircularDeque {
    constructor(k) {
        this.buffer = new Array(k);
        this.front = 0;
        this.rear = 0;
        this.size = 0;
    }

    insertFront(value) {
        if (this.size == this.buffer.length) return false;
        this.front = (this.front - 1 + this.buffer.length) % this.buffer.length;
        this.buffer[this.front] = value;
        this.size++;
        return true;
    }

    insertLast(value) {
        if (this.size == this.buffer.length) return false;
        this.buffer[this.rear] = value;
        this.rear = (this.rear + 1) % this.buffer.length;
        this.size++;
        return true;
    }

    deleteFront() {
        if (this.size == 0) return false;
        this.front = (this.front + 1) % this.buffer.length;
        this.size--;
        return true;
    }

    deleteLast() {
        if (this.size == 0) return false;
        this.rear = (this.rear - 1 + this.buffer.length) % this.buffer.length;
        this.size--;
        return true;
    }

    getFront() {
        if (this.size == 0) return -1;
        return this.buffer[this.front];
    }

    getRear() {
        if (this.size == 0) return -1;
        return this.buffer[(this.rear - 1 + this.buffer.length) % this.buffer.length];
    }

    isEmpty() {
        return this.size == 0;
    }

    isFull() {
        return this.size == this.buffer.length;
    }
}
```

#"
Lemonade Change,Easy,"At a lemonade stand, each lemonade costs `$5`. Customers are standing in a queue to buy from you and order one at a time (in the order specified by bills). Each customer will only buy one lemonade and pay with either a `$5`, `$10`, or `$20` bill. You must provide the correct change to each customer so that the net transaction is that the customer pays `$5`.

Note that you do not have any change in hand at first.

Given an integer array `bills` where `bills[i]` is the bill the `ith` customer pays, return `true` _if you can provide every customer with the correct change, or_ `false` _otherwise_.

**Example 1:**

**Input:** bills = \[5,5,5,10,20\]
**Output:** true
**Explanation:** 
From the first 3 customers, we collect three $5 bills in order.
From the fourth customer, we collect a $10 bill and give back a $5.
From the fifth customer, we give a $10 bill and a $5 bill.
Since all customers got correct change, we output true.

**Example 2:**

**Input:** bills = \[5,5,10,10,20\]
**Output:** false
**Explanation:** 
From the first two customers in order, we collect two $5 bills.
For the next two customers in order, we collect a $10 bill and give back a $5 bill.
For the last customer, we can not give the change of $15 back because we only have two $10 bills.
Since not every customer received the correct change, the answer is false.

**Constraints:**

*   `1 <= bills.length <= 105`
*   `bills[i]` is either `5`, `10`, or `20`.","```python
class MyCircularQueue:

    def __init__(self, k: int):
        self.data = [0] * k
        self.head = 0
        self.tail = -1
        self.size = 0
        self.capacity = k

    def enQueue(self, value: int) -> bool:
        if self.isFull():
            return False
        self.tail = (self.tail + 1) % self.capacity
        self.data[self.tail] = value
        self.size += 1
        return True

    def deQueue(self) -> bool:
        if self.isEmpty():
            return False
        self.head = (self.head + 1) % self.capacity
        self.size -= 1
        return True

    def Front(self) -> int:
        if self.isEmpty():
            return -1
        return self.data[self.head]

    def Rear(self) -> int:
        if self.isEmpty():
            return -1
        return self.data[self.tail]

    def isEmpty(self) -> bool:
        return self.size == 0

    def isFull(self) -> bool:
        return self.size == self.capacity
```
"
Middle of the Linked List,Easy,"Given the `head` of a singly linked list, return _the middle node of the linked list_.

If there are two middle nodes, return **the second middle** node.

**Example 1:**

**Input:** head = \[1,2,3,4,5\]
**Output:** \[3,4,5\]
**Explanation:** The middle node of the list is node 3.

**Example 2:**

**Input:** head = \[1,2,3,4,5,6\]
**Output:** \[4,5,6\]
**Explanation:** Since the list has two middle nodes with values 3 and 4, we return the second one.

**Constraints:**

*   The number of nodes in the list is in the range `[1, 100]`.
*   `1 <= Node.val <= 100`","```python
from collections import Counter

def is_n_straight_hand(hand, group_size):
    counts = Counter(hand)

    for card in sorted(counts):
        if counts[card] > 0:
            for i in range(group_size - 1, -1, -1):
                if counts[card + i] < counts[card]:
                    return False
                counts[card + i] -= counts[card]

    return True
```

"
Projection Area of 3D Shapes,Easy,"You are given an `n x n` `grid` where we place some `1 x 1 x 1` cubes that are axis-aligned with the `x`, `y`, and `z` axes.

Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of the cell `(i, j)`.

We view the projection of these cubes onto the `xy`, `yz`, and `zx` planes.

A **projection** is like a shadow, that maps our **3-dimensional** figure to a **2-dimensional** plane. We are viewing the ""shadow "" when looking at the cubes from the top, the front, and the side.

Return _the total area of all three projections_.

**Example 1:**

**Input:** grid = \[\[1,2\],\[3,4\]\]
**Output:** 17
**Explanation:** Here are the three projections ( ""shadows "") of the shape made with each axis-aligned plane.

**Example 2:**

**Input:** grid = \[\[2\]\]
**Output:** 5

**Example 3:**

**Input:** grid = \[\[1,0\],\[0,2\]\]
**Output:** 8

**Constraints:**

*   `n == grid.length == grid[i].length`
*   `1 <= n <= 50`
*   `0 <= grid[i][j] <= 50`","```python
def carFleet(target: int, position: List[int], speed: List[int]) -> int:
    cars = sorted(zip(position, speed), reverse=True)
    fleets = 0
    last_arrival = -1

    for pos, sp in cars:
        arrival = (target - pos) / sp
        if arrival > last_arrival:
            fleets += 1
            last_arrival = arrival

    return fleets
```

"
Surface Area of 3D Shapes,Easy,"You are given an `n x n` `grid` where you have placed some `1 x 1 x 1` cubes. Each value `v = grid[i][j]` represents a tower of `v` cubes placed on top of cell `(i, j)`.

After placing these cubes, you have decided to glue any directly adjacent cubes to each other, forming several irregular 3D shapes.

Return _the total surface area of the resulting shapes_.

**Note:** The bottom face of each shape counts toward its surface area.

**Example 1:**

**Input:** grid = \[\[1,2\],\[3,4\]\]
**Output:** 34

**Example 2:**

**Input:** grid = \[\[1,1,1\],\[1,0,1\],\[1,1,1\]\]
**Output:** 32

**Example 3:**

**Input:** grid = \[\[2,2,2\],\[2,1,2\],\[2,2,2\]\]
**Output:** 46

**Constraints:**

*   `n == grid.length == grid[i].length`
*   `1 <= n <= 50`
*   `0 <= grid[i][j] <= 50`","```python
from collections import deque

def shortest_subarray(nums, k):
    n = len(nums)
    prefix_sum = [0] * (n + 1)
    for i in range(n):
        prefix_sum[i + 1] = prefix_sum[i] + nums[i]

    res = n + 1
    dq = deque()
    for i in range(n + 1):
        while dq and prefix_sum[i] - prefix_sum[dq[0]] >= k:
            res = min(res, i - dq.popleft())
        while dq and prefix_sum[i] <= prefix_sum[dq[-1]]:
            dq.pop()
        dq.append(i)

    return res if res <= n else -1
```
"
Sort Array By Parity,Easy,"Given an integer array `nums`, move all the even integers at the beginning of the array followed by all the odd integers.

Return _**any array** that satisfies this condition_.

**Example 1:**

**Input:** nums = \[3,1,2,4\]
**Output:** \[2,4,3,1\]
**Explanation:** The outputs \[4,2,3,1\], \[2,4,1,3\], and \[4,2,1,3\] would also be accepted.

**Example 2:**

**Input:** nums = \[0\]
**Output:** \[0\]

**Constraints:**

*   `1 <= nums.length <= 5000`
*   `0 <= nums[i] <= 5000`","```python
def lenLongestFibSubseq(arr):
    index = {x: i for i, x in enumerate(arr)}

    longest = dict()
    ans = 0

    for k, z in enumerate(arr):
        for j, y in enumerate(arr[:k]):
            i = index.get(z - y, None)
            if i is not None and i < j:
                longest[j, k] = longest.get((i, j), 1) + 1
                ans = max(ans, longest[j, k] + 1)

    return ans if ans >= 3 else 0
```
"
Reverse Only Letters,Easy,"Given a string `s`, reverse the string according to the following rules:

*   All the characters that are not English letters remain in the same position.
*   All the English letters (lowercase or uppercase) should be reversed.

Return `s` _after reversing it_.

**Example 1:**

**Input:** s = ""ab-cd""
**Output:** ""dc-ba""

**Example 2:**

**Input:** s = ""a-bC-dEf-ghIj""
**Output:** ""j-Ih-gfE-dCba""

**Example 3:**

**Input:** s = ""Test1ng-Leet=code-Q!""
**Output:** ""Qedo1ct-eeLg=ntse-T!""

**Constraints:**

*   `1 <= s.length <= 100`
*   `s` consists of characters with ASCII values in the range `[33, 122]`.
*   `s` does not contain `'\ ""'` or `'\\'`.","```python
def num_rescue_boats(people, limit):
    people.sort()
    left, right = 0, len(people) - 1
    boats = 0
    while left <= right:
        if people[left] + people[right] <= limit:
            left += 1
        right -= 1
        boats += 1
    return boats
```
"
Long Pressed Name,Easy,"Your friend is typing his `name` into a keyboard. Sometimes, when typing a character `c`, the key might get _long pressed_, and the character will be typed 1 or more times.

You examine the `typed` characters of the keyboard. Return `True` if it is possible that it was your friends name, with some characters (possibly none) being long pressed.

**Example 1:**

**Input:** name =  ""alex "", typed =  ""aaleex ""
**Output:** true
**Explanation:** 'a' and 'e' in 'alex' were long pressed.

**Example 2:**

**Input:** name =  ""saeed "", typed =  ""ssaaedd ""
**Output:** false
**Explanation:** 'e' must have been pressed twice, but it was not in the typed output.

**Constraints:**

*   `1 <= name.length, typed.length <= 1000`
*   `name` and `typed` consist of only lowercase English letters.","```python
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Solution:
    def constructFromPrePost(self, pre, post):
        def buildTree(preStart, preEnd, postStart, postEnd):
            if preStart == preEnd:
                return None

            root = TreeNode(pre[preStart])

            if preStart + 1 == preEnd:
                return root

            leftRoot = pre[preStart + 1]

            leftSize = 0
            for i in range(postStart, postEnd):
                if post[i] == leftRoot:
                    leftSize = i - postStart + 1
                    break

            root.left = buildTree(preStart + 1, preStart + 1 + leftSize, postStart, postStart + leftSize)
            root.right = buildTree(preStart + 1 + leftSize, preEnd, postStart + leftSize, postEnd - 1)

            return root

        return buildTree(0, len(pre), 0, len(post))
```
"
Unique Email Addresses,Easy,"Every **valid email** consists of a **local name** and a **domain name**, separated by the `'@'` sign. Besides lowercase letters, the email may contain one or more `'.'` or `'+'`.

*   For example, in `""alice@leetcode.com ""`, `""alice ""` is the **local name**, and `""leetcode.com ""` is the **domain name**.

If you add periods `'.'` between some characters in the **local name** part of an email address, mail sent there will be forwarded to the same address without dots in the local name. Note that this rule **does not apply** to **domain names**.

*   For example, `""alice.z@leetcode.com ""` and `""alicez@leetcode.com ""` forward to the same email address.

If you add a plus `'+'` in the **local name**, everything after the first plus sign **will be ignored**. This allows certain emails to be filtered. Note that this rule **does not apply** to **domain names**.

*   For example, `""m.y+name@email.com ""` will be forwarded to `""my@email.com ""`.

It is possible to use both of these rules at the same time.

Given an array of strings `emails` where we send one email to each `emails[i]`, return _the number of different addresses that actually receive mails_.

**Example 1:**

**Input:** emails = \[ ""test.email+alex@leetcode.com "", ""test.e.mail+bob.cathy@leetcode.com "", ""testemail+david@lee.tcode.com ""\]
**Output:** 2
**Explanation:**  ""testemail@leetcode.com "" and  ""testemail@lee.tcode.com "" actually receive mails.

**Example 2:**

**Input:** emails = \[ ""a@leetcode.com "", ""b@leetcode.com "", ""c@leetcode.com ""\]
**Output:** 3

**Constraints:**

*   `1 <= emails.length <= 100`
*   `1 <= emails[i].length <= 100`
*   `emails[i]` consist of lowercase English letters, `'+'`, `'.'` and `'@'`.
*   Each `emails[i]` contains exactly one `'@'` character.
*   All local and domain names are non-empty.
*   Local names do not start with a `'+'` character.
*   Domain names end with the `"".com ""` suffix.","```python
def num_special_equivalent_groups(words):
    groups = set()

    for word in words:
        evens = """".join(sorted(word[0::2]))
        odds = """".join(sorted(word[1::2]))

        groups.add(evens + odds)

    return len(groups)
```

"
Range Sum of BST,Easy,"Given the `root` node of a binary search tree and two integers `low` and `high`, return _the sum of values of all nodes with a value in the **inclusive** range_ `[low, high]`.

**Example 1:**

**Input:** root = \[10,5,15,3,7,null,18\], low = 7, high = 15
**Output:** 32
**Explanation:** Nodes 7, 10, and 15 are in the range \[7, 15\]. 7 + 10 + 15 = 32.

**Example 2:**

**Input:** root = \[10,5,15,3,7,13,18,1,null,6\], low = 6, high = 10
**Output:** 23
**Explanation:** Nodes 6, 7, and 10 are in the range \[6, 10\]. 6 + 7 + 10 = 23.

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 2 * 104]`.
*   `1 <= Node.val <= 105`
*   `1 <= low <= high <= 105`
*   All `Node.val` are **unique**.","```python
from bisect import bisect_right

def num_digits_less_than_n(digits: List[int], n: int) -> int:
    ans = 0
    factor = 1
    n_str = str(n)
    for i in range(len(n_str) - 1, -1, -1):
        ans += bisect_right(digits, int(n_str[i])) * factor
        factor *= len(digits)
    return ans
```
"
Valid Mountain Array,Easy,"Given an array of integers `arr`, return _`true` if and only if it is a valid mountain array_.

Recall that arr is a mountain array if and only if:

*   `arr.length >= 3`
*   There exists some `i` with `0 < i < arr.length - 1` such that:
    *   `arr[0] < arr[1] < ... < arr[i - 1] < arr[i]`
    *   `arr[i] > arr[i + 1] > ... > arr[arr.length - 1]`

**Example 1:**

**Input:** arr = \[2,1\]
**Output:** false

**Example 2:**

**Input:** arr = \[3,5,5\]
**Output:** false

**Example 3:**

**Input:** arr = \[0,3,2,1\]
**Output:** true

**Constraints:**

*   `1 <= arr.length <= 104`
*   `0 <= arr[i] <= 104`","```python
def move_even_odd(nums):
    even_index = 0
    odd_index = len(nums) - 1

    while even_index < odd_index:
        if nums[even_index] % 2 == 0:
            even_index += 1
        else:
            nums[even_index], nums[odd_index] = nums[odd_index], nums[even_index]
            odd_index -= 1

    return nums
```
"
Delete Columns to Make Sorted,Easy,"You are given an array of `n` strings `strs`, all of the same length.

The strings can be arranged such that there is one on each line, making a grid.

*   For example, `strs = [ ""abc "", ""bce "", ""cae ""]` can be arranged as follows:

abc
bce
cae

You want to **delete** the columns that are **not sorted lexicographically**. In the above example (**0-indexed**), columns 0 (`'a'`, `'b'`, `'c'`) and 2 (`'c'`, `'e'`, `'e'`) are sorted, while column 1 (`'b'`, `'c'`, `'a'`) is not, so you would delete column 1.

Return _the number of columns that you will delete_.

**Example 1:**

**Input:** strs = \[ ""cba "", ""daf "", ""ghi ""\]
**Output:** 1
**Explanation:** The grid looks as follows:
  cba
  daf
  ghi
Columns 0 and 2 are sorted, but column 1 is not, so you only need to delete 1 column.

**Example 2:**

**Input:** strs = \[ ""a "", ""b ""\]
**Output:** 0
**Explanation:** The grid looks as follows:
  a
  b
Column 0 is the only column and is sorted, so you will not delete any columns.

**Example 3:**

**Input:** strs = \[ ""zyx "", ""wvu "", ""tsr ""\]
**Output:** 3
**Explanation:** The grid looks as follows:
  zyx
  wvu
  tsr
All 3 columns are not sorted, so you will delete all 3.

**Constraints:**

*   `n == strs.length`
*   `1 <= n <= 100`
*   `1 <= strs[i].length <= 1000`
*   `strs[i]` consists of lowercase English letters.","```python
def minDifference(nums, k):
    if len(nums) <= 1: return 0
    nums.sort()
    min_diff = nums[-1] - nums[0]
    for i in range(1, len(nums)):
        high = max(nums[i-1] + k, nums[-1] - k)
        low = min(nums[i] - k, nums[0] + k)
        min_diff = min(min_diff, high - low)
    return min_diff
```
"
Univalued Binary Tree,Easy,"A binary tree is **uni-valued** if every node in the tree has the same value.

Given the `root` of a binary tree, return `true` _if the given tree is **uni-valued**, or_ `false` _otherwise._

**Example 1:**

**Input:** root = \[1,1,1,1,1,null,1\]
**Output:** true

**Example 2:**

**Input:** root = \[2,2,2,5,2\]
**Output:** false

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 100]`.
*   `0 <= Node.val < 100`","```python
def num_unique_emails(emails):
    unique_emails = set()

    for email in emails:
        local_name, domain_name = email.split(""@"")
        local_name = local_name.split(""+"")[0]
        local_name = local_name.replace(""."", """")

        unique_emails.add(local_name + ""@"" + domain_name)

    return len(unique_emails)
```
"
Largest Perimeter Triangle,Easy,"Given an integer array `nums`, return _the largest perimeter of a triangle with a non-zero area, formed from three of these lengths_. If it is impossible to form any triangle of a non-zero area, return `0`.

**Example 1:**

**Input:** nums = \[2,1,2\]
**Output:** 5
**Explanation:** You can form a triangle with three side lengths: 1, 2, and 2.

**Example 2:**

**Input:** nums = \[1,2,1,10\]
**Output:** 0
**Explanation:** 
You cannot use the side lengths 1, 1, and 2 to form a triangle.
You cannot use the side lengths 1, 1, and 10 to form a triangle.
You cannot use the side lengths 1, 2, and 10 to form a triangle.
As we cannot use any three side lengths to form a triangle of non-zero area, we return 0.

**Constraints:**

*   `3 <= nums.length <= 104`
*   `1 <= nums[i] <= 106`","```python
def min_area_rect(points):
    point_set = {(x, y) for x, y in points}
    min_area = float('inf')

    for p1 in point_set:
        for p2 in point_set:
            if p1[0] != p2[0] and p1[1] != p2[1]:
                if (p1[0], p2[1]) in point_set and (p2[0], p1[1]) in point_set:
                    min_area = min(min_area, abs((p1[0] - p2[0]) * (p1[1] - p2[1])))

    return min_area if min_area != float('inf') else 0
```

"
Add to Array-Form of Integer,Easy,"The **array-form** of an integer `num` is an array representing its digits in left to right order.

*   For example, for `num = 1321`, the array form is `[1,3,2,1]`.

Given `num`, the **array-form** of an integer, and an integer `k`, return _the **array-form** of the integer_ `num + k`.

**Example 1:**

**Input:** num = \[1,2,0,0\], k = 34
**Output:** \[1,2,3,4\]
**Explanation:** 1200 + 34 = 1234

**Example 2:**

**Input:** num = \[2,7,4\], k = 181
**Output:** \[4,5,5\]
**Explanation:** 274 + 181 = 455

**Example 3:**

**Input:** num = \[2,1,5\], k = 806
**Output:** \[1,0,2,1\]
**Explanation:** 215 + 806 = 1021

**Constraints:**

*   `1 <= num.length <= 104`
*   `0 <= num[i] <= 9`
*   `num` does not contain any leading zeros except for the zero itself.
*   `1 <= k <= 104`","```python
from collections import defaultdict

def largestComponentSize(nums):
    def primes(n):
        for i in range(2, int(n**0.5) + 1):
            if n % i == 0:
                return i
        return n

    def dfs(node, visited, graph):
        if node in visited:
            return 0
        visited.add(node)
        size = 1
        for neighbor in graph[node]:
            size += dfs(neighbor, visited, graph)
        return size

    graph = defaultdict(set)
    visited = set()

    for num in nums:
        prime = primes(num)
        graph[prime].add(num)
        if num != prime:
            graph[num].add(prime)

    count = 0
    for num in nums:
        count = max(count, dfs(num, visited, graph))

    return count
```
"
Cousins in Binary Tree,Easy,"Given the `root` of a binary tree with unique values and the values of two different nodes of the tree `x` and `y`, return `true` _if the nodes corresponding to the values_ `x` _and_ `y` _in the tree are **cousins**, or_ `false` _otherwise._

Two nodes of a binary tree are **cousins** if they have the same depth with different parents.

Note that in a binary tree, the root node is at the depth `0`, and children of each depth `k` node are at the depth `k + 1`.

**Example 1:**

**Input:** root = \[1,2,3,4\], x = 4, y = 3
**Output:** false

**Example 2:**

**Input:** root = \[1,2,3,null,4,null,5\], x = 5, y = 4
**Output:** true

**Example 3:**

**Input:** root = \[1,2,3,null,4\], x = 2, y = 3
**Output:** false

**Constraints:**

*   The number of nodes in the tree is in the range `[2, 100]`.
*   `1 <= Node.val <= 100`
*   Each node has a **unique** value.
*   `x != y`
*   `x` and `y` are exist in the tree.","```python
def tallestBillboard(rods):
    n = len(rods)
    totalLength = sum(rods)
    dp = [[-1] * (totalLength + 1) for _ in range(n + 1)]
    dp[0][0] = 0
    
    for i in range(1, n + 1):
        for j in range(totalLength + 1):
            dp[i][j] = dp[i - 1][j]
            if rods[i - 1] <= j:
                dp[i][j] = max(dp[i][j], dp[i - 1][j - rods[i - 1]] + rods[i - 1])
            if rods[i - 1] <= totalLength - j:
                dp[i][j] = max(dp[i][j], dp[i - 1][j + rods[i - 1]])
                
    return dp[n][0] // 2
```

"
Find Common Characters,Easy,"Given a string array `words`, return _an array of all characters that show up in all strings within the_ `words` _(including duplicates)_. You may return the answer in **any order**.

**Example 1:**

**Input:** words = \[""bella"",""label"",""roller""\]
**Output:** \[""e"",""l"",""l""\]

**Example 2:**

**Input:** words = \[""cool"",""lock"",""cook""\]
**Output:** \[""c"",""o""\]

**Constraints:**

*   `1 <= words.length <= 100`
*   `1 <= words[i].length <= 100`
*   `words[i]` consists of lowercase English letters.","
```javascript
function maxWidthRamp(nums) {
    const indices = [...Array(nums.length).keys()].sort((i, j) => {
        return nums[i] === nums[j] ? i - j : nums[i] - nums[j];
    });
    
    let maxWidth = 0;
    let minIndex = Infinity;
    for (const index of indices) {
        maxWidth = Math.max(maxWidth, index - minIndex);
        minIndex = Math.min(minIndex, index);
    }
    
    return maxWidth;
}
```

"
Complement of Base 10 Integer,Easy,"The **complement** of an integer is the integer you get when you flip all the `0`'s to `1`'s and all the `1`'s to `0`'s in its binary representation.

*   For example, The integer `5` is `""101 ""` in binary and its **complement** is `""010 ""` which is the integer `2`.

Given an integer `n`, return _its complement_.

**Example 1:**

**Input:** n = 5
**Output:** 2
**Explanation:** 5 is  ""101 "" in binary, with complement  ""010 "" in binary, which is 2 in base-10.

**Example 2:**

**Input:** n = 7
**Output:** 0
**Explanation:** 7 is  ""111 "" in binary, with complement  ""000 "" in binary, which is 0 in base-10.

**Example 3:**

**Input:** n = 10
**Output:** 5
**Explanation:** 10 is  ""1010 "" in binary, with complement  ""0101 "" in binary, which is 5 in base-10.

**Constraints:**

*   `0 <= n < 109`

**Note:** This question is the same as 476: [https://leetcode.com/problems/number-complement/](https://leetcode.com/problems/number-complement/)","```python
def pancakeSort(arr):
    flips = []
    for size in range(len(arr), 1, -1):
        maxIdx = arr.index(max(arr[:size]))
        flips.extend([maxIdx + 1, size])
        arr[:maxIdx + 1] = reversed(arr[:maxIdx + 1])
        arr[:size] = reversed(arr[:size])
    return flips
```
"
Binary Prefix Divisible By 5,Easy,"You are given a binary array `nums` (**0-indexed**).

We define `xi` as the number whose binary representation is the subarray `nums[0..i]` (from most-significant-bit to least-significant-bit).

*   For example, if `nums = [1,0,1]`, then `x0 = 1`, `x1 = 2`, and `x2 = 5`.

Return _an array of booleans_ `answer` _where_ `answer[i]` _is_ `true` _if_ `xi` _is divisible by_ `5`.

**Example 1:**

**Input:** nums = \[0,1,1\]
**Output:** \[true,false,false\]
**Explanation:** The input numbers in binary are 0, 01, 011; which are 0, 1, and 3 in base-10.
Only the first number is divisible by 5, so answer\[0\] is true.

**Example 2:**

**Input:** nums = \[1,1,1\]
**Output:** \[false,false,false\]

**Constraints:**

*   `1 <= nums.length <= 105`
*   `nums[i]` is either `0` or `1`.","```python
def largestPerimeter(nums):
    nums.sort(reverse=True)

    for i in range(len(nums) - 2):
        if nums[i] < nums[i + 1] + nums[i + 2]:
            return nums[i] + nums[i + 1] + nums[i + 2]

    return 0
```
"
Sum of Root To Leaf Binary Numbers,Easy,"You are given the `root` of a binary tree where each node has a value `0` or `1`. Each root-to-leaf path represents a binary number starting with the most significant bit.

*   For example, if the path is `0 -> 1 -> 1 -> 0 -> 1`, then this could represent `01101` in binary, which is `13`.

For all leaves in the tree, consider the numbers represented by the path from the root to that leaf. Return _the sum of these numbers_.

The test cases are generated so that the answer fits in a **32-bits** integer.

**Example 1:**

**Input:** root = \[1,0,1,0,1,0,1\]
**Output:** 22
**Explanation:** (100) + (101) + (110) + (111) = 4 + 5 + 6 + 7 = 22

**Example 2:**

**Input:** root = \[0\]
**Output:** 0

**Constraints:**

*   The number of nodes in the tree is in the range `[1, 1000]`.
*   `Node.val` is `0` or `1`.","```python
def uniquePathsIII(grid):
    x, y, empty = 0, 0, 1
    for i in range(len(grid)):
        for j in range(len(grid[0])):
            if grid[i][j] == 1:
                x, y = i, j
            elif grid[i][j] == 0:
                empty += 1
    return dfs(grid, x, y, empty)

def dfs(grid, x, y, empty):
    if x < 0 or x >= len(grid) or y < 0 or y >= len(grid[0]) or grid[x][y] == -1:
        return 0
    if grid[x][y] == 2:
        return 1 if empty == -1 else 0
    grid[x][y] = -1
    paths = dfs(grid, x + 1, y, empty - 1) + dfs(grid, x - 1, y, empty - 1) + dfs(grid, x, y + 1, empty - 1) + dfs(grid, x, y - 1, empty - 1)
    grid[x][y] = 0
    return paths
```
"
Divisor Game,Easy,"Alice and Bob take turns playing a game, with Alice starting first.

Initially, there is a number `n` on the chalkboard. On each player's turn, that player makes a move consisting of:

*   Choosing any `x` with `0 < x < n` and `n % x == 0`.
*   Replacing the number `n` on the chalkboard with `n - x`.

Also, if a player cannot make a move, they lose the game.

Return `true` _if and only if Alice wins the game, assuming both players play optimally_.

**Example 1:**

**Input:** n = 2
**Output:** true
**Explanation:** Alice chooses 1, and Bob has no more moves.

**Example 2:**

**Input:** n = 3
**Output:** false
**Explanation:** Alice chooses 1, Bob chooses 1, and Alice has no more moves.

**Constraints:**

*   `1 <= n <= 1000`","```python
def mincostTickets(days, costs):
  travel_days = set(days)
  dp = [0] * 366

  for i in range(1, 366):
    if i not in travel_days:
      dp[i] = dp[i - 1]
    else:
      dp[i] = min(dp[i - 1] + costs[0],
                  dp[max(0, i - 7)] + costs[1],
                  dp[max(0, i - 30)] + costs[2])

  return dp[365]
```
"
Valid Boomerang,Easy,"Given an array `points` where `points[i] = [xi, yi]` represents a point on the **X-Y** plane, return `true` _if these points are a **boomerang**_.

A **boomerang** is a set of three points that are **all distinct** and **not in a straight line**.

**Example 1:**

**Input:** points = \[\[1,1\],\[2,3\],\[3,2\]\]
**Output:** true

**Example 2:**

**Input:** points = \[\[1,1\],\[2,2\],\[3,3\]\]
**Output:** false

**Constraints:**

*   `points.length == 3`
*   `points[i].length == 2`
*   `0 <= xi, yi <= 100`","```python
def min_k_bit_flips(nums, k):
    n, res, flipped = len(nums), 0, 0
    change = [0] * n
    for i in range(n - k + 1):
        flipped ^= change[i]
        if nums[i] == flipped:
            res += 1
            flipped ^= 1
            if i + k < n:
                change[i + k] ^= 1
    for i in range(n - k + 1, n):
        flipped ^= change[i]
        if nums[i] == flipped:
            return -1
    return res
```

"
Last Stone Weight,Easy,"You are given an array of integers `stones` where `stones[i]` is the weight of the `ith` stone.

We are playing a game with the stones. On each turn, we choose the **heaviest two stones** and smash them together. Suppose the heaviest two stones have weights `x` and `y` with `x <= y`. The result of this smash is:

*   If `x == y`, both stones are destroyed, and
*   If `x != y`, the stone of weight `x` is destroyed, and the stone of weight `y` has new weight `y - x`.

At the end of the game, there is **at most one** stone left.

Return _the weight of the last remaining stone_. If there are no stones left, return `0`.

**Example 1:**

**Input:** stones = \[2,7,4,1,8,1\]
**Output:** 1
**Explanation:** 
We combine 7 and 8 to get 1 so the array converts to \[2,4,1,1,1\] then,
we combine 2 and 4 to get 2 so the array converts to \[2,1,1,1\] then,
we combine 2 and 1 to get 1 so the array converts to \[1,1,1\] then,
we combine 1 and 1 to get 0 so the array converts to \[1\] then that's the value of the last stone.

**Example 2:**

**Input:** stones = \[1\]
**Output:** 1

**Constraints:**

*   `1 <= stones.length <= 30`
*   `1 <= stones[i] <= 1000`","```python
def longestOnes(nums, k):
    left, right, max_ones, zero_count = 0, 0, 0, 0
    while right < len(nums):
        if nums[right] == 0:
            zero_count += 1
        while zero_count > k:
            if nums[left] == 0:
                zero_count -= 1
            left += 1
        max_ones = max(max_ones, right - left + 1)
        right += 1
    return max_ones
```

"
Remove All Adjacent Duplicates In String,Easy,"You are given a string `s` consisting of lowercase English letters. A **duplicate removal** consists of choosing two **adjacent** and **equal** letters and removing them.

We repeatedly make **duplicate removals** on `s` until we no longer can.

Return _the final string after all such duplicate removals have been made_. It can be proven that the answer is **unique**.

**Example 1:**

**Input:** s =  ""abbaca ""
**Output:**  ""ca ""
**Explanation:** 
For example, in  ""abbaca "" we could remove  ""bb "" since the letters are adjacent and equal, and this is the only possible move.  The result of this move is that the string is  ""aaca "", of which only  ""aa "" is possible, so the final string is  ""ca "".

**Example 2:**

**Input:** s =  ""azxxzy ""
**Output:**  ""ay ""

**Constraints:**

*   `1 <= s.length <= 105`
*   `s` consists of lowercase English letters.","```python
import heapq

def maxSumAfterKOperations(nums, k):
    heapq.heapify(nums)
    for _ in range(k):
        current = heapq.heappop(nums)
        heapq.heappush(nums, -current)
    return sum(nums)
```
"
Confusing Number,Easy,"A **confusing number** is a number that when rotated `180` degrees becomes a different number with **each digit valid**.

We can rotate digits of a number by `180` degrees to form new digits.

*   When `0`, `1`, `6`, `8`, and `9` are rotated `180` degrees, they become `0`, `1`, `9`, `8`, and `6` respectively.
*   When `2`, `3`, `4`, `5`, and `7` are rotated `180` degrees, they become **invalid**.

Note that after rotating a number, we can ignore leading zeros.

*   For example, after rotating `8000`, we have `0008` which is considered as just `8`.

Given an integer `n`, return `true` _if it is a **confusing number**, or_ `false` _otherwise_.

**Example 1:**

**Input:** n = 6
**Output:** true
**Explanation:** We get 9 after rotating 6, 9 is a valid number, and 9 != 6.

**Example 2:**

**Input:** n = 89
**Output:** true
**Explanation:** We get 68 after rotating 89, 68 is a valid number and 68 != 89.

**Example 3:**

**Input:** n = 11
**Output:** false
**Explanation:** We get 11 after rotating 11, 11 is a valid number but the value remains the same, thus 11 is not a confusing number

**Constraints:**

*   `0 <= n <= 109`","
```javascript
function shipWithinDays(weights, days) {
    let left = Math.max(...weights), right = weights.reduce((a, b) => a + b, 0);
    while (left < right) {
        let mid = left + ((right - left) / 2) | 0;
        let day_count = 1, curr_capacity = 0;
        for (const w of weights) {
            curr_capacity += w;
            if (curr_capacity > mid) {
                day_count++;
                curr_capacity = w;
            }
        }
        if (day_count > days) {
            left = mid + 1;
        } else {
            right = mid;
        }
    }
    return left;
}
```
"
Greatest Common Divisor of Strings,Easy,"For two strings `s` and `t`, we say ""`t` divides `s` "" if and only if `s = t + ... + t` (i.e., `t` is concatenated with itself one or more times).

Given two strings `str1` and `str2`, return _the largest string_ `x` _such that_ `x` _divides both_ `str1` _and_ `str2`.

**Example 1:**

**Input:** str1 =  ""ABCABC "", str2 =  ""ABC ""
**Output:**  ""ABC ""

**Example 2:**

**Input:** str1 =  ""ABABAB "", str2 =  ""ABAB ""
**Output:**  ""AB ""

**Example 3:**

**Input:** str1 =  ""LEET "", str2 =  ""CODE ""
**Output:**  "" ""

**Constraints:**

*   `1 <= str1.length, str2.length <= 1000`
*   `str1` and `str2` consist of English uppercase letters.","```python
def prefixesDivBy5(nums):
    result = []
    current = 0
    for num in nums:
        current = ((current << 1) | num) % 5
        result.append(current == 0)
    return result
```
"
Sum of Digits in the Minimum Number,Easy,"Given an integer array `nums`, return `0` _if the sum of the digits of the minimum integer in_ `nums` _is odd, or_ `1` _otherwise_.

**Example 1:**

**Input:** nums = \[34,23,1,24,75,33,54,8\]
**Output:** 0
**Explanation:** The minimal element is 1, and the sum of those digits is 1 which is odd, so the answer is 0.

**Example 2:**

**Input:** nums = \[99,77,33,66,55\]
**Output:** 1
**Explanation:** The minimal element is 33, and the sum of those digits is 3 + 3 = 6 which is even, so the answer is 1.

**Constraints:**

*   `1 <= nums.length <= 100`
*   `1 <= nums[i] <= 100`","```python
def sum_of_digits(nums):
    min_val = min(nums)
    digit_sum = sum(int(digit) for digit in str(min_val))
    return 1 if digit_sum % 2 == 0 else 0
```

"
Two Sum Less Than K,Easy,"Given an array `nums` of integers and integer `k`, return the maximum `sum` such that there exists `i < j` with `nums[i] + nums[j] = sum` and `sum < k`. If no `i`, `j` exist satisfying this equation, return `-1`.

**Example 1:**

**Input:** nums = \[34,23,1,24,75,33,54,8\], k = 60
**Output:** 58
**Explanation:** We can use 34 and 24 to sum 58 which is less than 60.

**Example 2:**

**Input:** nums = \[10,20,30\], k = 15
**Output:** -1
**Explanation:** In this case it is not possible to get a pair sum less that 15.

**Constraints:**

*   `1 <= nums.length <= 100`
*   `1 <= nums[i] <= 1000`
*   `1 <= k <= 2000`","```python
def max_sum_under_k(nums, k):
    max_sum = -1
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            _sum = nums[i] + nums[j]
            if _sum < k and _sum > max_sum:
                max_sum = _sum
    return max_sum
```
"
Defanging an IP Address,Easy,"Given a valid (IPv4) IP `address`, return a defanged version of that IP address.

A _defanged IP address_ replaces every period `"". ""` with `""[.] ""`.

**Example 1:**

**Input:** address = ""1.1.1.1""
**Output:** ""1\[.\]1\[.\]1\[.\]1""

**Example 2:**

**Input:** address = ""255.100.50.0""
**Output:** ""255\[.\]100\[.\]50\[.\]0""

**Constraints:**

*   The given `address` is a valid IPv4 address.","```python
def defangIPaddr(address: str) -> str:
    return address.replace('.', '[.]')
```
"
Number of Days in a Month,Easy,"Given a year `year` and a month `month`, return _the number of days of that month_.

**Example 1:**

**Input:** year = 1992, month = 7
**Output:** 31

**Example 2:**

**Input:** year = 2000, month = 2
**Output:** 29

**Example 3:**

**Input:** year = 1900, month = 2
**Output:** 28

**Constraints:**

*   `1583 <= year <= 2100`
*   `1 <= month <= 12`","```python
def number_of_days(year, month):
    if month == 2:
        if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:
            return 29
        return 28
    if month in [4, 6, 9, 11]:
        return 30
    return 31
```
"
Armstrong Number,Easy,"Given an integer `n`, return `true` _if and only if it is an **Armstrong number**_.

The `k`\-digit number `n` is an Armstrong number if and only if the `kth` power of each digit sums to `n`.

**Example 1:**

**Input:** n = 153
**Output:** true
**Explanation:** 153 is a 3-digit number, and 153 = 13 + 53 + 33.

**Example 2:**

**Input:** n = 123
**Output:** false
**Explanation:** 123 is a 3-digit number, and 123 != 13 + 23 + 33 = 36.

**Constraints:**

*   `1 <= n <= 108`","```python
def is_armstrong(n: int) -> bool:
    power_sum = 0
    original = n
    k = len(str(n))
    while n > 0:
        digit = n % 10
        power_sum += digit ** k
        n //= 10
    return power_sum == original
```
"
N-th Tribonacci Number,Easy,"The Tribonacci sequence Tn is defined as follows:

T0 = 0, T1 = 1, T2 = 1, and Tn+3 = Tn + Tn+1 + Tn+2 for n >= 0.

Given `n`, return the value of Tn.

**Example 1:**

**Input:** n = 4
**Output:** 4
**Explanation:**
T\_3 = 0 + 1 + 1 = 2
T\_4 = 1 + 1 + 2 = 4

**Example 2:**

**Input:** n = 25
**Output:** 1389537

**Constraints:**

*   `0 <= n <= 37`
*   The answer is guaranteed to fit within a 32-bit integer, ie. `answer <= 2^31 - 1`.","```python
def height_checker(heights):
    expected = sorted(heights)
    count = 0
    for i in range(len(heights)):
        if heights[i] != expected[i]:
            count += 1
    return count
```
"
Single-Row Keyboard,Easy,"There is a special keyboard with **all keys in a single row**.

Given a string `keyboard` of length `26` indicating the layout of the keyboard (indexed from `0` to `25`). Initially, your finger is at index `0`. To type a character, you have to move your finger to the index of the desired character. The time taken to move your finger from index `i` to index `j` is `|i - j|`.

You want to type a string `word`. Write a function to calculate how much time it takes to type it with one finger.

**Example 1:**

**Input:** keyboard =  ""abcdefghijklmnopqrstuvwxyz "", word =  ""cba ""
**Output:** 4
**Explanation:** The index moves from 0 to 2 to write 'c' then to 1 to write 'b' then to 0 again to write 'a'.
Total time = 2 + 1 + 1 = 4. 

**Example 2:**

**Input:** keyboard =  ""pqrstuvwxyzabcdefghijklmno "", word =  ""leetcode ""
**Output:** 73

**Constraints:**

*   `keyboard.length == 26`
*   `keyboard` contains each English lowercase letter exactly once in some order.
*   `1 <= word.length <= 104`
*   `word[i]` is an English lowercase letter.","```python
def calculate_time(keyboard: str, word: str) -> int:
    time = 0
    prev_index = 0
    char_to_index = {char: i for i, char in enumerate(keyboard)}

    for c in word:
        time += abs(char_to_index[c] - prev_index)
        prev_index = char_to_index[c]

    return time
```
"
Prime Arrangements,Easy,"Return the number of permutations of 1 to `n` so that prime numbers are at prime indices (1-indexed.)

_(Recall that an integer is prime if and only if it is greater than 1, and cannot be written as a product of two positive integers both smaller than it.)_

Since the answer may be large, return the answer **modulo `10^9 + 7`**.

**Example 1:**

**Input:** n = 5
**Output:** 12
**Explanation:** For example \[1,2,5,4,3\] is a valid permutation, but \[5,2,3,4,1\] is not because the prime number 5 is at index 1.

**Example 2:**

**Input:** n = 100
**Output:** 682289015

**Constraints:**

*   `1 <= n <= 100`","```python
def numPrimeArrangements(n: int) -> int:
    def is_prime(num):
        if num < 2:
            return False
        for i in range(2, int(num ** 0.5) + 1):
            if num % i == 0:
                return False
        return True

    prime_count = sum(1 for i in range(2, n + 1) if is_prime(i))
    composite_count = n - prime_count

    MOD = 10**9 + 7
    res = 1
    for i in range(1, prime_count + 1):
        res = res * i % MOD
    for i in range(1, composite_count + 1):
        res = res * i % MOD

    return res
```
"
Distance Between Bus Stops,Easy,"A bus has `n` stops numbered from `0` to `n - 1` that form a circle. We know the distance between all pairs of neighboring stops where `distance[i]` is the distance between the stops number `i` and `(i + 1) % n`.

The bus goes along both directions i.e. clockwise and counterclockwise.

Return the shortest distance between the given `start` and `destination` stops.

**Example 1:**

**Input:** distance = \[1,2,3,4\], start = 0, destination = 1
**Output:** 1
**Explanation:** Distance between 0 and 1 is 1 or 9, minimum is 1.

**Example 2:**

**Input:** distance = \[1,2,3,4\], start = 0, destination = 2
**Output:** 3
**Explanation:** Distance between 0 and 2 is 3 or 7, minimum is 3.

**Example 3:**

**Input:** distance = \[1,2,3,4\], start = 0, destination = 3
**Output:** 4
**Explanation:** Distance between 0 and 3 is 6 or 4, minimum is 4.

**Constraints:**

*   `1 <= n <= 10^4`
*   `distance.length == n`
*   `0 <= start, destination < n`
*   `0 <= distance[i] <= 10^4`","```python
def carPooling(trips, capacity):
    stops = [0] * 1001
    for num, start, end in trips:
        stops[start] += num
        stops[end] -= num
    for i in stops:
        capacity -= i
        if capacity < 0:
            return False
    return True
```
"
Day of the Week,Easy,"Given a date, return the corresponding day of the week for that date.

The input is given as three integers representing the `day`, `month` and `year` respectively.

Return the answer as one of the following values `{ ""Sunday "", ""Monday "", ""Tuesday "", ""Wednesday "", ""Thursday "", ""Friday "", ""Saturday ""}`.

**Example 1:**

**Input:** day = 31, month = 8, year = 2019
**Output:**  ""Saturday ""

**Example 2:**

**Input:** day = 18, month = 7, year = 1999
**Output:**  ""Sunday ""

**Example 3:**

**Input:** day = 15, month = 8, year = 1993
**Output:**  ""Sunday ""

**Constraints:**

*   The given dates are valid dates between the years `1971` and `2100`.","```python
def day_of_the_week(day, month, year):
    from datetime import date
    days = [""Sunday "", ""Monday "", ""Tuesday "", ""Wednesday "", ""Thursday "", ""Friday "", ""Saturday ""]
    return days[date(year, month, day).weekday()]
```
"
How Many Apples Can You Put into the Basket,Easy,"You have some apples and a basket that can carry up to `5000` units of weight.

Given an integer array `weight` where `weight[i]` is the weight of the `ith` apple, return _the maximum number of apples you can put in the basket_.

**Example 1:**

**Input:** weight = \[100,200,150,1000\]
**Output:** 4
**Explanation:** All 4 apples can be carried by the basket since their sum of weights is 1450.

**Example 2:**

**Input:** weight = \[900,950,800,1000,700,800\]
**Output:** 5
**Explanation:** The sum of weights of the 6 apples exceeds 5000 so we choose any 5 of them.

**Constraints:**

*   `1 <= weight.length <= 103`
*   `1 <= weight[i] <= 103`","```python
def minHeightShelves(books, shelfWidth):
    n = len(books)
    dp = [1000000] * (n + 1)
    dp[0] = 0
    
    for i in range(1, n + 1):
        width = 0
        height = 0
        j = i
        while j >= 1:
            width += books[j - 1][0]
            height = max(height, books[j - 1][1])
            
            if width <= shelfWidth:
                dp[i] = min(dp[i], dp[j - 1] + height)
            j -= 1
    
    return dp[n]
```
"
Minimum Absolute Difference,Easy,"Given an array of **distinct** integers `arr`, find all pairs of elements with the minimum absolute difference of any two elements.

Return a list of pairs in ascending order(with respect to pairs), each pair `[a, b]` follows

*   `a, b` are from `arr`
*   `a < b`
*   `b - a` equals to the minimum absolute difference of any two elements in `arr`

**Example 1:**

**Input:** arr = \[4,2,1,3\]
**Output:** \[\[1,2\],\[2,3\],\[3,4\]\]
**Explanation:** The minimum absolute difference is 1. List all pairs with difference equal to 1 in ascending order.

**Example 2:**

**Input:** arr = \[1,3,6,10,15\]
**Output:** \[\[1,3\]\]

**Example 3:**

**Input:** arr = \[3,8,-10,23,19,-4,-14,27\]
**Output:** \[\[-14,-10\],\[19,23\],\[23,27\]\]

**Constraints:**

*   `2 <= arr.length <= 105`
*   `-106 <= arr[i] <= 106`","```python
from typing import List

def minimumAbsDifference(arr: List[int]) -> List[List[int]]:
    arr.sort()
    min_diff = min(arr[i] - arr[i - 1] for i in range(1, len(arr)))

    result = []
    for i in range(1, len(arr)):
        if arr[i] - arr[i - 1] == min_diff:
            result.append([arr[i - 1], arr[i]])

    return result
```
"
Minimum Cost to Move Chips to The Same Position,Easy,"We have `n` chips, where the position of the `ith` chip is `position[i]`.

We need to move all the chips to **the same position**. In one step, we can change the position of the `ith` chip from `position[i]` to:

*   `position[i] + 2` or `position[i] - 2` with `cost = 0`.
*   `position[i] + 1` or `position[i] - 1` with `cost = 1`.

Return _the minimum cost_ needed to move all the chips to the same position.

**Example 1:**

**Input:** position = \[1,2,3\]
**Output:** 1
**Explanation:** First step: Move the chip at position 3 to position 1 with cost = 0.
Second step: Move the chip at position 2 to position 1 with cost = 1.
Total cost is 1.

**Example 2:**

**Input:** position = \[2,2,2,3,3\]
**Output:** 2
**Explanation:** We can move the two chips at position  3 to position 2. Each move has cost = 1. The total cost = 2.

**Example 3:**

**Input:** position = \[1,1000000000\]
**Output:** 1

**Constraints:**

*   `1 <= position.length <= 100`
*   `1 <= position[i] <= 10^9`","```python
def sort_array(arr1, arr2):
    counts = {}
    result = []

    for num in arr1:
        counts[num] = counts.get(num, 0) + 1

    for num in arr2:
        if num in counts:
            result.extend([num] * counts[num])
            del counts[num]

    for num in sorted(counts.keys()):
        result.extend([num] * counts[num])

    return result
```
"
Split a String in Balanced Strings,Easy,"**Balanced** strings are those that have an equal quantity of `'L'` and `'R'` characters.

Given a **balanced** string `s`, split it into some number of substrings such that:

*   Each substring is balanced.

Return _the **maximum** number of balanced strings you can obtain._

**Example 1:**

**Input:** s =  ""RLRRLLRLRL ""
**Output:** 4
**Explanation:** s can be split into  ""RL "",  ""RRLL "",  ""RL "",  ""RL "", each substring contains same number of 'L' and 'R'.

**Example 2:**

**Input:** s =  ""RLRRRLLRLL ""
**Output:** 2
**Explanation:** s can be split into  ""RL "",  ""RRRLLRLL "", each substring contains same number of 'L' and 'R'.
Note that s cannot be split into  ""RL "",  ""RR "",  ""RL "",  ""LR "",  ""LL "", because the 2nd and 5th substrings are not balanced.

**Example 3:**

**Input:** s =  ""LLLLRRRR ""
**Output:** 1
**Explanation:** s can be split into  ""LLLLRRRR "".

**Constraints:**

*   `2 <= s.length <= 1000`
*   `s[i]` is either `'L'` or `'R'`.
*   `s` is a **balanced** string.","```python
def find_special_integer(arr):
    n = len(arr)
    required_count = n // 4
    for i in range(n):
        if arr[i] == arr[i + required_count]:
            return arr[i]
    return -1
```
"
Check If It Is a Straight Line,Easy,"You are given an array `coordinates`, `coordinates[i] = [x, y]`, where `[x, y]` represents the coordinate of a point. Check if these points make a straight line in the XY plane.

**Example 1:**

**Input:** coordinates = \[\[1,2\],\[2,3\],\[3,4\],\[4,5\],\[5,6\],\[6,7\]\]
**Output:** true

**Example 2:**

**Input:** coordinates = \[\[1,1\],\[2,2\],\[3,4\],\[4,5\],\[5,6\],\[7,7\]\]
**Output:** false

**Constraints:**

*   `2 <= coordinates.length <= 1000`
*   `coordinates[i].length == 2`
*   `-10^4 <= coordinates[i][0], coordinates[i][1] <= 10^4`
*   `coordinates` contains no duplicate point.","```python
def findBestValue(arr, target):
    left = 0
    right = max(arr)
    result = -1
    min_diff = float('inf')

    while left <= right:
        mid = left + (right - left) // 2
        total_sum = sum(min(x, mid) for x in arr)
        if total_sum == target:
            return mid
        elif total_sum > target:
            right = mid - 1
        else:
            left = mid + 1

        if abs(target - total_sum) < min_diff or (
                abs(target - total_sum) == min_diff and mid < result):
            min_diff = abs(target - total_sum)
            result = mid

    return result
```
"
Element Appearing More Than 25% In Sorted Array,Easy,"Given an integer array **sorted** in non-decreasing order, there is exactly one integer in the array that occurs more than 25% of the time, return that integer.

**Example 1:**

**Input:** arr = \[1,2,2,6,6,6,6,7,10\]
**Output:** 6

**Example 2:**

**Input:** arr = \[1,1\]
**Output:** 1

**Constraints:**

*   `1 <= arr.length <= 104`
*   `0 <= arr[i] <= 105`","```python
def shortest_distance(distance, start, destination):
    total_distance = sum(distance)
    clockwise_distance = sum(distance[start:destination])
    
    return min(clockwise_distance, total_distance - clockwise_distance)
```
"
Convert Binary Number in a Linked List to Integer,Easy,"Given `head` which is a reference node to a singly-linked list. The value of each node in the linked list is either `0` or `1`. The linked list holds the binary representation of a number.

Return the _decimal value_ of the number in the linked list.

The **most significant bit** is at the head of the linked list.

**Example 1:**

**Input:** head = \[1,0,1\]
**Output:** 5
**Explanation:** (101) in base 2 = (5) in base 10

**Example 2:**

**Input:** head = \[0\]
**Output:** 0

**Constraints:**

*   The Linked List is not empty.
*   Number of nodes will not exceed `30`.
*   Each node's value is either `0` or `1`.","```python
def min_operations(arr1, arr2):
    n = len(arr1)
    dp = [float('inf')] * n
    for a in arr2:
        new_dp = [float('inf')] * n
        p = 0
        for i in range(n):
            if a < arr1[i]:
                new_dp[i] = p
            if i > 0 and dp[i - 1] < p:
                p = dp[i - 1]
            if arr1[i] > arr1[i + 1]:
                return -1
        dp = new_dp
    return dp[-1]
```
"
Replace Elements with Greatest Element on Right Side,Easy,"Given an array `arr`, replace every element in that array with the greatest element among the elements to its right, and replace the last element with `-1`.

After doing so, return the array.

**Example 1:**

**Input:** arr = \[17,18,5,4,6,1\]
**Output:** \[18,6,6,6,1,-1\]
**Explanation:** 
- index 0 --> the greatest element to the right of index 0 is index 1 (18).
- index 1 --> the greatest element to the right of index 1 is index 4 (6).
- index 2 --> the greatest element to the right of index 2 is index 4 (6).
- index 3 --> the greatest element to the right of index 3 is index 4 (6).
- index 4 --> the greatest element to the right of index 4 is index 5 (1).
- index 5 --> there are no elements to the right of index 5, so we put -1.

**Example 2:**

**Input:** arr = \[400\]
**Output:** \[-1\]
**Explanation:** There are no elements to the right of index 0.

**Constraints:**

*   `1 <= arr.length <= 104`
*   `1 <= arr[i] <= 105`","```python
def kConcatenationMaxSum(arr, k):
    M = 10**9 + 7
    s = sum(arr)
    max_sum = max_ending_here = 0
    for i in range(len(arr) * min(2, k)):
        max_ending_here = max(arr[i % len(arr)], max_ending_here + arr[i % len(arr)])
        max_sum = max(max_sum, max_ending_here)
    return 0 if k == 1 else (((max_sum - max_ending_here) % M) * (k - 2) % M + max_ending_here) % M
```
"
Rank Transform of an Array,Easy,"Given an array of integers `arr`, replace each element with its rank.

The rank represents how large the element is. The rank has the following rules:

*   Rank is an integer starting from 1.
*   The larger the element, the larger the rank. If two elements are equal, their rank must be the same.
*   Rank should be as small as possible.

**Example 1:**

**Input:** arr = \[40,10,20,30\]
**Output:** \[4,1,2,3\]
**Explanation**: 40 is the largest element. 10 is the smallest. 20 is the second smallest. 30 is the third smallest.

**Example 2:**

**Input:** arr = \[100,100,100\]
**Output:** \[1,1,1\]
**Explanation**: Same elements share the same rank.

**Example 3:**

**Input:** arr = \[37,12,28,9,100,56,80,5,12\]
**Output:** \[5,3,4,2,8,6,7,1,3\]

**Constraints:**

*   `0 <= arr.length <= 105`
*   `-109 <= arr[i] <= 109`

\- Every time you are in a cell you will collect all the gold in that cell. - From your position, you can walk one step to the left, right, up, or down. - You can't visit the same cell more than once. - Never visit a cell with 0 gold. - You can start and stop collecting gold from any position in the grid that has some gold.","```python
def getMaximumGold(grid):
    m, n, max_gold = len(grid), len(grid[0]), 0

    def getMaximumGoldHelper(x, y):
        if not (0 <= x < m) or not (0 <= y < n) or grid[x][y] == 0:
            return 0

        original_gold = grid[x][y]
        grid[x][y] = 0

        max_gold = 0
        max_gold = max(max_gold, getMaximumGoldHelper(x + 1, y))
        max_gold = max(max_gold, getMaximumGoldHelper(x - 1, y))
        max_gold = max(max_gold, getMaximumGoldHelper(x, y + 1))
        max_gold = max(max_gold, getMaximumGoldHelper(x, y - 1))

        grid[x][y] = original_gold
        return max_gold + original_gold

    for i in range(m):
        for j in range(n):
            if grid[i][j] != 0:
                max_gold = max(max_gold, getMaximumGoldHelper(i, j))

    return max_gold
```

"
Number of Steps to Reduce a Number to Zero,Easy,"Given an integer `num`, return _the number of steps to reduce it to zero_.

In one step, if the current number is even, you have to divide it by `2`, otherwise, you have to subtract `1` from it.

**Example 1:**

**Input:** num = 14
**Output:** 6
**Explanation:** 
Step 1) 14 is even; divide by 2 and obtain 7. 
Step 2) 7 is odd; subtract 1 and obtain 6.
Step 3) 6 is even; divide by 2 and obtain 3. 
Step 4) 3 is odd; subtract 1 and obtain 2. 
Step 5) 2 is even; divide by 2 and obtain 1. 
Step 6) 1 is odd; subtract 1 and obtain 0.

**Example 2:**

**Input:** num = 8
**Output:** 4
**Explanation:** 
Step 1) 8 is even; divide by 2 and obtain 4. 
Step 2) 4 is even; divide by 2 and obtain 2. 
Step 3) 2 is even; divide by 2 and obtain 1. 
Step 4) 1 is odd; subtract 1 and obtain 0.

**Example 3:**

**Input:** num = 123
**Output:** 12

**Constraints:**

*   `0 <= num <= 106`","```python
def queensAttacktheKing(queens, king):
    result = []
    for x in range(-1, 2):
        for y in range(-1, 2):
            if x == 0 and y == 0:
                continue
            posX, posY = king[0] + x, king[1] + y
            while 0 <= posX < 8 and 0 <= posY < 8:
                for queen in queens:
                    if posX == queen[0] and posY == queen[1]:
                        result.append([queen[0], queen[1]])
                        break
                posX += x
                posY += y
    return result
```
"
Check If N and Its Double Exist,Easy,"Given an array `arr` of integers, check if there exist two indices `i` and `j` such that :

*   `i != j`
*   `0 <= i, j < arr.length`
*   `arr[i] == 2 * arr[j]`

**Example 1:**

**Input:** arr = \[10,2,5,3\]
**Output:** true
**Explanation:** For i = 0 and j = 2, arr\[i\] == 10 == 2 \* 5 == 2 \* arr\[j\]

**Example 2:**

**Input:** arr = \[3,1,7,11\]
**Output:** false
**Explanation:** There is no i and j that satisfy the conditions.

**Constraints:**

*   `2 <= arr.length <= 500`
*   `-103 <= arr[i] <= 103`","```python
def maxValueInStack(nums, k):
    n = len(nums)
    if k >= n:
        return -1

    max_val = float('-inf')
    for i in range(k+1):
        max_val = max(max_val, nums[i])
    return max_val
```
"
Number of Days Between Two Dates,Easy,"Write a program to count the number of days between two dates.

The two dates are given as strings, their format is `YYYY-MM-DD` as shown in the examples.

**Example 1:**

**Input:** date1 = ""2019-06-29"", date2 = ""2019-06-30""
**Output:** 1

**Example 2:**

**Input:** date1 = ""2020-01-15"", date2 = ""2019-12-31""
**Output:** 15

**Constraints:**

*   The given dates are valid dates between the years `1971` and `2100`.","```python
def maxLength(arr):
    dp = ['']
    maxLen = 0

    for s in arr:
        if len(set(s)) < len(s): continue
        for i in range(len(dp) - 1, -1, -1):
            tmp = dp[i] + s
            if len(set(tmp)) == len(tmp):
                dp.append(tmp)
                maxLen = max(maxLen, len(tmp))
                
    return maxLen
```
"
Increasing Decreasing String,Easy,"You are given a string `s`. Reorder the string using the following algorithm:

1.  Pick the **smallest** character from `s` and **append** it to the result.
2.  Pick the **smallest** character from `s` which is greater than the last appended character to the result and **append** it.
3.  Repeat step 2 until you cannot pick more characters.
4.  Pick the **largest** character from `s` and **append** it to the result.
5.  Pick the **largest** character from `s` which is smaller than the last appended character to the result and **append** it.
6.  Repeat step 5 until you cannot pick more characters.
7.  Repeat the steps from 1 to 6 until you pick all characters from `s`.

In each step, If the smallest or the largest character appears more than once you can choose any occurrence and append it to the result.

Return _the result string after sorting_ `s` _with this algorithm_.

**Example 1:**

**Input:** s =  ""aaaabbbbcccc ""
**Output:**  ""abccbaabccba ""
**Explanation:** After steps 1, 2 and 3 of the first iteration, result =  ""abc ""
After steps 4, 5 and 6 of the first iteration, result =  ""abccba ""
First iteration is done. Now s =  ""aabbcc "" and we go back to step 1
After steps 1, 2 and 3 of the second iteration, result =  ""abccbaabc ""
After steps 4, 5 and 6 of the second iteration, result =  ""abccbaabccba ""

**Example 2:**

**Input:** s =  ""rat ""
**Output:**  ""art ""
**Explanation:** The word  ""rat "" becomes  ""art "" after re-ordering it with the mentioned algorithm.

**Constraints:**

*   `1 <= s.length <= 500`
*   `s` consists of only lowercase English letters.","```python
def numberOfSubarrays(nums, k):
    n = len(nums)
    result = count = 0
    odd_count = [0] * (n + 1)

    odd_count[0] = 1
    for num in nums:
        count += num % 2
        if count >= k:
            result += odd_count[count - k]
        odd_count[count] += 1

    return result
```
"
Generate a String With Characters That Have Odd Counts,Easy,"Given an integer `n`, _return a string with `n` characters such that each character in such string occurs **an odd number of times**_.

The returned string must contain only lowercase English letters. If there are multiples valid strings, return **any** of them.

**Example 1:**

**Input:** n = 4
**Output:**  ""pppz ""
**Explanation:**  ""pppz "" is a valid string since the character 'p' occurs three times and the character 'z' occurs once. Note that there are many other valid strings such as  ""ohhh "" and  ""love "".

**Example 2:**

**Input:** n = 2
**Output:**  ""xy ""
**Explanation:**  ""xy "" is a valid string since the characters 'x' and 'y' occur once. Note that there are many other valid strings such as  ""ag "" and  ""ur "".

**Example 3:**

**Input:** n = 7
**Output:**  ""holasss ""

**Constraints:**

*   `1 <= n <= 500`","```python
def generateTheString(n: int) -> str:
    result = 'a' * n
    if n % 2 == 0:
        result = result[:-1] + 'b'
    return result
```
"
Find a Corresponding Node of a Binary Tree in a Clone of That Tree,Easy,"Given two binary trees `original` and `cloned` and given a reference to a node `target` in the original tree.

The `cloned` tree is a **copy of** the `original` tree.

Return _a reference to the same node_ in the `cloned` tree.

**Note** that you are **not allowed** to change any of the two trees or the `target` node and the answer **must be** a reference to a node in the `cloned` tree.

**Example 1:**

**Input:** tree = \[7,4,3,null,null,6,19\], target = 3
**Output:** 3
**Explanation:** In all examples the original and cloned trees are shown. The target node is a green node from the original tree. The answer is the yellow node from the cloned tree.

**Example 2:**

**Input:** tree = \[7\], target =  7
**Output:** 7

**Example 3:**

**Input:** tree = \[8,null,6,null,5,null,4,null,3,null,2,null,1\], target = 4
**Output:** 4

**Constraints:**

*   The number of nodes in the `tree` is in the range `[1, 104]`.
*   The values of the nodes of the `tree` are unique.
*   `target` node is a node from the `original` tree and is not `null`.

**Follow up:** Could you solve the problem if repeated values on the tree are allowed?","```python
def reconstructMatrix(upper, lower, colsum):
    result = [[0] * len(colsum) for _ in range(2)]
    
    for i in range(len(colsum)):
        if colsum[i] == 2:
            result[0][i] = 1
            result[1][i] = 1
            upper -= 1
            lower -= 1
        elif colsum[i] == 1:
            if upper > lower:
                result[0][i] = 1
                upper -= 1
            else:
                result[1][i] = 1
                lower -= 1
        
        if upper < 0 or lower < 0:
            return []
    
    if upper > 0 or lower > 0:
        return []
    
    return result
```
"
Lucky Numbers in a Matrix,Easy,"Given an `m x n` matrix of **distinct** numbers, return _all **lucky numbers** in the matrix in **any** order_.

A **lucky number** is an element of the matrix such that it is the minimum element in its row and maximum in its column.

**Example 1:**

**Input:** matrix = \[\[3,7,8\],\[9,11,13\],\[15,16,17\]\]
**Output:** \[15\]
**Explanation:** 15 is the only lucky number since it is the minimum in its row and the maximum in its column.

**Example 2:**

**Input:** matrix = \[\[1,10,4,2\],\[9,3,8,7\],\[15,16,17,12\]\]
**Output:** \[12\]
**Explanation:** 12 is the only lucky number since it is the minimum in its row and the maximum in its column.

**Example 3:**

**Input:** matrix = \[\[7,8\],\[1,2\]\]
**Output:** \[7\]
**Explanation:** 7 is the only lucky number since it is the minimum in its row and the maximum in its column.

**Constraints:**

*   `m == mat.length`
*   `n == mat[i].length`
*   `1 <= n, m <= 50`
*   `1 <= matrix[i][j] <= 105`.
*   All elements in the matrix are distinct.","```python
dx = [-1, 1, 0, 0]
dy = [0, 0, -1, 1]

def dfs(grid, x, y):
    n, m = len(grid), len(grid[0])
    grid[x][y] = 1
    for i in range(4):
        nx, ny = x + dx[i], y + dy[i]
        if 0 <= nx < n and 0 <= ny < m and grid[nx][ny] == 0:
            dfs(grid, nx, ny)

def closedIsland(grid):
    n, m = len(grid), len(grid[0])
    for i in range(n):
        for j in range(m):
            if i == 0 or i == n - 1 or j == 0 or j == m - 1:
                if grid[i][j] == 0:
                    dfs(grid, i, j)
    res = 0
    for i in range(1, n - 1):
        for j in range(1, m - 1):
            if grid[i][j] == 0:
                dfs(grid, i, j)
                res += 1
    return res
```

"
String Matching in an Array,Easy,"Given an array of string `words`, return _all strings in_ `words` _that is a **substring** of another word_. You can return the answer in **any order**.

A **substring** is a contiguous sequence of characters within a string

**Example 1:**

**Input:** words = \[ ""mass "", ""as "", ""hero "", ""superhero ""\]
**Output:** \[ ""as "", ""hero ""\]
**Explanation:**  ""as "" is substring of  ""mass "" and  ""hero "" is substring of  ""superhero "".
\[ ""hero "", ""as ""\] is also a valid answer.

**Example 2:**

**Input:** words = \[ ""leetcode "", ""et "", ""code ""\]
**Output:** \[ ""et "", ""code ""\]
**Explanation:**  ""et "",  ""code "" are substring of  ""leetcode "".

**Example 3:**

**Input:** words = \[ ""blue "", ""green "", ""bu ""\]
**Output:** \[\]
**Explanation:** No string of words is substring of another string.

**Constraints:**

*   `1 <= words.length <= 100`
*   `1 <= words[i].length <= 30`
*   `words[i]` contains only lowercase English letters.
*   All the strings of `words` are **unique**.","```python
import math

def smallest_divisor(nums, threshold):
    left, right = 1, 10**6
    while left < right:
        mid = (left + right) // 2
        total = sum(math.ceil(n / mid) for n in nums)
        if total > threshold:
            left = mid + 1
        else:
            right = mid
    return left
```
"
Minimum Value to Get Positive Step by Step Sum,Easy,"Given an array of integers `nums`, you start with an initial **positive** value _startValue__._

In each iteration, you calculate the step by step sum of _startValue_ plus elements in `nums` (from left to right).

Return the minimum **positive** value of _startValue_ such that the step by step sum is never less than 1.

**Example 1:**

**Input:** nums = \[-3,2,-3,4,2\]
**Output:** 5
**Explanation:** If you choose startValue = 4, in the third iteration your step by step sum is less than 1.
**step by step sum**
**startValue = 4 | startValue = 5 | nums**
  (4 **\-3** ) = 1  | (5 **\-3** ) = 2    |  -3
  (1 **+2** ) = 3  | (2 **+2** ) = 4    |   2
  (3 **\-3** ) = 0  | (4 **\-3** ) = 1    |  -3
  (0 **+4** ) = 4  | (1 **+4** ) = 5    |   4
  (4 **+2** ) = 6  | (5 **+2** ) = 7    |   2

**Example 2:**

**Input:** nums = \[1,2\]
**Output:** 1
**Explanation:** Minimum start value should be positive. 

**Example 3:**

**Input:** nums = \[1,-2,-3\]
**Output:** 5

**Constraints:**

*   `1 <= nums.length <= 100`
*   `-100 <= nums[i] <= 100`","```python
def maxSideLength(mat, threshold):
    m, n = len(mat), len(mat[0])
    dp = [[0] * (n + 1) for _ in range(m + 1)]
    ans = 0

    for i in range(1, m + 1):
        for j in range(1, n + 1):
            dp[i][j] = mat[i - 1][j - 1] + dp[i][j - 1] + dp[i - 1][j] - dp[i - 1][j - 1]
            k = ans + 1
            if i >= k and j >= k and dp[i][j] - dp[i][j - k] - dp[i - k][j] + dp[i - k][j - k] <= threshold:
                ans += 1

    return ans
```
"
Maximum Score After Splitting a String,Easy,"Given a string `s` of zeros and ones, _return the maximum score after splitting the string into two **non-empty** substrings_ (i.e. **left** substring and **right** substring).

The score after splitting a string is the number of **zeros** in the **left** substring plus the number of **ones** in the **right** substring.

**Example 1:**

**Input:** s =  ""011101 ""
**Output:** 5 
**Explanation:** 
All possible ways of splitting s into two non-empty substrings are:
left =  ""0 "" and right =  ""11101 "", score = 1 + 4 = 5 
left =  ""01 "" and right =  ""1101 "", score = 1 + 3 = 4 
left =  ""011 "" and right =  ""101 "", score = 1 + 2 = 3 
left =  ""0111 "" and right =  ""01 "", score = 1 + 1 = 2 
left =  ""01110 "" and right =  ""1 "", score = 2 + 1 = 3

**Example 2:**

**Input:** s =  ""00111 ""
**Output:** 5
**Explanation:** When left =  ""00 "" and right =  ""111 "", we get the maximum score = 2 + 3 = 5

**Example 3:**

**Input:** s =  ""1111 ""
**Output:** 3

**Constraints:**

*   `2 <= s.length <= 500`
*   The string `s` consists of characters `'0'` and `'1'` only.","```python
from collections import Counter

def is_possible_divide(nums: List[int], k: int) -> bool:
    counts = Counter(nums)
    
    for key in sorted(counts):
        if counts[key] > 0:
            for i in range(k-1, -1, -1):
                if counts[key+i] < counts[key]:
                    return False
                counts[key+i] -= counts[key]
    
    return True
```
"
Counting Elements,Easy,"Given an integer array `arr`, count how many elements `x` there are, such that `x + 1` is also in `arr`. If there are duplicates in `arr`, count them separately.

**Example 1:**

**Input:** arr = \[1,2,3\]
**Output:** 2
**Explanation:** 1 and 2 are counted cause 2 and 3 are in arr.

**Example 2:**

**Input:** arr = \[1,1,3,3,5,5,7,7\]
**Output:** 0
**Explanation:** No numbers are counted, cause there is no 2, 4, 6, or 8 in arr.

**Constraints:**

*   `1 <= arr.length <= 1000`
*   `0 <= arr[i] <= 1000`","```python
def sum_zero(n):
    res = []
    for i in range(1, (n // 2) + 1):
        res.append(i)
        res.append(-i)
    if n % 2 != 0:
        res.append(0)
    return res
```
"
Destination City,Easy,"You are given the array `paths`, where `paths[i] = [cityAi, cityBi]` means there exists a direct path going from `cityAi` to `cityBi`. _Return the destination city, that is, the city without any path outgoing to another city._

It is guaranteed that the graph of paths forms a line without any loop, therefore, there will be exactly one destination city.

**Example 1:**

**Input:** paths = \[\[ ""London "", ""New York ""\],\[ ""New York "", ""Lima ""\],\[ ""Lima "", ""Sao Paulo ""\]\]
**Output:**  ""Sao Paulo "" 
**Explanation:** Starting at  ""London "" city you will reach  ""Sao Paulo "" city which is the destination city. Your trip consist of:  ""London "" ->  ""New York "" ->  ""Lima "" ->  ""Sao Paulo "".

**Example 2:**

**Input:** paths = \[\[ ""B "", ""C ""\],\[ ""D "", ""B ""\],\[ ""C "", ""A ""\]\]
**Output:**  ""A ""
**Explanation:** All possible trips are: 
 ""D "" ->  ""B "" ->  ""C "" ->  ""A "". 
 ""B "" ->  ""C "" ->  ""A "". 
 ""C "" ->  ""A "". 
 ""A "". 
Clearly the destination city is  ""A "".

**Example 3:**

**Input:** paths = \[\[ ""A "", ""Z ""\]\]
**Output:**  ""Z ""

**Constraints:**

*   `1 <= paths.length <= 100`
*   `paths[i].length == 2`
*   `1 <= cityAi.length, cityBi.length <= 10`
*   `cityAi != cityBi`
*   All strings consist of lowercase and uppercase English letters and the space character.","```python
from collections import deque
from collections import defaultdict

def watched_videos_by_friends(watched_videos, friends, id, level):
    visited = set()
    q = deque([(id, 0)])
    video_freq = defaultdict(int)

    while q:
        current_id, current_level = q.popleft()

        if current_level == level:
            for video in watched_videos[current_id]:
                video_freq[video] += 1
        elif current_level < level:
            for friend_id in friends[current_id]:
                if friend_id not in visited:
                    visited.add(friend_id)
                    q.append((friend_id, current_level + 1))

    result = sorted(video_freq.keys(), key=lambda x: (video_freq[x], x))

    return result
```
"
Check If a Word Occurs As a Prefix of Any Word in a Sentence,Easy,"Given a `sentence` that consists of some words separated by a **single space**, and a `searchWord`, check if `searchWord` is a prefix of any word in `sentence`.

Return _the index of the word in_ `sentence` _(**1-indexed**) where_ `searchWord` _is a prefix of this word_. If `searchWord` is a prefix of more than one word, return the index of the first word **(minimum index)**. If there is no such word return `-1`.

A **prefix** of a string `s` is any leading contiguous substring of `s`.

**Example 1:**

**Input:** sentence =  ""i love eating burger "", searchWord =  ""burg ""
**Output:** 4
**Explanation:**  ""burg "" is prefix of  ""burger "" which is the 4th word in the sentence.

**Example 2:**

**Input:** sentence =  ""this problem is an easy problem "", searchWord =  ""pro ""
**Output:** 2
**Explanation:**  ""pro "" is prefix of  ""problem "" which is the 2nd and the 6th word in the sentence, but we return 2 as it's the minimal index.

**Example 3:**

**Input:** sentence =  ""i am tired "", searchWord =  ""you ""
**Output:** -1
**Explanation:**  ""you "" is not a prefix of any word in the sentence.

**Constraints:**

*   `1 <= sentence.length <= 100`
*   `1 <= searchWord.length <= 10`
*   `sentence` consists of lowercase English letters and spaces.
*   `searchWord` consists of lowercase English letters.","```python
def filter_restaurants(restaurants, vegan_friendly, max_price, max_distance):
    def custom_compare(a, b):
        if a[1] == b[1]:
            return b[0] - a[0]
        return b[1] - a[1]

    filtered_restaurants = [
        r for r in restaurants
        if (vegan_friendly == 0 or r[2] == vegan_friendly) and r[3] <= max_price and r[4] <= max_distance
    ]

    filtered_restaurants.sort(key=lambda r: (r[1], r[0]), reverse=True)

    return [r[0] for r in filtered_restaurants]
```
"
Maximum Product of Two Elements in an Array,Easy,"Given the array of integers `nums`, you will choose two different indices `i` and `j` of that array. _Return the maximum value of_ `(nums[i]-1)*(nums[j]-1)`.

**Example 1:**

**Input:** nums = \[3,4,5,2\]
**Output:** 12 
**Explanation:** If you choose the indices i=1 and j=2 (indexed from 0), you will get the maximum value, that is, (nums\[1\]-1)\*(nums\[2\]-1) = (4-1)\*(5-1) = 3\*4 = 12. 

**Example 2:**

**Input:** nums = \[1,5,4,5\]
**Output:** 16
**Explanation:** Choosing the indices i=1 and j=3 (indexed from 0), you will get the maximum value of (5-1)\*(5-1) = 16.

**Example 3:**

**Input:** nums = \[3,7\]
**Output:** 12

**Constraints:**

*   `2 <= nums.length <= 500`
*   `1 <= nums[i] <= 10^3`","```python
from collections import Counter

def minSetSize(arr):
    count = Counter(arr)
    freq = list(count.values())
    freq.sort(reverse=True)

    removed, setSize = 0, 0
    for f in freq:
        removed += f
        setSize += 1
        if removed * 2 >= len(arr):
            return setSize

    return 0
```

"
XOR Operation in an Array,Easy,"You are given an integer `n` and an integer `start`.

Define an array `nums` where `nums[i] = start + 2 * i` (**0-indexed**) and `n == nums.length`.

Return _the bitwise XOR of all elements of_ `nums`.

**Example 1:**

**Input:** n = 5, start = 0
**Output:** 8
**Explanation:** Array nums is equal to \[0, 2, 4, 6, 8\] where (0 ^ 2 ^ 4 ^ 6 ^ 8) = 8.
Where  ""^ "" corresponds to bitwise XOR operator.

**Example 2:**

**Input:** n = 4, start = 3
**Output:** 8
**Explanation:** Array nums is equal to \[3, 5, 7, 9\] where (3 ^ 5 ^ 7 ^ 9) = 8.

**Constraints:**

*   `1 <= n <= 1000`
*   `0 <= start <= 1000`
*   `n == nums.length`","```python
def findTheDistanceValue(arr1, arr2, d):
    count = 0
    for i in arr1:
        valid = True
        for j in arr2:
            if abs(i - j) <= d:
                valid = False
                break
        if valid:
            count += 1
    return count
```
"
Average Salary Excluding the Minimum and Maximum Salary,Easy,"You are given an array of **unique** integers `salary` where `salary[i]` is the salary of the `ith` employee.

Return _the average salary of employees excluding the minimum and maximum salary_. Answers within `10-5` of the actual answer will be accepted.

**Example 1:**

**Input:** salary = \[4000,3000,1000,2000\]
**Output:** 2500.00000
**Explanation:** Minimum salary and maximum salary are 1000 and 4000 respectively.
Average salary excluding minimum and maximum salary is (2000+3000) / 2 = 2500

**Example 2:**

**Input:** salary = \[1000,2000,3000\]
**Output:** 2000.00000
**Explanation:** Minimum salary and maximum salary are 1000 and 3000 respectively.
Average salary excluding minimum and maximum salary is (2000) / 1 = 2000

**Constraints:**

*   `3 <= salary.length <= 100`
*   `1000 <= salary[i] <= 106`
*   All the integers of `salary` are **unique**.","```python
def count_prefix_aligned(flips):
    count = 0
    for i in range(len(flips)):
        if flips[i] == i + 1:
            count += 1
    return count
```
"
Path Crossing,Easy,"Given a string `path`, where `path[i] = 'N'`, `'S'`, `'E'` or `'W'`, each representing moving one unit north, south, east, or west, respectively. You start at the origin `(0, 0)` on a 2D plane and walk on the path specified by `path`.

Return `true` _if the path crosses itself at any point, that is, if at any time you are on a location you have previously visited_. Return `false` otherwise.

**Example 1:**

**Input:** path =  ""NES ""
**Output:** false 
**Explanation:** Notice that the path doesn't cross any point more than once.

**Example 2:**

**Input:** path =  ""NESWW ""
**Output:** true
**Explanation:** Notice that the path visits the origin twice.

**Constraints:**

*   `1 <= path.length <= 104`
*   `path[i]` is either `'N'`, `'S'`, `'E'`, or `'W'`.","```python
def lucky_numbers(matrix):
    m, n = len(matrix), len(matrix[0])
    lucky_numbers = []

    for i in range(m):
        min_row = min(matrix[i])
        min_row_idx = matrix[i].index(min_row)
        is_lucky = all(matrix[k][min_row_idx] <= min_row for k in range(m))

        if is_lucky:
            lucky_numbers.append(min_row)

    return lucky_numbers
```
"
Reformat Date,Easy,"Given a `date` string in the form `Day Month Year`, where:

*   `Day` is in the set `{ ""1st "", ""2nd "", ""3rd "", ""4th "", ..., ""30th "", ""31st ""}`.
*   `Month` is in the set `{ ""Jan "", ""Feb "", ""Mar "", ""Apr "", ""May "", ""Jun "", ""Jul "", ""Aug "", ""Sep "", ""Oct "", ""Nov "", ""Dec ""}`.
*   `Year` is in the range `[1900, 2100]`.

Convert the date string to the format `YYYY-MM-DD`, where:

*   `YYYY` denotes the 4 digit year.
*   `MM` denotes the 2 digit month.
*   `DD` denotes the 2 digit day.

**Example 1:**

**Input:** date =  ""20th Oct 2052 ""
**Output:**  ""2052-10-20 ""

**Example 2:**

**Input:** date =  ""6th Jun 1933 ""
**Output:**  ""1933-06-06 ""

**Example 3:**

**Input:** date =  ""26th May 1960 ""
**Output:**  ""1960-05-26 ""

**Constraints:**

*   The given dates are guaranteed to be valid, so no error handling is necessary.","```python
def hasValidPath(grid):
    m, n = len(grid), len(grid[0])
    visited = [[False for _ in range(n)] for _ in range(m)]

    return dfs(grid, 0, 0, m, n, visited)

def dfs(grid, x, y, m, n, visited):
    if x < 0 or y < 0 or x >= m or y >= n or visited[x][y]:
        return False
    if x == m - 1 and y == n - 1:
        return True
    
    visited[x][y] = True

    next_x = [-1, 0, 1, 0]
    next_y = [0, 1, 0, -1]

    for i in range(4):
        dx = x + next_x[i]
        dy = y + next_y[i]

        if dfs(grid, dx, dy, m, n, visited):
            return True

    return False
```
"
Shuffle String,Easy,"You are given a string `s` and an integer array `indices` of the **same length**. The string `s` will be shuffled such that the character at the `ith` position moves to `indices[i]` in the shuffled string.

Return _the shuffled string_.

**Example 1:**

**Input:** s =  ""codeleet "", `indices` = \[4,5,6,7,0,2,1,3\]
**Output:**  ""leetcode ""
**Explanation:** As shown,  ""codeleet "" becomes  ""leetcode "" after shuffling.

**Example 2:**

**Input:** s =  ""abc "", `indices` = \[0,1,2\]
**Output:**  ""abc ""
**Explanation:** After shuffling, each character remains in its position.

**Constraints:**

*   `s.length == indices.length == n`
*   `1 <= n <= 100`
*   `s` consists of only lowercase English letters.
*   `0 <= indices[i] < n`
*   All values of `indices` are **unique**.","```python
from typing import List

def kids_with_candies(candies: List[int], extra_candies: int) -> List[bool]:
    max_candies = max(candies)
    result = [candy + extra_candies >= max_candies for candy in candies]
    return result
```
"
Kth Missing Positive Number,Easy,"Given an array `arr` of positive integers sorted in a **strictly increasing order**, and an integer `k`.

Return _the_ `kth` _**positive** integer that is **missing** from this array._

**Example 1:**

**Input:** arr = \[2,3,4,7,11\], k = 5
**Output:** 9
**Explanation:** The missing positive integers are \[1,5,6,8,9,10,12,13,...\]. The 5th missing positive integer is 9.

**Example 2:**

**Input:** arr = \[1,2,3,4\], k = 2
**Output:** 6
**Explanation:** The missing positive integers are \[5,6,7,...\]. The 2nd missing positive integer is 6.

**Constraints:**

*   `1 <= arr.length <= 1000`
*   `1 <= arr[i] <= 1000`
*   `1 <= k <= 1000`
*   `arr[i] < arr[j]` for `1 <= i < j <= arr.length`

**Follow up:**

Could you solve this problem in less than O(n) complexity?","```python
def find_diagonal_order(nums):
    diagonals = {}
    for i in range(len(nums)):
        for j in range(len(nums[i])):
            if i + j not in diagonals:
                diagonals[i + j] = []
            diagonals[i + j].append(nums[i][j])

    res = []
    for key in diagonals:
        res.extend(reversed(diagonals[key]))

    return res
```
"
Three Consecutive Odds,Easy,"Given an integer array `arr`, return `true` if there are three consecutive odd numbers in the array. Otherwise, return `false`.

**Example 1:**

**Input:** arr = \[2,6,4,1\]
**Output:** false
**Explanation:** There are no three consecutive odds.

**Example 2:**

**Input:** arr = \[1,2,34,3,4,5,7,23,12\]
**Output:** true
**Explanation:** \[5,7,23\] are three consecutive odds.

**Constraints:**

*   `1 <= arr.length <= 1000`
*   `1 <= arr[i] <= 1000`","```python
import heapq

def kthSmallest(mat, k):
    m, n = len(mat), len(mat[0])
    
    minHeap = [(mat[0][0], 0, 0)]
    visited = [[False for _ in range(n)] for _ in range(m)]
    visited[0][0] = True
    
    for _ in range(k):
        res, i, j = heapq.heappop(minHeap)
        
        if i < m - 1 and not visited[i+1][j]:
            heapq.heappush(minHeap, (res - mat[i][j] + mat[i + 1][j], i + 1, j))
            visited[i+1][j] = True
        if j < n - 1 and not visited[i][j+1]:
            heapq.heappush(minHeap, (res - mat[i][j] + mat[i][j + 1], i, j + 1))
            visited[i][j+1] = True
            
    return res
```
"
Thousand Separator,Easy,"Given an integer `n`, add a dot ( "". "") as the thousands separator and return it in string format.

**Example 1:**

**Input:** n = 987
**Output:**  ""987 ""

**Example 2:**

**Input:** n = 1234
**Output:**  ""1.234 ""

**Constraints:**

*   `0 <= n <= 231 - 1`","```python
def can_be_equal(target, arr):
    target.sort()
    arr.sort()
    return target == arr
```

"
Most Visited Sector in  a Circular Track,Easy,"Given an integer `n` and an integer array `rounds`. We have a circular track which consists of `n` sectors labeled from `1` to `n`. A marathon will be held on this track, the marathon consists of `m` rounds. The `ith` round starts at sector `rounds[i - 1]` and ends at sector `rounds[i]`. For example, round 1 starts at sector `rounds[0]` and ends at sector `rounds[1]`

Return _an array of the most visited sectors_ sorted in **ascending** order.

Notice that you circulate the track in ascending order of sector numbers in the counter-clockwise direction (See the first example).

**Example 1:**

**Input:** n = 4, rounds = \[1,3,1,2\]
**Output:** \[1,2\]
**Explanation:** The marathon starts at sector 1. The order of the visited sectors is as follows:
1 --> 2 --> 3 (end of round 1) --> 4 --> 1 (end of round 2) --> 2 (end of round 3 and the marathon)
We can see that both sectors 1 and 2 are visited twice and they are the most visited sectors. Sectors 3 and 4 are visited only once.

**Example 2:**

**Input:** n = 2, rounds = \[2,1,2,1,2,1,2,1,2\]
**Output:** \[2\]

**Example 3:**

**Input:** n = 7, rounds = \[1,3,5,7\]
**Output:** \[1,2,3,4,5,6,7\]

**Constraints:**

*   `2 <= n <= 100`
*   `1 <= m <= 100`
*   `rounds.length == m + 1`
*   `1 <= rounds[i] <= n`
*   `rounds[i] != rounds[i + 1]` for `0 <= i < m`","```python
def busy_student(start_time, end_time, query_time):
    count = 0
    for i in range(len(start_time)):
        if start_time[i] <= query_time <= end_time[i]:
            count += 1
    return count
```
"
Matrix Diagonal Sum,Easy,"Given a square matrix `mat`, return the sum of the matrix diagonals.

Only include the sum of all the elements on the primary diagonal and all the elements on the secondary diagonal that are not part of the primary diagonal.

**Example 1:**

**Input:** mat = \[\[**1**,2,**3**\],
              \[4,**5**,6\],
              \[**7**,8,**9**\]\]
**Output:** 25
**Explanation:** Diagonals sum: 1 + 5 + 9 + 3 + 7 = 25
Notice that element mat\[1\]\[1\] = 5 is counted only once.

**Example 2:**

**Input:** mat = \[\[**1**,1,1,**1**\],
              \[1,**1**,**1**,1\],
              \[1,**1**,**1**,1\],
              \[**1**,1,1,**1**\]\]
**Output:** 8

**Example 3:**

**Input:** mat = \[\[**5**\]\]
**Output:** 5

**Constraints:**

*   `n == mat.length == mat[i].length`
*   `1 <= n <= 100`
*   `1 <= mat[i][j] <= 100`","```python
class SubrectangleQueries:
    def __init__(self, rectangle: List[List[int]]):
        self.rectangle = rectangle

    def updateSubrectangle(self, row1: int, col1: int, row2: int, col2: int, newValue: int) -> None:
        for i in range(row1, row2 + 1):
            for j in range(col1, col2 + 1):
                self.rectangle[i][j] = newValue

    def getValue(self, row: int, col: int) -> int:
        return self.rectangle[row][col]
```
"
Special Positions in a Binary Matrix,Easy,"Given an `m x n` binary matrix `mat`, return _the number of special positions in_ `mat`_._

A position `(i, j)` is called **special** if `mat[i][j] == 1` and all other elements in row `i` and column `j` are `0` (rows and columns are **0-indexed**).

**Example 1:**

**Input:** mat = \[\[1,0,0\],\[0,0,1\],\[1,0,0\]\]
**Output:** 1
**Explanation:** (1, 2) is a special position because mat\[1\]\[2\] == 1 and all other elements in row 1 and column 2 are 0.

**Example 2:**

**Input:** mat = \[\[1,0,0\],\[0,1,0\],\[0,0,1\]\]
**Output:** 3
**Explanation:** (0, 0), (1, 1) and (2, 2) are special positions.

**Constraints:**

*   `m == mat.length`
*   `n == mat[i].length`
*   `1 <= m, n <= 100`
*   `mat[i][j]` is either `0` or `1`.","```python
class BrowserHistory:

    def __init__(self, homepage: str):
        self.history = [homepage]
        self.current_index = 0

    def visit(self, url: str):
        self.history = self.history[:self.current_index + 1]
        self.history.append(url)
        self.current_index += 1

    def back(self, steps: int) -> str:
        self.current_index -= min(steps, self.current_index)
        return self.history[self.current_index]

    def forward(self, steps:int) -> str:
        self.current_index += min(steps, len(self.history) - 1 - self.current_index)
        return self.history[self.current_index]
```

"
Design Parking System,Easy,"Design a parking system for a parking lot. The parking lot has three kinds of parking spaces: big, medium, and small, with a fixed number of slots for each size.

Implement the `ParkingSystem` class:

*   `ParkingSystem(int big, int medium, int small)` Initializes object of the `ParkingSystem` class. The number of slots for each parking space are given as part of the constructor.
*   `bool addCar(int carType)` Checks whether there is a parking space of `carType` for the car that wants to get into the parking lot. `carType` can be of three kinds: big, medium, or small, which are represented by `1`, `2`, and `3` respectively. **A car can only park in a parking space of its** `carType`. If there is no space available, return `false`, else park the car in that size space and return `true`.

**Example 1:**

**Input**
\[ ""ParkingSystem "",  ""addCar "",  ""addCar "",  ""addCar "",  ""addCar ""\]
\[\[1, 1, 0\], \[1\], \[2\], \[3\], \[1\]\]
**Output**
\[null, true, true, false, false\]

**Explanation**
ParkingSystem parkingSystem = new ParkingSystem(1, 1, 0);
parkingSystem.addCar(1); // return true because there is 1 available slot for a big car
parkingSystem.addCar(2); // return true because there is 1 available slot for a medium car
parkingSystem.addCar(3); // return false because there is no available slot for a small car
parkingSystem.addCar(1); // return false because there is no available slot for a big car. It is already occupied.

**Constraints:**

*   `0 <= big, medium, small <= 1000`
*   `carType` is `1`, `2`, or `3`
*   At most `1000` calls will be made to `addCar`","```python
def runningSum(nums):
    for i in range(1, len(nums)):
        nums[i] += nums[i - 1]
    return nums
```
"
Get Maximum in Generated Array,Easy,"You are given an integer `n`. A **0-indexed** integer array `nums` of length `n + 1` is generated in the following way:

*   `nums[0] = 0`
*   `nums[1] = 1`
*   `nums[2 * i] = nums[i]` when `2 <= 2 * i <= n`
*   `nums[2 * i + 1] = nums[i] + nums[i + 1]` when `2 <= 2 * i + 1 <= n`

Return _the **maximum** integer in the array_ `nums`​​​.

**Example 1:**

**Input:** n = 7
**Output:** 3
**Explanation:** According to the given rules:
  nums\[0\] = 0
  nums\[1\] = 1
  nums\[(1 \* 2) = 2\] = nums\[1\] = 1
  nums\[(1 \* 2) + 1 = 3\] = nums\[1\] + nums\[2\] = 1 + 1 = 2
  nums\[(2 \* 2) = 4\] = nums\[2\] = 1
  nums\[(2 \* 2) + 1 = 5\] = nums\[2\] + nums\[3\] = 1 + 2 = 3
  nums\[(3 \* 2) = 6\] = nums\[3\] = 2
  nums\[(3 \* 2) + 1 = 7\] = nums\[3\] + nums\[4\] = 2 + 1 = 3
Hence, nums = \[0,1,1,2,1,3,2,3\], and the maximum is max(0,1,1,2,1,3,2,3) = 3.

**Example 2:**

**Input:** n = 2
**Output:** 1
**Explanation:** According to the given rules, nums = \[0,1,1\]. The maximum is max(0,1,1) = 1.

**Example 3:**

**Input:** n = 3
**Output:** 2
**Explanation:** According to the given rules, nums = \[0,1,1,2\]. The maximum is max(0,1,1,2) = 2.

**Constraints:**

*   `0 <= n <= 100`","```python
def findKthPositive(arr, k):
    i, num = 0, 1
    while k > 0:
        if i < len(arr) and arr[i] == num:
            i += 1
        else:
            k -= 1
        num += 1
    return num - 1
```
"
Design an Ordered Stream,Easy,"There is a stream of `n` `(idKey, value)` pairs arriving in an **arbitrary** order, where `idKey` is an integer between `1` and `n` and `value` is a string. No two pairs have the same `id`.

Design a stream that returns the values in **increasing order of their IDs** by returning a **chunk** (list) of values after each insertion. The concatenation of all the **chunks** should result in a list of the sorted values.

Implement the `OrderedStream` class:

*   `OrderedStream(int n)` Constructs the stream to take `n` values.
*   `String[] insert(int idKey, String value)` Inserts the pair `(idKey, value)` into the stream, then returns the **largest possible chunk** of currently inserted values that appear next in the order.

**Example:**

**Input**
\[ ""OrderedStream "",  ""insert "",  ""insert "",  ""insert "",  ""insert "",  ""insert ""\]
\[\[5\], \[3,  ""ccccc ""\], \[1,  ""aaaaa ""\], \[2,  ""bbbbb ""\], \[5,  ""eeeee ""\], \[4,  ""ddddd ""\]\]
**Output**
\[null, \[\], \[ ""aaaaa ""\], \[ ""bbbbb "",  ""ccccc ""\], \[\], \[ ""ddddd "",  ""eeeee ""\]\]

**Explanation**
// Note that the values ordered by ID is \[ ""aaaaa "",  ""bbbbb "",  ""ccccc "",  ""ddddd "",  ""eeeee ""\].
OrderedStream os = new OrderedStream(5);
os.insert(3,  ""ccccc ""); // Inserts (3,  ""ccccc ""), returns \[\].
os.insert(1,  ""aaaaa ""); // Inserts (1,  ""aaaaa ""), returns \[ ""aaaaa ""\].
os.insert(2,  ""bbbbb ""); // Inserts (2,  ""bbbbb ""), returns \[ ""bbbbb "",  ""ccccc ""\].
os.insert(5,  ""eeeee ""); // Inserts (5,  ""eeeee ""), returns \[\].
os.insert(4,  ""ddddd ""); // Inserts (4,  ""ddddd ""), returns \[ ""ddddd "",  ""eeeee ""\].
// Concatentating all the chunks returned:
// \[\] + \[ ""aaaaa ""\] + \[ ""bbbbb "",  ""ccccc ""\] + \[\] + \[ ""ddddd "",  ""eeeee ""\] = \[ ""aaaaa "",  ""bbbbb "",  ""ccccc "",  ""ddddd "",  ""eeeee ""\]
// The resulting order is the same as the order above.

**Constraints:**

*   `1 <= n <= 1000`
*   `1 <= id <= n`
*   `value.length == 5`
*   `value` consists only of lowercase letters.
*   Each call to `insert` will have a unique `id.`
*   Exactly `n` calls will be made to `insert`.","```python
def count_good_triplets(arr, a, b, c):
    count = 0
    for i in range(len(arr)):
        for j in range(i+1, len(arr)):
            if abs(arr[i] - arr[j]) <= a:
                for k in range(j+1, len(arr)):
                    if abs(arr[j] - arr[k]) <= b and abs(arr[i] - arr[k]) <= c:
                        count += 1
    return count
```

"
Check If Two String Arrays are Equivalent,Easy,"Given two string arrays `word1` and `word2`, return `true` _if the two arrays **represent** the same string, and_ `false` _otherwise._

A string is **represented** by an array if the array elements concatenated **in order** forms the string.

**Example 1:**

**Input:** word1 = \[ ""ab "",  ""c ""\], word2 = \[ ""a "",  ""bc ""\]
**Output:** true
**Explanation:**
word1 represents string  ""ab "" +  ""c "" ->  ""abc ""
word2 represents string  ""a "" +  ""bc "" ->  ""abc ""
The strings are the same, so return true.

**Example 2:**

**Input:** word1 = \[ ""a "",  ""cb ""\], word2 = \[ ""ab "",  ""c ""\]
**Output:** false

**Example 3:**

**Input:** word1  = \[ ""abc "",  ""d "",  ""defg ""\], word2 = \[ ""abcddefg ""\]
**Output:** true

**Constraints:**

*   `1 <= word1.length, word2.length <= 103`
*   `1 <= word1[i].length, word2[i].length <= 103`
*   `1 <= sum(word1[i].length), sum(word2[i].length) <= 103`
*   `word1[i]` and `word2[i]` consist of lowercase letters.","```python
def min_num_operations(nums):
    result = 0
    highest_bit = [0] * 32
    for num in nums:
        for j in range(32):
            if num & (1 << j):
                highest_bit[j] += 1
    for count in highest_bit:
        result = max(result, count)
    return result + 31
```
"
Richest Customer Wealth,Easy,"You are given an `m x n` integer grid `accounts` where `accounts[i][j]` is the amount of money the `i​​​​​​​​​​​th​​​​` customer has in the `j​​​​​​​​​​​th`​​​​ bank. Return _the **wealth** that the richest customer has._

A customer's **wealth** is the amount of money they have in all their bank accounts. The richest customer is the customer that has the maximum **wealth**.

**Example 1:**

**Input:** accounts = \[\[1,2,3\],\[3,2,1\]\]
**Output:** 6
**Explanation****:**
`1st customer has wealth = 1 + 2 + 3 = 6`
`2nd customer has wealth = 3 + 2 + 1 = 6`
Both customers are considered the richest with a wealth of 6 each, so return 6.

**Example 2:**

**Input:** accounts = \[\[1,5\],\[7,3\],\[3,5\]\]
**Output:** 10
**Explanation**: 
1st customer has wealth = 6
2nd customer has wealth = 10 
3rd customer has wealth = 8
The 2nd customer is the richest with a wealth of 10.

**Example 3:**

**Input:** accounts = \[\[2,8,7\],\[7,1,3\],\[1,9,5\]\]
**Output:** 17

**Constraints:**

*   `m == accounts.length`
*   `n == accounts[i].length`
*   `1 <= m, n <= 50`
*   `1 <= accounts[i][j] <= 100`","```python
def maximumWealth(accounts):
    max_wealth = 0
    for customer in accounts:
        wealth = sum(customer)
        max_wealth = max(max_wealth, wealth)
    return max_wealth
```
"
Count the Number of Consistent Strings,Easy,"You are given a string `allowed` consisting of **distinct** characters and an array of strings `words`. A string is **consistent** if all characters in the string appear in the string `allowed`.

Return _the number of **consistent** strings in the array_ `words`.

**Example 1:**

**Input:** allowed =  ""ab "", words = \[ ""ad "", ""bd "", ""aaab "", ""baa "", ""badab ""\]
**Output:** 2
**Explanation:** Strings  ""aaab "" and  ""baa "" are consistent since they only contain characters 'a' and 'b'.

**Example 2:**

**Input:** allowed =  ""abc "", words = \[ ""a "", ""b "", ""c "", ""ab "", ""ac "", ""bc "", ""abc ""\]
**Output:** 7
**Explanation:** All strings are consistent.

**Example 3:**

**Input:** allowed =  ""cad "", words = \[ ""cc "", ""acd "", ""b "", ""ba "", ""bac "", ""bad "", ""ac "", ""d ""\]
**Output:** 4
**Explanation:** Strings  ""cc "",  ""acd "",  ""ac "", and  ""d "" are consistent.

**Constraints:**

*   `1 <= words.length <= 104`
*   `1 <= allowed.length <= 26`
*   `1 <= words[i].length <= 10`
*   The characters in `allowed` are **distinct**.
*   `words[i]` and `allowed` contain only lowercase English letters.","```python
def find_latest_step(arr, m):
    n = len(arr)
    length_left, length_right = [0] * (n + 2), [0] * (n + 2)
    count, result = 0, -1

    for i, pos in enumerate(arr):
        left_length = length_right[pos - 1]
        right_length = length_left[pos + 1]
        new_length = left_length + right_length + 1

        if left_length == m or right_length == m:
            count -= 1

        if new_length == m:
            count += 1

        if new_length > 0:
            length_left[pos - left_length] = new_length
            length_right[pos + right_length] = new_length
            result = i + 1

    return result if count > 0 else -1
```

"
Reformat Phone Number,Easy,"You are given a phone number as a string `number`. `number` consists of digits, spaces `' '`, and/or dashes `'-'`.

You would like to reformat the phone number in a certain manner. Firstly, **remove** all spaces and dashes. Then, **group** the digits from left to right into blocks of length 3 **until** there are 4 or fewer digits. The final digits are then grouped as follows:

*   2 digits: A single block of length 2.
*   3 digits: A single block of length 3.
*   4 digits: Two blocks of length 2 each.

The blocks are then joined by dashes. Notice that the reformatting process should **never** produce any blocks of length 1 and produce **at most** two blocks of length 2.

Return _the phone number after formatting._

**Example 1:**

**Input:** number =  ""1-23-45 6 ""
**Output:**  ""123-456 ""
**Explanation:** The digits are  ""123456 "".
Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is  ""123 "".
Step 2: There are 3 digits remaining, so put them in a single block of length 3. The 2nd block is  ""456 "".
Joining the blocks gives  ""123-456 "".

**Example 2:**

**Input:** number =  ""123 4-567 ""
**Output:**  ""123-45-67 ""
**Explanation:** The digits are  ""1234567 "".
Step 1: There are more than 4 digits, so group the next 3 digits. The 1st block is  ""123 "".
Step 2: There are 4 digits left, so split them into two blocks of length 2. The blocks are  ""45 "" and  ""67 "".
Joining the blocks gives  ""123-45-67 "".

**Example 3:**

**Input:** number =  ""123 4-5678 ""
**Output:**  ""123-456-78 ""
**Explanation:** The digits are  ""12345678 "".
Step 1: The 1st block is  ""123 "".
Step 2: The 2nd block is  ""456 "".
Step 3: There are 2 digits left, so put them in a single block of length 2. The 3rd block is  ""78 "".
Joining the blocks gives  ""123-456-78 "".

**Constraints:**

*   `2 <= number.length <= 100`
*   `number` consists of digits and the characters `'-'` and `' '`.
*   There are at least **two** digits in `number`.","```python
def min_subarray(nums, p):
    n = len(nums)
    need, cur, res = 0, 0, n
    last_seen = {}

    for num in nums:
        need = (need + num) % p

    if need == 0:
        return 0

    last_seen[cur] = -1
    for i, num in enumerate(nums):
        cur = (cur + num) % p
        last_seen[cur] = i
        want = (cur - need + p) % p
        if want in last_seen:
            res = min(res, i - last_seen[want])

    return res if res != n else -1
```

"
Number of Students Unable to Eat Lunch,Easy,"The school cafeteria offers circular and square sandwiches at lunch break, referred to by numbers `0` and `1` respectively. All students stand in a queue. Each student either prefers square or circular sandwiches.

The number of sandwiches in the cafeteria is equal to the number of students. The sandwiches are placed in a **stack**. At each step:

*   If the student at the front of the queue **prefers** the sandwich on the top of the stack, they will **take it** and leave the queue.
*   Otherwise, they will **leave it** and go to the queue's end.

This continues until none of the queue students want to take the top sandwich and are thus unable to eat.

You are given two integer arrays `students` and `sandwiches` where `sandwiches[i]` is the type of the `i​​​​​​th` sandwich in the stack (`i = 0` is the top of the stack) and `students[j]` is the preference of the `j​​​​​​th` student in the initial queue (`j = 0` is the front of the queue). Return _the number of students that are unable to eat._

**Example 1:**

**Input:** students = \[1,1,0,0\], sandwiches = \[0,1,0,1\]
**Output:** 0 
**Explanation:**
- Front student leaves the top sandwich and returns to the end of the line making students = \[1,0,0,1\].
- Front student leaves the top sandwich and returns to the end of the line making students = \[0,0,1,1\].
- Front student takes the top sandwich and leaves the line making students = \[0,1,1\] and sandwiches = \[1,0,1\].
- Front student leaves the top sandwich and returns to the end of the line making students = \[1,1,0\].
- Front student takes the top sandwich and leaves the line making students = \[1,0\] and sandwiches = \[0,1\].
- Front student leaves the top sandwich and returns to the end of the line making students = \[0,1\].
- Front student takes the top sandwich and leaves the line making students = \[1\] and sandwiches = \[1\].
- Front student takes the top sandwich and leaves the line making students = \[\] and sandwiches = \[\].
Hence all students are able to eat.

**Example 2:**

**Input:** students = \[1,1,1,0,0,1\], sandwiches = \[1,0,0,0,1,1\]
**Output:** 3

**Constraints:**

*   `1 <= students.length, sandwiches.length <= 100`
*   `students.length == sandwiches.length`
*   `sandwiches[i]` is `0` or `1`.
*   `students[i]` is `0` or `1`.","```python
def min_time_to_remove_balloons(colors, neededTime):
    n = len(colors)
    INF = 10**9
    dp = [[INF] * 26 for _ in range(n)]

    for color in range(26):
        if colors[0] != chr(ord('A') + color):
            dp[0][color] = neededTime[0]

    for i in range(1, n):
        for color1 in range(26):
            for color2 in range(26):
                if color1 != color2 and colors[i] != chr(ord('A') + color1):
                    dp[i][color1] = min(dp[i][color1], dp[i-1][color2] + neededTime[i])

    ans = INF
    for color in range(26):
        ans = min(ans, dp[n-1][color])

    return ans
```

"
Determine if String Halves Are Alike,Easy,"You are given a string `s` of even length. Split this string into two halves of equal lengths, and let `a` be the first half and `b` be the second half.

Two strings are **alike** if they have the same number of vowels (`'a'`, `'e'`, `'i'`, `'o'`, `'u'`, `'A'`, `'E'`, `'I'`, `'O'`, `'U'`). Notice that `s` contains uppercase and lowercase letters.

Return `true` _if_ `a` _and_ `b` _are **alike**_. Otherwise, return `false`.

**Example 1:**

**Input:** s =  ""book ""
**Output:** true
**Explanation:** a =  ""bo "" and b =  ""ok "". a has 1 vowel and b has 1 vowel. Therefore, they are alike.

**Example 2:**

**Input:** s =  ""textbook ""
**Output:** false
**Explanation:** a =  ""text "" and b =  ""book "". a has 1 vowel whereas b has 2. Therefore, they are not alike.
Notice that the vowel o is counted twice.

**Constraints:**

*   `2 <= s.length <= 1000`
*   `s.length` is even.
*   `s` consists of **uppercase and lowercase** letters.","```python
def numSpecial(mat):
    m, n = len(mat), len(mat[0])
    row, col = [0] * m, [0] * n

    for i in range(m):
        for j in range(n):
            if mat[i][j] == 1:
                row[i] += 1
                col[j] += 1

    special_positions = 0
    for i in range(m):
        for j in range(n):
            if mat[i][j] == 1 and row[i] == 1 and col[j] == 1:
                special_positions += 1

    return special_positions
```
"
Maximum Units on a Truck,Easy,"You are assigned to put some amount of boxes onto **one truck**. You are given a 2D array `boxTypes`, where `boxTypes[i] = [numberOfBoxesi, numberOfUnitsPerBoxi]`:

*   `numberOfBoxesi` is the number of boxes of type `i`.
*   `numberOfUnitsPerBoxi` is the number of units in each box of the type `i`.

You are also given an integer `truckSize`, which is the **maximum** number of **boxes** that can be put on the truck. You can choose any boxes to put on the truck as long as the number of boxes does not exceed `truckSize`.

Return _the **maximum** total number of **units** that can be put on the truck._

**Example 1:**

**Input:** boxTypes = \[\[1,3\],\[2,2\],\[3,1\]\], truckSize = 4
**Output:** 8
**Explanation:** There are:
- 1 box of the first type that contains 3 units.
- 2 boxes of the second type that contain 2 units each.
- 3 boxes of the third type that contain 1 unit each.
You can take all the boxes of the first and second types, and one box of the third type.
The total number of units will be = (1 \* 3) + (2 \* 2) + (1 \* 1) = 8.

**Example 2:**

**Input:** boxTypes = \[\[5,10\],\[2,5\],\[4,7\],\[3,9\]\], truckSize = 10
**Output:** 91

**Constraints:**

*   `1 <= boxTypes.length <= 1000`
*   `1 <= numberOfBoxesi, numberOfUnitsPerBoxi <= 1000`
*   `1 <= truckSize <= 106`","```python
import heapq

def busiest_servers(k, arrival, load):
    server_requests = [0] * k
    pq = []
    available_servers = list(range(k))

    for i in range(len(arrival)):
        while pq and pq[0][0] <= arrival[i]:
            _, server_id = heapq.heappop(pq)
            available_servers.append(server_id)

        if available_servers:
            server_id = available_servers.pop(0)
            server_requests[server_id] += 1
            heapq.heappush(pq, (arrival[i] + load[i], server_id))

    max_requests = max(server_requests)
    return [i for i in range(k) if server_requests[i] == max_requests]
```

"
Calculate Money in Leetcode Bank,Easy,"Hercy wants to save money for his first car. He puts money in the Leetcode bank **every day**.

He starts by putting in `$1` on Monday, the first day. Every day from Tuesday to Sunday, he will put in `$1` more than the day before. On every subsequent Monday, he will put in `$1` more than the **previous Monday**.

Given `n`, return _the total amount of money he will have in the Leetcode bank at the end of the_ `nth` _day._

**Example 1:**

**Input:** n = 4
**Output:** 10
**Explanation:** After the 4th day, the total is 1 + 2 + 3 + 4 = 10.

**Example 2:**

**Input:** n = 10
**Output:** 37
**Explanation:** After the 10th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4) = 37. Notice that on the 2nd Monday, Hercy only puts in $2.

**Example 3:**

**Input:** n = 20
**Output:** 96
**Explanation:** After the 20th day, the total is (1 + 2 + 3 + 4 + 5 + 6 + 7) + (2 + 3 + 4 + 5 + 6 + 7 + 8) + (3 + 4 + 5 + 6 + 7 + 8) = 96.

**Constraints:**

*   `1 <= n <= 1000`","```python
def maxProductPath(grid):
    m, n, mod = len(grid), len(grid[0]), int(1e9 + 7)
    dp = [[[0, 0] for _ in range(n)] for _ in range(m)]
    
    dp[0][0] = [grid[0][0], grid[0][0]]
    
    for i in range(1, m):
        dp[i][0] = [dp[i - 1][0][0] * grid[i][0], dp[i - 1][0][0] * grid[i][0]]
    for j in range(1, n):
        dp[0][j] = [dp[0][j - 1][0] * grid[0][j], dp[0][j - 1][0] * grid[0][j]]
    
    for i in range(1, m):
        for j in range(1, n):
            if grid[i][j] < 0:
                dp[i][j][0] = min(dp[i - 1][j][1], dp[i][j - 1][1]) * grid[i][j]
                dp[i][j][1] = max(dp[i - 1][j][0], dp[i][j - 1][0]) * grid[i][j]
            else:
                dp[i][j][0] = max(dp[i - 1][j][0], dp[i][j - 1][0]) * grid[i][j]
                dp[i][j][1] = min(dp[i - 1][j][1], dp[i][j - 1][1]) * grid[i][j]
            
    return dp[m - 1][n - 1][0] % mod if dp[m - 1][n - 1][0] >= 0 else -1
```

"
Decode XORed Array,Easy,"There is a **hidden** integer array `arr` that consists of `n` non-negative integers.

It was encoded into another integer array `encoded` of length `n - 1`, such that `encoded[i] = arr[i] XOR arr[i + 1]`. For example, if `arr = [1,0,2,1]`, then `encoded = [1,2,3]`.

You are given the `encoded` array. You are also given an integer `first`, that is the first element of `arr`, i.e. `arr[0]`.

Return _the original array_ `arr`. It can be proved that the answer exists and is unique.

**Example 1:**

**Input:** encoded = \[1,2,3\], first = 1
**Output:** \[1,0,2,1\]
**Explanation:** If arr = \[1,0,2,1\], then first = 1 and encoded = \[1 XOR 0, 0 XOR 2, 2 XOR 1\] = \[1,2,3\]

**Example 2:**

**Input:** encoded = \[6,2,7,3\], first = 4
**Output:** \[4,2,0,7,4\]

**Constraints:**

*   `2 <= n <= 104`
*   `encoded.length == n - 1`
*   `0 <= encoded[i] <= 105`
*   `0 <= first <= 105`","```python
def minOperations(logs):
    depth = 0
    for log in logs:
        if log == ""../"":
            if depth > 0:
                depth -= 1
        elif log != ""./"":
            depth += 1
    return depth
```

"
Maximum Number of Balls in a Box,Easy,"You are working in a ball factory where you have `n` balls numbered from `lowLimit` up to `highLimit` **inclusive** (i.e., `n == highLimit - lowLimit + 1`), and an infinite number of boxes numbered from `1` to `infinity`.

Your job at this factory is to put each ball in the box with a number equal to the sum of digits of the ball's number. For example, the ball number `321` will be put in the box number `3 + 2 + 1 = 6` and the ball number `10` will be put in the box number `1 + 0 = 1`.

Given two integers `lowLimit` and `highLimit`, return _the number of balls in the box with the most balls._

**Example 1:**

**Input:** lowLimit = 1, highLimit = 10
**Output:** 2
**Explanation:**
Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...
Ball Count:  2 1 1 1 1 1 1 1 1 0  0  ...
Box 1 has the most number of balls with 2 balls.

**Example 2:**

**Input:** lowLimit = 5, highLimit = 15
**Output:** 2
**Explanation:**
Box Number:  1 2 3 4 5 6 7 8 9 10 11 ...
Ball Count:  1 1 1 1 2 2 1 1 1 0  0  ...
Boxes 5 and 6 have the most number of balls with 2 balls in each.

**Example 3:**

**Input:** lowLimit = 19, highLimit = 28
**Output:** 2
**Explanation:**
Box Number:  1 2 3 4 5 6 7 8 9 10 11 12 ...
Ball Count:  0 1 1 1 1 1 1 1 1 2  0  0  ...
Box 10 has the most number of balls with 2 balls.

**Constraints:**

*   `1 <= lowLimit <= highLimit <= 105`","```python
def maxWidthOfVerticalArea(points):
    xs = sorted([point[0] for point in points])
    max_width = 0
    for i in range(1, len(xs)):
        max_width = max(max_width, xs[i] - xs[i - 1])
    return max_width
```

"
Sum of Unique Elements,Easy,"You are given an integer array `nums`. The unique elements of an array are the elements that appear **exactly once** in the array.

Return _the **sum** of all the unique elements of_ `nums`.

**Example 1:**

**Input:** nums = \[1,2,3,2\]
**Output:** 4
**Explanation:** The unique elements are \[1,3\], and the sum is 4.

**Example 2:**

**Input:** nums = \[1,1,1,1,1\]
**Output:** 0
**Explanation:** There are no unique elements, and the sum is 0.

**Example 3:**

**Input:** nums = \[1,2,3,4,5\]
**Output:** 15
**Explanation:** The unique elements are \[1,2,3,4,5\], and the sum is 15.

**Constraints:**

*   `1 <= nums.length <= 100`
*   `1 <= nums[i] <= 100`","```python
def bestTeamScore(scores, ages):
    players = sorted(zip(ages, scores))
    n = len(players)
    dp = [0] * n
    best_score = 0
    
    for i in range(n):
        dp[i] = players[i][1]
        for j in range(i):
            if players[i][1] >= players[j][1]:
                dp[i] = max(dp[i], dp[j] + players[i][1])
        best_score = max(best_score, dp[i])
    
    return best_score
```

"
Check if Array Is Sorted and Rotated,Easy,"Given an array `nums`, return `true` _if the array was originally sorted in non-decreasing order, then rotated **some** number of positions (including zero)_. Otherwise, return `false`.

There may be **duplicates** in the original array.

**Note:** An array `A` rotated by `x` positions results in an array `B` of the same length such that `A[i] == B[(i+x) % A.length]`, where `%` is the modulo operation.

**Example 1:**

**Input:** nums = \[3,4,5,1,2\]
**Output:** true
**Explanation:** \[1,2,3,4,5\] is the original sorted array.
You can rotate the array by x = 3 positions to begin on the the element of value 3: \[3,4,5,1,2\].

**Example 2:**

**Input:** nums = \[2,1,3,4\]
**Output:** false
**Explanation:** There is no sorted array once rotated that can make nums.

**Example 3:**

**Input:** nums = \[1,2,3\]
**Output:** true
**Explanation:** \[1,2,3\] is the original sorted array.
You can rotate the array by x = 0 positions (i.e. no rotation) to make nums.

**Constraints:**

*   `1 <= nums.length <= 100`
*   `1 <= nums[i] <= 100`","```python
def check_arithmetic_subarrays(nums, l, r):
    results = []
    for i in range(len(l)):
        subarray = sorted(nums[l[i]:r[i] + 1])
        is_arithmetic = True
        diff = subarray[1] - subarray[0]
        for j in range(1, len(subarray) - 1):
            if subarray[j + 1] - subarray[j] != diff:
                is_arithmetic = False
                break
        results.append(is_arithmetic)
    return results
```

"
Minimum Changes To Make Alternating Binary String,Easy,"You are given a string `s` consisting only of the characters `'0'` and `'1'`. In one operation, you can change any `'0'` to `'1'` or vice versa.

The string is called alternating if no two adjacent characters are equal. For example, the string `""010 ""` is alternating, while the string `""0100 ""` is not.

Return _the **minimum** number of operations needed to make_ `s` _alternating_.

**Example 1:**

**Input:** s =  ""0100 ""
**Output:** 1
**Explanation:** If you change the last character to '1', s will be  ""0101 "", which is alternating.

**Example 2:**

**Input:** s =  ""10 ""
**Output:** 0
**Explanation:** s is already alternating.

**Example 3:**

**Input:** s =  ""1111 ""
**Output:** 2
**Explanation:** You need two operations to reach  ""0101 "" or  ""1010 "".

**Constraints:**

*   `1 <= s.length <= 104`
*   `s[i]` is either `'0'` or `'1'`.","```python
from typing import List

def canDistribute(nums: List[int], quantity: List[int]) -> bool:
    counts = [0] * 51
    for num in nums:
        counts[num] += 1

    quantity.sort(reverse=True)

    def dfs(idx: int) -> bool:
        if idx == len(quantity):
            return True
        for i in range(1, 51):
            if counts[i] >= quantity[idx]:
                counts[i] -= quantity[idx]
                if dfs(idx + 1):
                    return True
                counts[i] += quantity[idx]
        return False

    return dfs(0)
```

"
Check if Binary String Has at Most One Segment of Ones,Easy,"Given a binary string `s` **​​​​​without leading zeros**, return `true`​​​ _if_ `s` _contains **at most one contiguous segment of ones**_. Otherwise, return `false`.

**Example 1:**

**Input:** s =  ""1001 ""
**Output:** false
**Explanation:** The ones do not form a contiguous segment.

**Example 2:**

**Input:** s =  ""110 ""
**Output:** true

**Constraints:**

*   `1 <= s.length <= 100`
*   `s[i]`​​​​ is either `'0'` or `'1'`.
*   `s[0]` is `'1'`.","```python
def minimum_energy(tasks):
    tasks.sort(key=lambda task: task[1] - task[0], reverse=True)

    energy = 0
    for task in tasks:
        energy = max(energy + task[0], task[1])
    return energy
```
"
Find Center of Star Graph,Easy,"There is an undirected **star** graph consisting of `n` nodes labeled from `1` to `n`. A star graph is a graph where there is one **center** node and **exactly** `n - 1` edges that connect the center node with every other node.

You are given a 2D integer array `edges` where each `edges[i] = [ui, vi]` indicates that there is an edge between the nodes `ui` and `vi`. Return the center of the given star graph.

**Example 1:**

**Input:** edges = \[\[1,2\],\[2,3\],\[4,2\]\]
**Output:** 2
**Explanation:** As shown in the figure above, node 2 is connected to every other node, so 2 is the center.

**Example 2:**

**Input:** edges = \[\[1,2\],\[5,1\],\[1,3\],\[1,4\]\]
**Output:** 1

**Constraints:**

*   `3 <= n <= 105`
*   `edges.length == n - 1`
*   `edges[i].length == 2`
*   `1 <= ui, vi <= n`
*   `ui != vi`
*   The given `edges` represent a valid star graph.","```python
def maximum_wealth(accounts):
    return max(sum(customer) for customer in accounts)
```

"
Number of Different Integers in a String,Easy,"You are given a string `word` that consists of digits and lowercase English letters.

You will replace every non-digit character with a space. For example, `""a123bc34d8ef34 ""` will become `"" 123 34 8 34 ""`. Notice that you are left with some integers that are separated by at least one space: `""123 ""`, `""34 ""`, `""8 ""`, and `""34 ""`.

Return _the number of **different** integers after performing the replacement operations on_ `word`.

Two integers are considered different if their decimal representations **without any leading zeros** are different.

**Example 1:**

**Input:** word =  ""a123bc34d8ef34 ""
**Output:** 3
**Explanation:** The three different integers are  ""123 "",  ""34 "", and  ""8 "". Notice that  ""34 "" is only counted once.

**Example 2:**

**Input:** word =  ""leet1234code234 ""
**Output:** 2

**Example 3:**

**Input:** word =  ""a1b01c001 ""
**Output:** 1
**Explanation:** The three integers  ""1 "",  ""01 "", and  ""001 "" all represent the same integer because
the leading zeros are ignored when comparing their decimal values.

**Constraints:**

*   `1 <= word.length <= 1000`
*   `word` consists of digits and lowercase English letters.","```python
def min_moves(nums, k):
    n = len(nums)
    ones = [i - j for i, j in enumerate(nums) if j == 1]
    
    moves = sum(ones[i] - ones[k // 2] for i in range(k))
    min_moves = moves
    
    for i in range(k, len(ones)):
        moves += ones[i] - ones[i - k] - k
        min_moves = min(min_moves, moves)
    
    return min_moves
```

"
Faulty Sensor,Easy,"An experiment is being conducted in a lab. To ensure accuracy, there are **two** sensors collecting data simultaneously. You are given two arrays `sensor1` and `sensor2`, where `sensor1[i]` and `sensor2[i]` are the `ith` data points collected by the two sensors.

However, this type of sensor has a chance of being defective, which causes **exactly one** data point to be dropped. After the data is dropped, all the data points to the **right** of the dropped data are **shifted** one place to the left, and the last data point is replaced with some **random value**. It is guaranteed that this random value will **not** be equal to the dropped value.

*   For example, if the correct data is `[1,2,**3**,4,5]` and `3` is dropped, the sensor could return `[1,2,4,5,**7**]` (the last position can be **any** value, not just `7`).

We know that there is a defect in **at most one** of the sensors. Return _the sensor number (_`1` _or_ `2`_) with the defect. If there is **no defect** in either sensor or if it is **impossible** to determine the defective sensor, return_ `-1`_._

**Example 1:**

**Input:** sensor1 = \[2,3,4,5\], sensor2 = \[2,1,3,4\]
**Output:** 1
**Explanation:** Sensor 2 has the correct values.
The second data point from sensor 2 is dropped, and the last value of sensor 1 is replaced by a 5.

**Example 2:**

**Input:** sensor1 = \[2,2,2,2,2\], sensor2 = \[2,2,2,2,5\]
**Output:** -1
**Explanation:** It is impossible to determine which sensor has a defect.
Dropping the last value for either sensor could produce the output for the other sensor.

**Example 3:**

**Input:** sensor1 = \[2,3,2,2,3,2\], sensor2 = \[2,3,2,3,2,7\]
**Output:** 2
**Explanation:** Sensor 1 has the correct values.
The fourth data point from sensor 1 is dropped, and the last value of sensor 1 is replaced by a 7.

**Constraints:**

*   `sensor1.length == sensor2.length`
*   `1 <= sensor1.length <= 100`
*   `1 <= sensor1[i], sensor2[i] <= 100`","```python
def maximizeXor(nums, queries):
    trie = {}
    nums.sort()

    new_queries = sorted([(x, m, i) for i, (x, m) in enumerate(queries)], key=lambda x: x[1])

    ans = [0] * len(queries)

    idx = 0
    for x, m, i in new_queries:
        while idx < len(nums) and nums[idx] <= m:
            t = nums[idx]
            idx += 1
            cur = trie
            for j in range(31, -1, -1):
                bit = (t >> j) & 1
                cur = cur.setdefault(bit, {})
        cur = trie
        xor_value = 0
        for j in range(31, -1, -1):
            bit = (x >> j) & 1
            if 1 ^ bit in cur:
                cur = cur[1 ^ bit]
                xor_value |= 1 << j
            else:
                cur = cur[bit]
        ans[i] = xor_value if cur else -1

    return ans
```

"
Check if the Sentence Is Pangram,Easy,"A **pangram** is a sentence where every letter of the English alphabet appears at least once.

Given a string `sentence` containing only lowercase English letters, return `true` _if_ `sentence` _is a **pangram**, or_ `false` _otherwise._

**Example 1:**

**Input:** sentence =  ""thequickbrownfoxjumpsoverthelazydog ""
**Output:** true
**Explanation:** sentence contains at least one of every letter of the English alphabet.

**Example 2:**

**Input:** sentence =  ""leetcode ""
**Output:** false

**Constraints:**

*   `1 <= sentence.length <= 1000`
*   `sentence` consists of lowercase English letters.","```python
from bisect import bisect_left

def min_operations(target, arr):
    index_map = {num: i for i, num in enumerate(target)}

    lis = []
    for num in arr:
        if num in index_map:
            pos = bisect_left(lis, index_map[num])
            if pos == len(lis):
                lis.append(index_map[num])
            else:
                lis[pos] = index_map[num]

    return len(target) - len(lis)
```
"
Minimum Distance to the Target Element,Easy,"Given an integer array `nums` **(0-indexed)** and two integers `target` and `start`, find an index `i` such that `nums[i] == target` and `abs(i - start)` is **minimized**. Note that `abs(x)` is the absolute value of `x`.

Return `abs(i - start)`.

It is **guaranteed** that `target` exists in `nums`.

**Example 1:**

**Input:** nums = \[1,2,3,4,5\], target = 5, start = 3
**Output:** 1
**Explanation:** nums\[4\] = 5 is the only value equal to target, so the answer is abs(4 - 3) = 1.

**Example 2:**

**Input:** nums = \[1\], target = 1, start = 0
**Output:** 0
**Explanation:** nums\[0\] = 1 is the only value equal to target, so the answer is abs(0 - 0) = 0.

**Example 3:**

**Input:** nums = \[1,1,1,1,1,1,1,1,1,1\], target = 1, start = 0
**Output:** 0
**Explanation:** Every value of nums is 1, but nums\[0\] minimizes abs(i - start), which is abs(0 - 0) = 0.

**Constraints:**

*   `1 <= nums.length <= 1000`
*   `1 <= nums[i] <= 104`
*   `0 <= start < nums.length`
*   `target` is in `nums`.","```python
def sum_of_unique_elements(nums):
    elem_count = {}
    for num in nums:
        elem_count[num] = elem_count.get(num, 0) + 1
    sum = 0
    for elem, count in elem_count.items():
        if count == 1:
            sum += elem
    return sum
```

"
Substrings of Size Three with Distinct Characters,Easy,"A string is **good** if there are no repeated characters.

Given a string `s`​​​​​, return _the number of **good substrings** of length **three** in_ `s`​​​​​​.

Note that if there are multiple occurrences of the same substring, every occurrence should be counted.

A **substring** is a contiguous sequence of characters in a string.

**Example 1:**

**Input:** s =  ""xyzzaz ""
**Output:** 1
**Explanation:** There are 4 substrings of size 3:  ""xyz "",  ""yzz "",  ""zza "", and  ""zaz "". 
The only good substring of length 3 is  ""xyz "".

**Example 2:**

**Input:** s =  ""aababcabc ""
**Output:** 4
**Explanation:** There are 7 substrings of size 3:  ""aab "",  ""aba "",  ""bab "",  ""abc "",  ""bca "",  ""cab "", and  ""abc "".
The good substrings are  ""abc "",  ""bca "",  ""cab "", and  ""abc "".

**Constraints:**

*   `1 <= s.length <= 100`
*   `s`​​​​​​ consists of lowercase English letters.","```python
from collections import deque

def highest_island(is_water):
    m, n = len(is_water), len(is_water[0])
    height = [[-1] * n for _ in range(m)]
    q = deque()

    for i in range(m):
        for j in range(n):
            if is_water[i][j] == 1:
                height[i][j] = 0
                q.append((i, j))

    dx = [-1, 0, 1, 0]
    dy = [0, 1, 0, -1]

    while q:
        x, y = q.popleft()

        for i in range(4):
            newX = x + dx[i]
            newY = y + dy[i]

            if 0 <= newX < m and 0 <= newY < n and height[newX][newY] == -1:
                height[newX][newY] = height[x][y] + 1
                q.append((newX, newY))

    return height
```
"
Determine Whether Matrix Can Be Obtained By Rotation,Easy,"Given two `n x n` binary matrices `mat` and `target`, return `true` _if it is possible to make_ `mat` _equal to_ `target` _by **rotating**_ `mat` _in **90-degree increments**, or_ `false` _otherwise._

**Example 1:**

**Input:** mat = \[\[0,1\],\[1,0\]\], target = \[\[1,0\],\[0,1\]\]
**Output:** true
**Explanation:** We can rotate mat 90 degrees clockwise to make mat equal target.

**Example 2:**

**Input:** mat = \[\[0,1\],\[1,1\]\], target = \[\[1,0\],\[0,1\]\]
**Output:** false
**Explanation:** It is impossible to make mat equal to target by rotating mat.

**Example 3:**

**Input:** mat = \[\[0,0,0\],\[0,1,0\],\[1,1,1\]\], target = \[\[1,1,1\],\[0,1,0\],\[0,0,0\]\]
**Output:** true
**Explanation:** We can rotate mat 90 degrees clockwise two times to make mat equal target.

**Constraints:**

*   `n == mat.length == target.length`
*   `n == mat[i].length == target[i].length`
*   `1 <= n <= 10`
*   `mat[i][j]` and `target[i][j]` are either `0` or `1`.","```python
import heapq

def minimumSize(nums, maxOperations):
    pq = [-num for num in nums] # Negative numbers to simulate max heap
    heapq.heapify(pq)
    while maxOperations > 0:
        maxBalls = -heapq.heappop(pq)
        heapq.heappush(pq, -maxBalls // 2)
        heapq.heappush(pq, -(maxBalls - (maxBalls // 2)))
        maxOperations -= 1
    return -pq[0]
```
"
Check if All the Integers in a Range Are Covered,Easy,"You are given a 2D integer array `ranges` and two integers `left` and `right`. Each `ranges[i] = [starti, endi]` represents an **inclusive** interval between `starti` and `endi`.

Return `true` _if each integer in the inclusive range_ `[left, right]` _is covered by **at least one** interval in_ `ranges`. Return `false` _otherwise_.

An integer `x` is covered by an interval `ranges[i] = [starti, endi]` if `starti <= x <= endi`.

**Example 1:**

**Input:** ranges = \[\[1,2\],\[3,4\],\[5,6\]\], left = 2, right = 5
**Output:** true
**Explanation:** Every integer between 2 and 5 is covered:
- 2 is covered by the first range.
- 3 and 4 are covered by the second range.
- 5 is covered by the third range.

**Example 2:**

**Input:** ranges = \[\[1,10\],\[10,20\]\], left = 21, right = 21
**Output:** false
**Explanation:** 21 is not covered by any range.

**Constraints:**

*   `1 <= ranges.length <= 50`
*   `1 <= starti <= endi <= 50`
*   `1 <= left <= right <= 50`","```python
def isCovered(ranges: List[List[int]], left: int, right: int) -> bool:
    for i in range(left, right + 1):
        found = False
        for _range in ranges:
            if _range[0] <= i <= _range[1]:
                found = True
                break
        if not found:
            return False
    return True
```
"
Largest Odd Number in String,Easy,"You are given a string `num`, representing a large integer. Return _the **largest-valued odd** integer (as a string) that is a **non-empty substring** of_ `num`_, or an empty string_ `"" ""` _if no odd integer exists_.

A **substring** is a contiguous sequence of characters within a string.

**Example 1:**

**Input:** num =  ""52 ""
**Output:**  ""5 ""
**Explanation:** The only non-empty substrings are  ""5 "",  ""2 "", and  ""52 "".  ""5 "" is the only odd number.

**Example 2:**

**Input:** num =  ""4206 ""
**Output:**  "" ""
**Explanation:** There are no odd numbers in  ""4206 "".

**Example 3:**

**Input:** num =  ""35427 ""
**Output:**  ""35427 ""
**Explanation:**  ""35427 "" is already an odd number.

**Constraints:**

*   `1 <= num.length <= 105`
*   `num` only consists of digits and does not contain any leading zeros.","```python
def largest_odd_number(num: str) -> str:
    for i in range(len(num) - 1, -1, -1):
        if int(num[i]) % 2 != 0:
            return num[:i + 1]
    return """"
```
"
Remove One Element to Make the Array Strictly Increasing,Easy,"Given a **0-indexed** integer array `nums`, return `true` _if it can be made **strictly increasing** after removing **exactly one** element, or_ `false` _otherwise. If the array is already strictly increasing, return_ `true`.

The array `nums` is **strictly increasing** if `nums[i - 1] < nums[i]` for each index `(1 <= i < nums.length).`

**Example 1:**

**Input:** nums = \[1,2,10,5,7\]
**Output:** true
**Explanation:** By removing 10 at index 2 from nums, it becomes \[1,2,5,7\].
\[1,2,5,7\] is strictly increasing, so return true.

**Example 2:**

**Input:** nums = \[2,3,1,2\]
**Output:** false
**Explanation:**
\[3,1,2\] is the result of removing the element at index 0.
\[2,1,2\] is the result of removing the element at index 1.
\[2,3,2\] is the result of removing the element at index 2.
\[2,3,1\] is the result of removing the element at index 3.
No resulting array is strictly increasing, so return false.

**Example 3:**

**Input:** nums = \[1,1,1\]
**Output:** false
**Explanation:** The result of removing any element is \[1,1\].
\[1,1\] is not strictly increasing, so return false.

**Constraints:**

*   `2 <= nums.length <= 1000`
*   `1 <= nums[i] <= 1000`","```python
def canBeIncreasing(nums):
    count = 0
    for i in range(1, len(nums)):
        if nums[i - 1] >= nums[i]:
            count += 1
            if count > 1: return False
            if i > 1 and nums[i - 2] >= nums[i] and i < len(nums) - 1 and nums[i - 1] >= nums[i + 1]: return False
    return True
```
"
Maximum Product Difference Between Two Pairs,Easy,"The **product difference** between two pairs `(a, b)` and `(c, d)` is defined as `(a * b) - (c * d)`.

*   For example, the product difference between `(5, 6)` and `(2, 7)` is `(5 * 6) - (2 * 7) = 16`.

Given an integer array `nums`, choose four **distinct** indices `w`, `x`, `y`, and `z` such that the **product difference** between pairs `(nums[w], nums[x])` and `(nums[y], nums[z])` is **maximized**.

Return _the **maximum** such product difference_.

**Example 1:**

**Input:** nums = \[5,6,2,7,4\]
**Output:** 34
**Explanation:** We can choose indices 1 and 3 for the first pair (6, 7) and indices 2 and 4 for the second pair (2, 4).
The product difference is (6 \* 7) - (2 \* 4) = 34.

**Example 2:**

**Input:** nums = \[4,2,5,9,7,4,8\]
**Output:** 64
**Explanation:** We can choose indices 3 and 6 for the first pair (9, 8) and indices 1 and 5 for the second pair (2, 4).
The product difference is (9 \* 8) - (2 \* 4) = 64.

**Constraints:**

*   `4 <= nums.length <= 104`
*   `1 <= nums[i] <= 104`","```python
def min_changes(nums, k):
    n = len(nums)
    xor_prefix = [0] * (n + 1)
    for i in range(1, n + 1):
        xor_prefix[i] = xor_prefix[i - 1] ^ nums[i - 1]

    dp = [{} for _ in range(k)]
    min_dp = [n] * k

    for i in range(1, n + 1):
        x = xor_prefix[i] ^ xor_prefix[i - k]

        if i >= k:
            dp[0][x] = dp[0].get(x, 0) + 1

        for j in range(1, 1 + (i - j * k) // k):
            if x in dp[j - 1]:
                dp[j][x] = dp[j].get(x, 0) + 1
                min_dp[j] = min(min_dp[j], dp[j - 1][x] - dp[j][x])

    return min(n, [min_dp[j] + j for j in range(k)])
```
"
Count Square Sum Triples,Easy,"A **square triple** `(a,b,c)` is a triple where `a`, `b`, and `c` are **integers** and `a2 + b2 = c2`.

Given an integer `n`, return _the number of **square triples** such that_ `1 <= a, b, c <= n`.

**Example 1:**

**Input:** n = 5
**Output:** 2
**Explanation**: The square triples are (3,4,5) and (4,3,5).

**Example 2:**

**Input:** n = 10
**Output:** 4
**Explanation**: The square triples are (3,4,5), (4,3,5), (6,8,10), and (8,6,10).

**Constraints:**

*   `1 <= n <= 250`","```python
def reverse(x):
    rev = 0

    while x != 0:
        rev = rev * 10 + x % 10
        x = x // 10

    return rev

def count_nice_pairs(nums):
    MOD = 1_000_000_007
    count = {}
    result = 0

    for num in nums:
        diff = num - reverse(num)
        count[diff] = count.get(diff, 0) + 1

    for val in count.values():
        result = (result + ((val * (val - 1)) // 2) % MOD) % MOD

    return result
```
"
Maximum Number of Words You Can Type,Easy,"There is a malfunctioning keyboard where some letter keys do not work. All other keys on the keyboard work properly.

Given a string `text` of words separated by a single space (no leading or trailing spaces) and a string `brokenLetters` of all **distinct** letter keys that are broken, return _the **number of words** in_ `text` _you can fully type using this keyboard_.

**Example 1:**

**Input:** text =  ""hello world "", brokenLetters =  ""ad ""
**Output:** 1
**Explanation:** We cannot type  ""world "" because the 'd' key is broken.

**Example 2:**

**Input:** text =  ""leet code "", brokenLetters =  ""lt ""
**Output:** 1
**Explanation:** We cannot type  ""leet "" because the 'l' and 't' keys are broken.

**Example 3:**

**Input:** text =  ""leet code "", brokenLetters =  ""e ""
**Output:** 0
**Explanation:** We cannot type either word because the 'e' key is broken.

**Constraints:**

*   `1 <= text.length <= 104`
*   `0 <= brokenLetters.length <= 26`
*   `text` consists of words separated by a single space without any leading or trailing spaces.
*   Each word only consists of lowercase English letters.
*   `brokenLetters` consists of **distinct** lowercase English letters.","```python
def min_operations(n):
    count = 1
    temp = 1

    while temp % n != 0:
        temp = (temp * 2) % n
        count += 1

    return count
```
"
Sum of Digits of String After Convert,Easy,"You are given a string `s` consisting of lowercase English letters, and an integer `k`.

First, **convert** `s` into an integer by replacing each letter with its position in the alphabet (i.e., replace `'a'` with `1`, `'b'` with `2`, ..., `'z'` with `26`). Then, **transform** the integer by replacing it with the **sum of its digits**. Repeat the **transform** operation `k` **times** in total.

For example, if `s = ""zbax ""` and `k = 2`, then the resulting integer would be `8` by the following operations:

*   **Convert**: `""zbax "" ➝ ""(26)(2)(1)(24) "" ➝ ""262124 "" ➝ 262124`
*   **Transform #1**: `262124 ➝ 2 + 6 + 2 + 1 + 2 + 4 ➝ 17`
*   **Transform #2**: `17 ➝ 1 + 7 ➝ 8`

Return _the resulting integer after performing the operations described above_.

**Example 1:**

**Input:** s =  ""iiii "", k = 1
**Output:** 36
**Explanation:** The operations are as follows:
- Convert:  ""iiii "" ➝  ""(9)(9)(9)(9) "" ➝  ""9999 "" ➝ 9999
- Transform #1: 9999 ➝ 9 + 9 + 9 + 9 ➝ 36
Thus the resulting integer is 36.

**Example 2:**

**Input:** s =  ""leetcode "", k = 2
**Output:** 6
**Explanation:** The operations are as follows:
- Convert:  ""leetcode "" ➝  ""(12)(5)(5)(20)(3)(15)(4)(5) "" ➝  ""12552031545 "" ➝ 12552031545
- Transform #1: 12552031545 ➝ 1 + 2 + 5 + 5 + 2 + 0 + 3 + 1 + 5 + 4 + 5 ➝ 33
- Transform #2: 33 ➝ 3 + 3 ➝ 6
Thus the resulting integer is 6.

**Example 3:**

**Input:** s =  ""zbax "", k = 2
**Output:** 8

**Constraints:**

*   `1 <= s.length <= 100`
*   `1 <= k <= 10`
*   `s` consists of lowercase English letters.","```python
from collections import defaultdict

def finding_users_active_minutes(logs, k):
    user_minutes = defaultdict(set)
    for log in logs:
        user_minutes[log[0]].add(log[1])
    result = [0] * k
    for minutes in user_minutes.values():
        if len(minutes) <= k:
            result[len(minutes) - 1] += 1
    return result
```

"
Three Divisors,Easy,"Given an integer `n`, return `true` _if_ `n` _has **exactly three positive divisors**. Otherwise, return_ `false`.

An integer `m` is a **divisor** of `n` if there exists an integer `k` such that `n = k * m`.

**Example 1:**

**Input:** n = 2
**Output:** false
**Explantion:** 2 has only two divisors: 1 and 2.

**Example 2:**

**Input:** n = 4
**Output:** true
**Explantion:** 4 has three divisors: 1, 2, and 4.

**Constraints:**

*   `1 <= n <= 104`","```python
def minSideJumps(obstacles):
    n = len(obstacles)
    dp = [[n] * 3 for _ in range(n)]
    dp[0][1] = 0
    dp[0][0] = dp[0][2] = 1

    for i in range(1, n):
        if obstacles[i] != 1:
            dp[i][0] = min(dp[i - 1][0], dp[i - 1][1] + 1, dp[i - 1][2] + 1)
        if obstacles[i] != 2:
            dp[i][1] = min(dp[i - 1][1], dp[i - 1][0] + 1, dp[i - 1][2] + 1)
        if obstacles[i] != 3:
            dp[i][2] = min(dp[i - 1][2], dp[i - 1][0] + 1, dp[i - 1][1] + 1)

    return min(dp[-1])
```

"
Delete Characters to Make Fancy String,Easy,"A **fancy string** is a string where no **three** **consecutive** characters are equal.

Given a string `s`, delete the **minimum** possible number of characters from `s` to make it **fancy**.

Return _the final string after the deletion_. It can be shown that the answer will always be **unique**.

**Example 1:**

**Input:** s =  ""leeetcode ""
**Output:**  ""leetcode ""
**Explanation:**
Remove an 'e' from the first group of 'e's to create  ""leetcode "".
No three consecutive characters are equal, so return  ""leetcode "".

**Example 2:**

**Input:** s =  ""aaabaaaa ""
**Output:**  ""aabaa ""
**Explanation:**
Remove an 'a' from the first group of 'a's to create  ""aabaaaa "".
Remove two 'a's from the second group of 'a's to create  ""aabaa "".
No three consecutive characters are equal, so return  ""aabaa "".

**Example 3:**

**Input:** s =  ""aab ""
**Output:**  ""aab ""
**Explanation:** No three consecutive characters are equal, so return  ""aab "".

**Constraints:**

*   `1 <= s.length <= 105`
*   `s` consists only of lowercase English letters.","```python
def smallest_difference_room(rooms, queries):
    n = len(rooms)
    k = len(queries)
    rooms.sort(key=lambda x: x[0])
    results = []

    for i in range(k):
        preferred, minSize = queries[i]
        diff = float(""inf"")
        room_idx = -1

        for j in range(n):
            if rooms[j][1] >= minSize:
                tmp_diff = abs(preferred - rooms[j][0])
                if tmp_diff < diff:
                    diff = tmp_diff
                    room_idx = rooms[j][0]

        results.append(room_idx)

    return results
```
"
Check If String Is a Prefix of Array,Easy,"Given a string `s` and an array of strings `words`, determine whether `s` is a **prefix string** of `words`.

A string `s` is a **prefix string** of `words` if `s` can be made by concatenating the first `k` strings in `words` for some **positive** `k` no larger than `words.length`.

Return `true` _if_ `s` _is a **prefix string** of_ `words`_, or_ `false` _otherwise_.

**Example 1:**

**Input:** s =  ""iloveleetcode "", words = \[ ""i "", ""love "", ""leetcode "", ""apples ""\]
**Output:** true
**Explanation:**
s can be made by concatenating  ""i "",  ""love "", and  ""leetcode "" together.

**Example 2:**

**Input:** s =  ""iloveleetcode "", words = \[ ""apples "", ""i "", ""love "", ""leetcode ""\]
**Output:** false
**Explanation:**
It is impossible to make s using a prefix of arr.

**Constraints:**

*   `1 <= words.length <= 100`
*   `1 <= words[i].length <= 20`
*   `1 <= s.length <= 1000`
*   `words[i]` and `s` consist of only lowercase English letters.","```python
def max_ice_cream(costs, coins):
    costs.sort()
    count = 0
    for cost in costs:
        if coins >= cost:
            coins -= cost
            count += 1
        else:
            break
    return count
```
"
Find Greatest Common Divisor of Array,Easy,"Given an integer array `nums`, return _the **greatest common divisor** of the smallest number and largest number in_ `nums`.

The **greatest common divisor** of two numbers is the largest positive integer that evenly divides both numbers.

**Example 1:**

**Input:** nums = \[2,5,6,9,10\]
**Output:** 2
**Explanation:**
The smallest number in nums is 2.
The largest number in nums is 10.
The greatest common divisor of 2 and 10 is 2.

**Example 2:**

**Input:** nums = \[7,5,6,8,3\]
**Output:** 1
**Explanation:**
The smallest number in nums is 3.
The largest number in nums is 8.
The greatest common divisor of 3 and 8 is 1.

**Example 3:**

**Input:** nums = \[3,3\]
**Output:** 3
**Explanation:**
The smallest number in nums is 3.
The largest number in nums is 3.
The greatest common divisor of 3 and 3 is 3.

**Constraints:**

*   `2 <= nums.length <= 1000`
*   `1 <= nums[i] <= 1000`","```python
def findGCD(nums):
    min_val, max_val = min(nums), max(nums)
    while max_val % min_val != 0:
        min_val, max_val = max_val % min_val, min_val
    return min_val
```
"
Minimum Difference Between Highest and Lowest of K Scores,Easy,"You are given a **0-indexed** integer array `nums`, where `nums[i]` represents the score of the `ith` student. You are also given an integer `k`.

Pick the scores of any `k` students from the array so that the **difference** between the **highest** and the **lowest** of the `k` scores is **minimized**.

Return _the **minimum** possible difference_.

**Example 1:**

**Input:** nums = \[90\], k = 1
**Output:** 0
**Explanation:** There is one way to pick score(s) of one student:
- \[**90**\]. The difference between the highest and lowest score is 90 - 90 = 0.
The minimum possible difference is 0.

**Example 2:**

**Input:** nums = \[9,4,1,7\], k = 2
**Output:** 2
**Explanation:** There are six ways to pick score(s) of two students:
- \[**9**,**4**,1,7\]. The difference between the highest and lowest score is 9 - 4 = 5.
- \[**9**,4,**1**,7\]. The difference between the highest and lowest score is 9 - 1 = 8.
- \[**9**,4,1,**7**\]. The difference between the highest and lowest score is 9 - 7 = 2.
- \[9,**4**,**1**,7\]. The difference between the highest and lowest score is 4 - 1 = 3.
- \[9,**4**,1,**7**\]. The difference between the highest and lowest score is 7 - 4 = 3.
- \[9,4,**1**,**7**\]. The difference between the highest and lowest score is 7 - 1 = 6.
The minimum possible difference is 2.

**Constraints:**

*   `1 <= k <= nums.length <= 1000`
*   `0 <= nums[i] <= 105`","```python
def max_distance(nums1, nums2):
    i, j, max_dist = 0, 0, 0
    while i < len(nums1) and j < len(nums2):
        if i <= j and nums1[i] <= nums2[j]:
            max_dist = max(max_dist, j - i)
            j += 1
        else:
            i += 1
    return max_dist
```
"
Reverse Prefix of Word,Easy,"Given a **0-indexed** string `word` and a character `ch`, **reverse** the segment of `word` that starts at index `0` and ends at the index of the **first occurrence** of `ch` (**inclusive**). If the character `ch` does not exist in `word`, do nothing.

*   For example, if `word = ""abcdefd ""` and `ch = ""d ""`, then you should **reverse** the segment that starts at `0` and ends at `3` (**inclusive**). The resulting string will be `""dcbaefd ""`.

Return _the resulting string_.

**Example 1:**

**Input:** word =  ""abcdefd "", ch =  ""d ""
**Output:**  ""dcbaefd ""
**Explanation:** The first occurrence of  ""d "" is at index 3. 
Reverse the part of word from 0 to 3 (inclusive), the resulting string is  ""dcbaefd "".

**Example 2:**

**Input:** word =  ""xyxzxe "", ch =  ""z ""
**Output:**  ""zxyxxe ""
**Explanation:** The first and only occurrence of  ""z "" is at index 3.
Reverse the part of word from 0 to 3 (inclusive), the resulting string is  ""zxyxxe "".

**Example 3:**

**Input:** word =  ""abcd "", ch =  ""z ""
**Output:**  ""abcd ""
**Explanation:**  ""z "" does not exist in word.
You should not do any reverse operation, the resulting string is  ""abcd "".

**Constraints:**

*   `1 <= word.length <= 250`
*   `word` consists of lowercase English letters.
*   `ch` is a lowercase English letter.","```python
import math
def minimum_speed(n, hour, dist):
    if n > math.ceil(hour): return -1
    low, high = 1, int(1e7)
    
    while low <= high:
        mid = low + (high - low) // 2
        time = sum(math.ceil(d / mid) for d in dist)
        if time <= hour:
            speed = mid
            high = mid - 1
        else:
            low = mid + 1
            
    return speed
```
"
Count Number of Pairs With Absolute Difference K,Easy,"Given an integer array `nums` and an integer `k`, return _the number of pairs_ `(i, j)` _where_ `i < j` _such that_ `|nums[i] - nums[j]| == k`.

The value of `|x|` is defined as:

*   `x` if `x >= 0`.
*   `-x` if `x < 0`.

**Example 1:**

**Input:** nums = \[1,2,2,1\], k = 1
**Output:** 4
**Explanation:** The pairs with an absolute difference of 1 are:
- \[**1**,**2**,2,1\]
- \[**1**,2,**2**,1\]
- \[1,**2**,2,**1**\]
- \[1,2,**2**,**1**\]

**Example 2:**

**Input:** nums = \[1,3\], k = 3
**Output:** 0
**Explanation:** There are no pairs with an absolute difference of 3.

**Example 3:**

**Input:** nums = \[3,2,1,5,4\], k = 2
**Output:** 3
**Explanation:** The pairs with an absolute difference of 2 are:
- \[**3**,2,**1**,5,4\]
- \[**3**,2,1,**5**,4\]
- \[3,**2**,1,5,**4**\]

**Constraints:**

*   `1 <= nums.length <= 200`
*   `1 <= nums[i] <= 100`
*   `1 <= k <= 99`","```python
def chalk_replacer(chalk, k):
    total_chalk = sum(chalk)
    k %= total_chalk
    for i, val in enumerate(chalk):
        if k < val:
            return i
        k -= val
    return 0
```
"
Maximum Difference Between Increasing Elements,Easy,"Given a **0-indexed** integer array `nums` of size `n`, find the **maximum difference** between `nums[i]` and `nums[j]` (i.e., `nums[j] - nums[i]`), such that `0 <= i < j < n` and `nums[i] < nums[j]`.

Return _the **maximum difference**._ If no such `i` and `j` exists, return `-1`.

**Example 1:**

**Input:** nums = \[7,**1**,**5**,4\]
**Output:** 4
**Explanation:**
The maximum difference occurs with i = 1 and j = 2, nums\[j\] - nums\[i\] = 5 - 1 = 4.
Note that with i = 1 and j = 0, the difference nums\[j\] - nums\[i\] = 7 - 1 = 6, but i > j, so it is not valid.

**Example 2:**

**Input:** nums = \[9,4,3,2\]
**Output:** -1
**Explanation:**
There is no i and j such that i < j and nums\[i\] < nums\[j\].

**Example 3:**

**Input:** nums = \[**1**,5,2,**10**\]
**Output:** 9
**Explanation:**
The maximum difference occurs with i = 0 and j = 3, nums\[j\] - nums\[i\] = 10 - 1 = 9.

**Constraints:**

*   `n == nums.length`
*   `2 <= n <= 1000`
*   `1 <= nums[i] <= 109`","```python
def min_steps_to_equal_elements(nums):
    min_elem = min(nums)
    steps = 0
    for num in nums:
        steps += (num - min_elem)
    return steps
```
"
Convert 1D Array Into 2D Array,Easy,"You are given a **0-indexed** 1-dimensional (1D) integer array `original`, and two integers, `m` and `n`. You are tasked with creating a 2-dimensional (2D) array with `m` rows and `n` columns using **all** the elements from `original`.

The elements from indices `0` to `n - 1` (**inclusive**) of `original` should form the first row of the constructed 2D array, the elements from indices `n` to `2 * n - 1` (**inclusive**) should form the second row of the constructed 2D array, and so on.

Return _an_ `m x n` _2D array constructed according to the above procedure, or an empty 2D array if it is impossible_.

**Example 1:**

**Input:** original = \[1,2,3,4\], m = 2, n = 2
**Output:** \[\[1,2\],\[3,4\]\]
**Explanation:** The constructed 2D array should contain 2 rows and 2 columns.
The first group of n=2 elements in original, \[1,2\], becomes the first row in the constructed 2D array.
The second group of n=2 elements in original, \[3,4\], becomes the second row in the constructed 2D array.

**Example 2:**

**Input:** original = \[1,2,3\], m = 1, n = 3
**Output:** \[\[1,2,3\]\]
**Explanation:** The constructed 2D array should contain 1 row and 3 columns.
Put all three elements in original into the first row of the constructed 2D array.

**Example 3:**

**Input:** original = \[1,2\], m = 1, n = 1
**Output:** \[\]
**Explanation:** There are 2 elements in original.
It is impossible to fit 2 elements in a 1x1 2D array, so return an empty 2D array.

**Constraints:**

*   `1 <= original.length <= 5 * 104`
*   `1 <= original[i] <= 105`
*   `1 <= m, n <= 4 * 104`","```python
def max_alternating_sum(nums):
    even_sum = odd_sum = 0
    for num in nums:
        even_sum, odd_sum = max(even_sum + num, odd_sum), even_sum - num
    return even_sum
```
"
Minimum Moves to Convert String,Easy,"You are given a string `s` consisting of `n` characters which are either `'X'` or `'O'`.

A **move** is defined as selecting **three** **consecutive characters** of `s` and converting them to `'O'`. Note that if a move is applied to the character `'O'`, it will stay the **same**.

Return _the **minimum** number of moves required so that all the characters of_ `s` _are converted to_ `'O'`.

**Example 1:**

**Input:** s =  ""XXX ""
**Output:** 1
**Explanation:** XXX -> OOO
We select all the 3 characters and convert them in one move.

**Example 2:**

**Input:** s =  ""XXOX ""
**Output:** 2
**Explanation:** XXOX -> OOOX -> OOOO
We select the first 3 characters in the first move, and convert them to `'O'`.
Then we select the last 3 characters and convert them so that the final string contains all `'O'`s.

**Example 3:**

**Input:** s =  ""OOOO ""
**Output:** 0
**Explanation:** There are no `'X's` in `s` to convert.

**Constraints:**

*   `3 <= s.length <= 1000`
*   `s[i]` is either `'X'` or `'O'`.","```python
def maximumRemovals(s: str, p: str, removable: List[int]) -> int:
    low, high = 0, len(removable)
    while low < high:
        mid = low + (high - low + 1) // 2
        ss = list(s)
        for i in range(mid):
            ss[removable[i]] = '-'
        j, i = 0, 0
        while i < len(ss) and j < len(p):
            if ss[i] == p[j]:
                j += 1
            i += 1
        if j == len(p):
            low = mid
        else:
            high = mid - 1
    return low
```

"
Check if Numbers Are Ascending in a Sentence,Easy,"A sentence is a list of **tokens** separated by a **single** space with no leading or trailing spaces. Every token is either a **positive number** consisting of digits `0-9` with no leading zeros, or a **word** consisting of lowercase English letters.

*   For example, `""a puppy has 2 eyes 4 legs ""` is a sentence with seven tokens: `""2 ""` and `""4 ""` are numbers and the other tokens such as `""puppy ""` are words.

Given a string `s` representing a sentence, you need to check if **all** the numbers in `s` are **strictly increasing** from left to right (i.e., other than the last number, **each** number is **strictly smaller** than the number on its **right** in `s`).

Return `true` _if so, or_ `false` _otherwise_.

**Example 1:**

**Input:** s =  ""1 box has 3 blue 4 red 6 green and 12 yellow marbles ""
**Output:** true
**Explanation:** The numbers in s are: 1, 3, 4, 6, 12.
They are strictly increasing from left to right: 1 < 3 < 4 < 6 < 12.

**Example 2:**

**Input:** s =  ""hello world 5 x 5 ""
**Output:** false
**Explanation:** The numbers in s are: **5**, **5**. They are not strictly increasing.

**Example 3:**

**Input:** s =  ""sunset is at 7 51 pm overnight lows will be in the low 50 and 60 s ""
**Output:** false
**Explanation:** The numbers in s are: 7, **51**, **50**, 60. They are not strictly increasing.

**Constraints:**

*   `3 <= s.length <= 200`
*   `s` consists of lowercase English letters, spaces, and digits from `0` to `9`, inclusive.
*   The number of tokens in `s` is between `2` and `100`, inclusive.
*   The tokens in `s` are separated by a single space.
*   There are at least **two** numbers in `s`.
*   Each number in `s` is a **positive** number **less** than `100`, with no leading zeros.
*   `s` contains no leading or trailing spaces.","```python
def maxProductDifference(nums):
    min1, min2, max1, max2 = float('inf'), float('inf'), float('-inf'), float('-inf')
    for num in nums:
        if num < min1:
            min2, min1 = min1, num
        elif num < min2:
            min2 = num
        if num > max1:
            max2, max1 = max1, num
        elif num > max2:
            max2 = num
    return max1 * max2 - min1 * min2
```
"
Number of Valid Words in a Sentence,Easy,"A sentence consists of lowercase letters (`'a'` to `'z'`), digits (`'0'` to `'9'`), hyphens (`'-'`), punctuation marks (`'!'`, `'.'`, and `','`), and spaces (`' '`) only. Each sentence can be broken down into **one or more tokens** separated by one or more spaces `' '`.

A token is a valid word if **all three** of the following are true:

*   It only contains lowercase letters, hyphens, and/or punctuation (**no** digits).
*   There is **at most one** hyphen `'-'`. If present, it **must** be surrounded by lowercase characters ( `""a-b ""` is valid, but `""-ab ""` and `""ab- ""` are not valid).
*   There is **at most one** punctuation mark. If present, it **must** be at the **end** of the token ( `""ab, ""`, `""cd! ""`, and `"". ""` are valid, but `""a!b ""` and `""c., ""` are not valid).

Examples of valid words include `""a-b. ""`, `""afad ""`, `""ba-c ""`, `""a! ""`, and `""! ""`.

Given a string `sentence`, return _the **number** of valid words in_ `sentence`.

**Example 1:**

**Input:** sentence =  ""cat and  dog ""
**Output:** 3
**Explanation:** The valid words in the sentence are  ""cat "",  ""and "", and  ""dog "".

**Example 2:**

**Input:** sentence =  ""!this  1-s b8d! ""
**Output:** 0
**Explanation:** There are no valid words in the sentence.
 ""!this "" is invalid because it starts with a punctuation mark.
 ""1-s "" and  ""b8d "" are invalid because they contain digits.

**Example 3:**

**Input:** sentence =  ""alice and  bob are playing stone-game10 ""
**Output:** 5
**Explanation:** The valid words in the sentence are  ""alice "",  ""and "",  ""bob "",  ""are "", and  ""playing "".
 ""stone-game10 "" is invalid because it contains digits.

**Constraints:**

*   `1 <= sentence.length <= 1000`
*   `sentence` only contains lowercase English letters, digits, `' '`, `'-'`, `'!'`, `'.'`, and `','`.
*   There will be at least `1` token.","```python
def findPeakGrid(mat: List[List[int]]) -> List[int]:
    m, n = len(mat), len(mat[0])
    l, r = 0, n - 1

    while l < r:
        mid = (l + r) // 2
        max_row = 0

        for i in range(1, m):
            if mat[i][mid] > mat[max_row][mid]:
                max_row = i

        if mat[max_row][mid] < mat[max_row][mid + 1]:
            l = mid + 1
        else:
            r = mid

    max_row = 0
    for i in range(1, m):
        if mat[i][l] > mat[max_row][l]:
            max_row = i

    return [max_row, l]
```
"
Count Vowel Substrings of a String,Easy,"A **substring** is a contiguous (non-empty) sequence of characters within a string.

A **vowel substring** is a substring that **only** consists of vowels (`'a'`, `'e'`, `'i'`, `'o'`, and `'u'`) and has **all five** vowels present in it.

Given a string `word`, return _the number of **vowel substrings** in_ `word`.

**Example 1:**

**Input:** word =  ""aeiouu ""
**Output:** 2
**Explanation:** The vowel substrings of word are as follows (underlined):
-  ""**aeiou**u ""
-  ""**aeiouu** ""

**Example 2:**

**Input:** word =  ""unicornarihan ""
**Output:** 0
**Explanation:** Not all 5 vowels are present, so there are no vowel substrings.

**Example 3:**

**Input:** word =  ""cuaieuouac ""
**Output:** 7
**Explanation:** The vowel substrings of word are as follows (underlined):
-  ""c**uaieuo**uac ""
-  ""c**uaieuou**ac ""
-  ""c**uaieuoua**c ""
-  ""cu**aieuo**uac ""
-  ""cu**aieuou**ac ""
-  ""cu**aieuoua**c ""
-  ""cua**ieuoua**c ""

**Constraints:**

*   `1 <= word.length <= 100`
*   `word` consists of lowercase English letters only.","```python
def count_vowel_substrings(word: str) -> int:
    count, a, e, i, o, u = 0, 0, 0, 0, 0, 0
    for c in word:
        if c == 'a': a += 1
        elif c == 'e': e = a + e
        elif c == 'i': i = e + i
        elif c == 'o': o = i + o
        elif c == 'u': u = o + u
    return u
```
"
Check Whether Two Strings are Almost Equivalent,Easy,"Two strings `word1` and `word2` are considered **almost equivalent** if the differences between the frequencies of each letter from `'a'` to `'z'` between `word1` and `word2` is **at most** `3`.

Given two strings `word1` and `word2`, each of length `n`, return `true` _if_ `word1` _and_ `word2` _are **almost equivalent**, or_ `false` _otherwise_.

The **frequency** of a letter `x` is the number of times it occurs in the string.

**Example 1:**

**Input:** word1 =  ""aaaa "", word2 =  ""bccb ""
**Output:** false
**Explanation:** There are 4 'a's in  ""aaaa "" but 0 'a's in  ""bccb "".
The difference is 4, which is more than the allowed 3.

**Example 2:**

**Input:** word1 =  ""abcdeef "", word2 =  ""abaaacc ""
**Output:** true
**Explanation:** The differences between the frequencies of each letter in word1 and word2 are at most 3:
- 'a' appears 1 time in word1 and 4 times in word2. The difference is 3.
- 'b' appears 1 time in word1 and 1 time in word2. The difference is 0.
- 'c' appears 1 time in word1 and 2 times in word2. The difference is 1.
- 'd' appears 1 time in word1 and 0 times in word2. The difference is 1.
- 'e' appears 2 times in word1 and 0 times in word2. The difference is 2.
- 'f' appears 1 time in word1 and 0 times in word2. The difference is 1.

**Example 3:**

**Input:** word1 =  ""cccddabba "", word2 =  ""babababab ""
**Output:** true
**Explanation:** The differences between the frequencies of each letter in word1 and word2 are at most 3:
- 'a' appears 2 times in word1 and 4 times in word2. The difference is 2.
- 'b' appears 2 times in word1 and 5 times in word2. The difference is 3.
- 'c' appears 3 times in word1 and 0 times in word2. The difference is 3.
- 'd' appears 2 times in word1 and 0 times in word2. The difference is 2.

**Constraints:**

*   `n == word1.length == word2.length`
*   `1 <= n <= 100`
*   `word1` and `word2` consist only of lowercase English letters.","```python
import collections

def maxGeneticDifference(parents, queries):
    M = 17
    tr = [0, 0]

    def insert(x):
        nonlocal tr
        u = 0
        for i in range(M - 1, -1, -1):
            v = (x >> i) & 1
            if not tr[u][v]:
                tr[u][v] = len(tr)
                tr.append([0, 0])
            u = tr[u][v]

    def query(x, y=0):
        u = 0
        ans = 0
        for i in range(M - 1, -1, -1):
            v = ((x >> i) & 1) ^ 1
            if not tr[u][v]:
                v ^= 1
            ans |= (y := (y << 1) | v)
            u = tr[u][v]
        return ans

    def dfs(u, tree=0, g=collections.defaultdict(list), ans=None):
        nonlocal tr
        insert(tree := tree ^ u)
        ans[u] = query(tree)
        for v in g[u]:
            dfs(v, tree, g, ans)

    n = len(parents)
    root = -1
    graph = collections.defaultdict(list)
    for i, parent in enumerate(parents):
        if parent != -1:
            graph[parent].append(i)
        else:
            root = i

    ans = [0] * n
    dfs(root, 0, graph, ans)
    result = [ans[node] ^ val for node, val in queries]
    return result
```

"
Time Needed to Buy Tickets,Easy,"There are `n` people in a line queuing to buy tickets, where the `0th` person is at the **front** of the line and the `(n - 1)th` person is at the **back** of the line.

You are given a **0-indexed** integer array `tickets` of length `n` where the number of tickets that the `ith` person would like to buy is `tickets[i]`.

Each person takes **exactly 1 second** to buy a ticket. A person can only buy **1 ticket at a time** and has to go back to **the end** of the line (which happens **instantaneously**) in order to buy more tickets. If a person does not have any tickets left to buy, the person will **leave** the line.

Return _the **time taken** for the person at position_ `k` **_(0-indexed)_** _to finish buying tickets_.

**Example 1:**

**Input:** tickets = \[2,3,2\], k = 2
**Output:** 6
**Explanation:** 
- In the first pass, everyone in the line buys a ticket and the line becomes \[1, 2, 1\].
- In the second pass, everyone in the line buys a ticket and the line becomes \[0, 1, 0\].
The person at position 2 has successfully bought 2 tickets and it took 3 + 3 = 6 seconds.

**Example 2:**

**Input:** tickets = \[5,1,1,1\], k = 0
**Output:** 8
**Explanation:**
- In the first pass, everyone in the line buys a ticket and the line becomes \[4, 0, 0, 0\].
- In the next 4 passes, only the person in position 0 is buying tickets.
The person at position 0 has successfully bought 5 tickets and it took 4 + 1 + 1 + 1 + 1 = 8 seconds.

**Constraints:**

*   `n == tickets.length`
*   `1 <= n <= 100`
*   `1 <= tickets[i] <= 100`
*   `0 <= k < n`","```python
def time_to_buy_tickets(tickets, k):
    time = 0
    while tickets[k] > 0:
        for i in range(len(tickets)):
            if tickets[i] > 0:
                tickets[i] -= 1
                time += 1
                if i == k and tickets[k] == 0:
                    break
    return time
```
"
Two Furthest Houses With Different Colors,Easy,"There are `n` houses evenly lined up on the street, and each house is beautifully painted. You are given a **0-indexed** integer array `colors` of length `n`, where `colors[i]` represents the color of the `ith` house.

Return _the **maximum** distance between **two** houses with **different** colors_.

The distance between the `ith` and `jth` houses is `abs(i - j)`, where `abs(x)` is the **absolute value** of `x`.

**Example 1:**

**Input:** colors = \[**1**,1,1,**6**,1,1,1\]
**Output:** 3
**Explanation:** In the above image, color 1 is blue, and color 6 is red.
The furthest two houses with different colors are house 0 and house 3.
House 0 has color 1, and house 3 has color 6. The distance between them is abs(0 - 3) = 3.
Note that houses 3 and 6 can also produce the optimal answer.

**Example 2:**

**Input:** colors = \[**1**,8,3,8,**3**\]
**Output:** 4
**Explanation:** In the above image, color 1 is blue, color 8 is yellow, and color 3 is green.
The furthest two houses with different colors are house 0 and house 4.
House 0 has color 1, and house 4 has color 3. The distance between them is abs(0 - 4) = 4.

**Example 3:**

**Input:** colors = \[**0**,**1**\]
**Output:** 1
**Explanation:** The furthest two houses with different colors are house 0 and house 1.
House 0 has color 0, and house 1 has color 1. The distance between them is abs(0 - 1) = 1.

**Constraints:**

*   `n == colors.length`
*   `2 <= n <= 100`
*   `0 <= colors[i] <= 100`
*   Test data are generated such that **at least** two houses have different colors.","```python
from itertools import permutations

def maxCompatibilitySum(students, mentors):
    ans = 0
    for mentors_perm in permutations(mentors):
        cur_sum = sum(sum(a == b for a, b in zip(student, mentor)) for student, mentor in zip(students, mentors_perm))
        ans = max(ans, cur_sum)
    return ans
```
"
Count Common Words With One Occurrence,Easy,"Given two string arrays `words1` and `words2`, return _the number of strings that appear **exactly once** in **each** of the two arrays._

**Example 1:**

**Input:** words1 = \[ ""leetcode "", ""is "", ""amazing "", ""as "", ""is ""\], words2 = \[ ""amazing "", ""leetcode "", ""is ""\]
**Output:** 2
**Explanation:**
-  ""leetcode "" appears exactly once in each of the two arrays. We count this string.
-  ""amazing "" appears exactly once in each of the two arrays. We count this string.
-  ""is "" appears in each of the two arrays, but there are 2 occurrences of it in words1. We do not count this string.
-  ""as "" appears once in words1, but does not appear in words2. We do not count this string.
Thus, there are 2 strings that appear exactly once in each of the two arrays.

**Example 2:**

**Input:** words1 = \[ ""b "", ""bb "", ""bbb ""\], words2 = \[ ""a "", ""aa "", ""aaa ""\]
**Output:** 0
**Explanation:** There are no strings that appear in each of the two arrays.

**Example 3:**

**Input:** words1 = \[ ""a "", ""ab ""\], words2 = \[ ""a "", ""a "", ""a "", ""ab ""\]
**Output:** 1
**Explanation:** The only string that appears exactly once in each of the two arrays is  ""ab "".

**Constraints:**

*   `1 <= words1.length, words2.length <= 1000`
*   `1 <= words1[i].length, words2[j].length <= 30`
*   `words1[i]` and `words2[j]` consists only of lowercase English letters.","```python
def rearrangeArray(nums):
    nums.sort()
    for i in range(1, len(nums) - 1, 2):
        nums[i], nums[i + 1] = nums[i + 1], nums[i]
    return nums
```
"
Find Target Indices After Sorting Array,Easy,"You are given a **0-indexed** integer array `nums` and a target element `target`.

A **target index** is an index `i` such that `nums[i] == target`.

Return _a list of the target indices of_ `nums` after _sorting_ `nums` _in **non-decreasing** order_. If there are no target indices, return _an **empty** list_. The returned list must be sorted in **increasing** order.

**Example 1:**

**Input:** nums = \[1,2,5,2,3\], target = 2
**Output:** \[1,2\]
**Explanation:** After sorting, nums is \[1,**2**,**2**,3,5\].
The indices where nums\[i\] == 2 are 1 and 2.

**Example 2:**

**Input:** nums = \[1,2,5,2,3\], target = 3
**Output:** \[3\]
**Explanation:** After sorting, nums is \[1,2,2,**3**,5\].
The index where nums\[i\] == 3 is 3.

**Example 3:**

**Input:** nums = \[1,2,5,2,3\], target = 5
**Output:** \[4\]
**Explanation:** After sorting, nums is \[1,2,2,3,**5**\].
The index where nums\[i\] == 5 is 4.

**Constraints:**

*   `1 <= nums.length <= 100`
*   `1 <= nums[i], target <= 100`","```python
def maxMatrixSum(matrix):
    n = len(matrix)
    minValue, negativeCount, total = float('inf'), 0, 0

    for i in range(n):
        for j in range(n):
            total += abs(matrix[i][j])
            minValue = min(minValue, abs(matrix[i][j]))
            if matrix[i][j] < 0:
                negativeCount += 1

    if negativeCount % 2 == 0:
        return total
    else:
        return total - 2 * minValue
```
"
Finding 3-Digit Even Numbers,Easy,"You are given an integer array `digits`, where each element is a digit. The array may contain duplicates.

You need to find **all** the **unique** integers that follow the given requirements:

*   The integer consists of the **concatenation** of **three** elements from `digits` in **any** arbitrary order.
*   The integer does not have **leading zeros**.
*   The integer is **even**.

For example, if the given `digits` were `[1, 2, 3]`, integers `132` and `312` follow the requirements.

Return _a **sorted** array of the unique integers._

**Example 1:**

**Input:** digits = \[2,1,3,0\]
**Output:** \[102,120,130,132,210,230,302,310,312,320\]
**Explanation:** All the possible integers that follow the requirements are in the output array. 
Notice that there are no **odd** integers or integers with **leading zeros**.

**Example 2:**

**Input:** digits = \[2,2,8,8,2\]
**Output:** \[222,228,282,288,822,828,882\]
**Explanation:** The same digit can be used as many times as it appears in digits. 
In this example, the digit 8 is used twice each time in 288, 828, and 882. 

**Example 3:**

**Input:** digits = \[3,7,5\]
**Output:** \[\]
**Explanation:** No **even** integers can be formed using the given digits.

**Constraints:**

*   `3 <= digits.length <= 100`
*   `0 <= digits[i] <= 9`","```python
def min_stones_remaining(piles, k):
    for _ in range(k):
        max_pile_index = piles.index(max(piles))
        piles[max_pile_index] -= piles[max_pile_index] // 2

    return sum(piles)
```

"
Rings and Rods,Easy,"There are `n` rings and each ring is either red, green, or blue. The rings are distributed **across ten rods** labeled from `0` to `9`.

You are given a string `rings` of length `2n` that describes the `n` rings that are placed onto the rods. Every two characters in `rings` forms a **color-position pair** that is used to describe each ring where:

*   The **first** character of the `ith` pair denotes the `ith` ring's **color** (`'R'`, `'G'`, `'B'`).
*   The **second** character of the `ith` pair denotes the **rod** that the `ith` ring is placed on (`'0'` to `'9'`).

For example, `""R3G2B1 ""` describes `n == 3` rings: a red ring placed onto the rod labeled 3, a green ring placed onto the rod labeled 2, and a blue ring placed onto the rod labeled 1.

Return _the number of rods that have **all three colors** of rings on them._

**Example 1:**

**Input:** rings =  ""B0B6G0R6R0R6G9 ""
**Output:** 1
**Explanation:** 
- The rod labeled 0 holds 3 rings with all colors: red, green, and blue.
- The rod labeled 6 holds 3 rings, but it only has red and blue.
- The rod labeled 9 holds only a green ring.
Thus, the number of rods with all three colors is 1.

**Example 2:**

**Input:** rings =  ""B0R0G0R9R0B0G0 ""
**Output:** 1
**Explanation:** 
- The rod labeled 0 holds 6 rings with all colors: red, green, and blue.
- The rod labeled 9 holds only a red ring.
Thus, the number of rods with all three colors is 1.

**Example 3:**

**Input:** rings =  ""G4 ""
**Output:** 0
**Explanation:** 
Only one ring is given. Thus, no rods have all three colors.

**Constraints:**

*   `rings.length == 2 * n`
*   `1 <= n <= 100`
*   `rings[i]` where `i` is **even** is either `'R'`, `'G'`, or `'B'` (**0-indexed**).
*   `rings[i]` where `i` is **odd** is a digit from `'0'` to `'9'` (**0-indexed**).","```python
def findFarmland(land):
    m, n = len(land), len(land[0])
    res = []
    
    for i in range(m):
        for j in range(n):
            if land[i][j] == 1:
                r, c = i, j
                while r < m and land[r][j] == 1: r += 1
                while c < n and land[i][c] == 1: c += 1
                for x in range(i, r):
                    for y in range(j,c):
                        land[x][y] = 0
                res.append([i, j, r - 1, c - 1])

    return res
```

"
Find First Palindromic String in the Array,Easy,"Given an array of strings `words`, return _the first **palindromic** string in the array_. If there is no such string, return _an **empty string**_ `"" ""`.

A string is **palindromic** if it reads the same forward and backward.

**Example 1:**

**Input:** words = \[ ""abc "", ""car "", ""ada "", ""racecar "", ""cool ""\]
**Output:**  ""ada ""
**Explanation:** The first string that is palindromic is  ""ada "".
Note that  ""racecar "" is also palindromic, but it is not the first.

**Example 2:**

**Input:** words = \[ ""notapalindrome "", ""racecar ""\]
**Output:**  ""racecar ""
**Explanation:** The first and only string that is palindromic is  ""racecar "".

**Example 3:**

**Input:** words = \[ ""def "", ""ghi ""\]
**Output:**  "" ""
**Explanation:** There are no palindromic strings, so the empty string is returned.

**Constraints:**

*   `1 <= words.length <= 100`
*   `1 <= words[i].length <= 100`
*   `words[i]` consists only of lowercase English letters.","```python
def minimizeTheDifference(mat, target):
    m, n = len(mat), len(mat[0])
    dp, new_dp = [1] + [0] * 4900, [0] * 4901
    for i in range(m):
        for j in range(n):
            for k in range(4900 - mat[i][j] + 1):
                new_dp[k + mat[i][j]] |= dp[k]
        dp, new_dp = new_dp, [0] * 4901
    for i in range(4901):
        if dp[i]:
            return abs(target - i)
    return float('inf')
```
"
Maximum Number of Words Found in Sentences,Easy,"A **sentence** is a list of **words** that are separated by a single space with no leading or trailing spaces.

You are given an array of strings `sentences`, where each `sentences[i]` represents a single **sentence**.

Return _the **maximum number of words** that appear in a single sentence_.

**Example 1:**

**Input:** sentences = \[ ""alice and bob love leetcode "",  ""i think so too "",  ""this is great thanks very much ""\]
**Output:** 6
**Explanation:** 
- The first sentence,  ""alice and bob love leetcode "", has 5 words in total.
- The second sentence,  ""i think so too "", has 4 words in total.
- The third sentence,  ""this is great thanks very much "", has 6 words in total.
Thus, the maximum number of words in a single sentence comes from the third sentence, which has 6 words.

**Example 2:**

**Input:** sentences = \[ ""please wait "",  ""continue to fight "",  ""continue to win ""\]
**Output:** 3
**Explanation:** It is possible that multiple sentences contain the same number of words. 
In this example, the second and third sentences (underlined) have the same number of words.

**Constraints:**

*   `1 <= sentences.length <= 100`
*   `1 <= sentences[i].length <= 100`
*   `sentences[i]` consists only of lowercase English letters and `' '` only.
*   `sentences[i]` does not have leading or trailing spaces.
*   All the words in `sentences[i]` are separated by a single space.","```python
def min_sessions(tasks, session_time):
    sessions = []
    tasks.sort(reverse=True)

    for task in tasks:
        added = False
        for session_idx, session in enumerate(sessions):
            if session + task <= session_time:
                sessions[session_idx] += task
                added = True
                break

        if not added:
            sessions.append(task)

    return len(sessions)
```
"
A Number After a Double Reversal,Easy,"**Reversing** an integer means to reverse all its digits.

*   For example, reversing `2021` gives `1202`. Reversing `12300` gives `321` as the **leading zeros are not retained**.

Given an integer `num`, **reverse** `num` to get `reversed1`, **then reverse** `reversed1` to get `reversed2`. Return `true` _if_ `reversed2` _equals_ `num`. Otherwise return `false`.

**Example 1:**

**Input:** num = 526
**Output:** true
**Explanation:** Reverse num to get 625, then reverse 625 to get 526, which equals num.

**Example 2:**

**Input:** num = 1800
**Output:** false
**Explanation:** Reverse num to get 81, then reverse 81 to get 18, which does not equal num.

**Example 3:**

**Input:** num = 0
**Output:** true
**Explanation:** Reverse num to get 0, then reverse 0 to get 0, which equals num.

**Constraints:**

*   `0 <= num <= 106`","```python
def minOperations(nums):
    nums = sorted(set(nums))
    n = len(nums)
    ans = n
    for i in range(n):
        j = 0
        while j < n and nums[j] <= nums[i] + n - 1:
            j += 1
        ans = min(ans, n - (j - i))
    return ans
```
"
Check if All A's Appears Before All B's,Easy,"Given a string `s` consisting of **only** the characters `'a'` and `'b'`, return `true` _if **every**_ `'a'` _appears before **every**_ `'b'` _in the string_. Otherwise, return `false`.

**Example 1:**

**Input:** s =  ""aaabbb ""
**Output:** true
**Explanation:**
The 'a's are at indices 0, 1, and 2, while the 'b's are at indices 3, 4, and 5.
Hence, every 'a' appears before every 'b' and we return true.

**Example 2:**

**Input:** s =  ""abab ""
**Output:** false
**Explanation:**
There is an 'a' at index 2 and a 'b' at index 1.
Hence, not every 'a' appears before every 'b' and we return false.

**Example 3:**

**Input:** s =  ""bbb ""
**Output:** true
**Explanation:**
There are no 'a's, hence, every 'a' appears before every 'b' and we return true.

**Constraints:**

*   `1 <= s.length <= 100`
*   `s[i]` is either `'a'` or `'b'`.","```python
def firstDayBeenInAllRooms(nextVisit):
    n = len(nextVisit)
    ans = 0
    MOD = 10**9 + 7
    dp = [0] * n

    for i in range(1, n):
        dp[i] = (dp[i - 1] + 1 + dp[i - 1] - dp[nextVisit[i - 1]] + MOD) % MOD
        ans = (ans + dp[i]) % MOD
    return ans
```
"
Capitalize the Title,Easy,"You are given a string `title` consisting of one or more words separated by a single space, where each word consists of English letters. **Capitalize** the string by changing the capitalization of each word such that:

*   If the length of the word is `1` or `2` letters, change all letters to lowercase.
*   Otherwise, change the first letter to uppercase and the remaining letters to lowercase.

Return _the **capitalized**_ `title`.

**Example 1:**

**Input:** title =  ""capiTalIze tHe titLe ""
**Output:**  ""Capitalize The Title ""
**Explanation:**
Since all the words have a length of at least 3, the first letter of each word is uppercase, and the remaining letters are lowercase.

**Example 2:**

**Input:** title =  ""First leTTeR of EACH Word ""
**Output:**  ""First Letter of Each Word ""
**Explanation:**
The word  ""of "" has length 2, so it is all lowercase.
The remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.

**Example 3:**

**Input:** title =  ""i lOve leetcode ""
**Output:**  ""i Love Leetcode ""
**Explanation:**
The word  ""i "" has length 1, so it is lowercase.
The remaining words have a length of at least 3, so the first letter of each remaining word is uppercase, and the remaining letters are lowercase.

**Constraints:**

*   `1 <= title.length <= 100`
*   `title` consists of words separated by a single space without any leading or trailing spaces.
*   Each word consists of uppercase and lowercase English letters and is **non-empty**.","```python
def interchangeable_rectangles(rectangles):
    ratio_count = {}
    count = 0

    for r in rectangles:
        ratio = r[0] / r[1]
        count += ratio_count.get(ratio, 0)
        ratio_count[ratio] = ratio_count.get(ratio, 0) + 1

    return count
```

"
Check if Every Row and Column Contains All Numbers,Easy,"An `n x n` matrix is **valid** if every row and every column contains **all** the integers from `1` to `n` (**inclusive**).

Given an `n x n` integer matrix `matrix`, return `true` _if the matrix is **valid**._ Otherwise, return `false`.

**Example 1:**

**Input:** matrix = \[\[1,2,3\],\[3,1,2\],\[2,3,1\]\]
**Output:** true
**Explanation:** In this case, n = 3, and every row and column contains the numbers 1, 2, and 3.
Hence, we return true.

**Example 2:**

**Input:** matrix = \[\[1,1,1\],\[1,2,3\],\[1,2,3\]\]
**Output:** false
**Explanation:** In this case, n = 3, but the first row and the first column do not contain the numbers 2 or 3.
Hence, we return false.

**Constraints:**

*   `n == matrix.length == matrix[i].length`
*   `1 <= n <= 100`
*   `1 <= matrix[i][j] <= n`","```python
def count_pairs(nums, target):
    count = 0
    for i in range(len(nums)):
        for j in range(i + 1, len(nums)):
            if nums[i] + nums[j] == target or nums[j] + nums[i] == target:
                count += 1
    return count
```
"
Divide a String Into Groups of Size k,Easy,"A string `s` can be partitioned into groups of size `k` using the following procedure:

*   The first group consists of the first `k` characters of the string, the second group consists of the next `k` characters of the string, and so on. Each character can be a part of **exactly one** group.
*   For the last group, if the string **does not** have `k` characters remaining, a character `fill` is used to complete the group.

Note that the partition is done so that after removing the `fill` character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be `s`.

Given the string `s`, the size of each group `k` and the character `fill`, return _a string array denoting the **composition of every group**_ `s` _has been divided into, using the above procedure_.

**Example 1:**

**Input:** s =  ""abcdefghi "", k = 3, fill =  ""x ""
**Output:** \[ ""abc "", ""def "", ""ghi ""\]
**Explanation:**
The first 3 characters  ""abc "" form the first group.
The next 3 characters  ""def "" form the second group.
The last 3 characters  ""ghi "" form the third group.
Since all groups can be completely filled by characters from the string, we do not need to use fill.
Thus, the groups formed are  ""abc "",  ""def "", and  ""ghi "".

**Example 2:**

**Input:** s =  ""abcdefghij "", k = 3, fill =  ""x ""
**Output:** \[ ""abc "", ""def "", ""ghi "", ""jxx ""\]
**Explanation:**
Similar to the previous example, we are forming the first three groups  ""abc "",  ""def "", and  ""ghi "".
For the last group, we can only use the character 'j' from the string. To complete this group, we add 'x' twice.
Thus, the 4 groups formed are  ""abc "",  ""def "",  ""ghi "", and  ""jxx "".

**Constraints:**

*   `1 <= s.length <= 100`
*   `s` consists of lowercase English letters only.
*   `1 <= k <= 100`
*   `fill` is a lowercase English letter.","```python
def sum_of_beauties(nums: List[int]) -> int:
    n = len(nums)
    result = 0

    left_max = [0] * n
    left_max[0] = nums[0]
    right_min = [0] * n
    right_min[n - 1] = nums[n - 1]

    for i in range(1, n):
        left_max[i] = max(left_max[i - 1], nums[i])

    for i in range(n - 2, -1, -1):
        right_min[i] = min(right_min[i + 1], nums[i])

    for i in range(1, n - 1):
        if nums[i] > left_max[i - 1] and nums[i] < right_min[i + 1]:
            result += 1

    return result
```
"
Minimum Cost of Buying Candies With Discount,Easy,"A shop is selling candies at a discount. For **every two** candies sold, the shop gives a **third** candy for **free**.

The customer can choose **any** candy to take away for free as long as the cost of the chosen candy is less than or equal to the **minimum** cost of the two candies bought.

*   For example, if there are `4` candies with costs `1`, `2`, `3`, and `4`, and the customer buys candies with costs `2` and `3`, they can take the candy with cost `1` for free, but not the candy with cost `4`.

Given a **0-indexed** integer array `cost`, where `cost[i]` denotes the cost of the `ith` candy, return _the **minimum cost** of buying **all** the candies_.

**Example 1:**

**Input:** cost = \[1,2,3\]
**Output:** 5
**Explanation:** We buy the candies with costs 2 and 3, and take the candy with cost 1 for free.
The total cost of buying all candies is 2 + 3 = 5. This is the **only** way we can buy the candies.
Note that we cannot buy candies with costs 1 and 3, and then take the candy with cost 2 for free.
The cost of the free candy has to be less than or equal to the minimum cost of the purchased candies.

**Example 2:**

**Input:** cost = \[6,5,7,9,2,2\]
**Output:** 23
**Explanation:** The way in which we can get the minimum cost is described below:
- Buy candies with costs 9 and 7
- Take the candy with cost 6 for free
- We buy candies with costs 5 and 2
- Take the last remaining candy with cost 2 for free
Hence, the minimum cost to buy all candies is 9 + 7 + 5 + 2 = 23.

**Example 3:**

**Input:** cost = \[5,5\]
**Output:** 10
**Explanation:** Since there are only 2 candies, we buy both of them. There is not a third candy we can take for free.
Hence, the minimum cost to buy all candies is 5 + 5 = 10.

**Constraints:**

*   `1 <= cost.length <= 100`
*   `1 <= cost[i] <= 100`","```python
def max_difference(nums):
    min_val = nums[0]
    max_diff = -1

    for i in range(1, len(nums)):
        if nums[i] > min_val:
            max_diff = max(max_diff, nums[i] - min_val)
        else:
            min_val = nums[i]

    return max_diff
```
"
Count Elements With Strictly Smaller and Greater Elements ,Easy,"Given an integer array `nums`, return _the number of elements that have **both** a strictly smaller and a strictly greater element appear in_ `nums`.

**Example 1:**

**Input:** nums = \[11,7,2,15\]
**Output:** 2
**Explanation:** The element 7 has the element 2 strictly smaller than it and the element 11 strictly greater than it.
Element 11 has element 7 strictly smaller than it and element 15 strictly greater than it.
In total there are 2 elements having both a strictly smaller and a strictly greater element appear in `nums`.

**Example 2:**

**Input:** nums = \[-3,3,3,90\]
**Output:** 2
**Explanation:** The element 3 has the element -3 strictly smaller than it and the element 90 strictly greater than it.
Since there are two elements with the value 3, in total there are 2 elements having both a strictly smaller and a strictly greater element appear in `nums`.

**Constraints:**

*   `1 <= nums.length <= 100`
*   `-105 <= nums[i] <= 105`","```python
def min_moves(seats, students):
    seats.sort()
    students.sort()

    moves = 0
    for i in range(len(seats)):
        moves += abs(seats[i] - students[i])
    return moves
```
"
Minimum Sum of Four Digit Number After Splitting Digits,Easy,"You are given a **positive** integer `num` consisting of exactly four digits. Split `num` into two new integers `new1` and `new2` by using the **digits** found in `num`. **Leading zeros** are allowed in `new1` and `new2`, and **all** the digits found in `num` must be used.

*   For example, given `num = 2932`, you have the following digits: two `2`'s, one `9` and one `3`. Some of the possible pairs `[new1, new2]` are `[22, 93]`, `[23, 92]`, `[223, 9]` and `[2, 329]`.

Return _the **minimum** possible sum of_ `new1` _and_ `new2`.

**Example 1:**

**Input:** num = 2932
**Output:** 52
**Explanation:** Some possible pairs \[new1, new2\] are \[29, 23\], \[223, 9\], etc.
The minimum sum can be obtained by the pair \[29, 23\]: 29 + 23 = 52.

**Example 2:**

**Input:** num = 4009
**Output:** 13
**Explanation:** Some possible pairs \[new1, new2\] are \[0, 49\], \[490, 0\], etc. 
The minimum sum can be obtained by the pair \[4, 9\]: 4 + 9 = 13.

**Constraints:**

*   `1000 <= num <= 9999`","```python
def min_operations(grid, x):
    min_element = min(min(row) for row in grid)
    min_ops = float('inf')

    base = min_element
    while True:
        operations = 0
        impossible = False
        for row in grid:
            if impossible:
                break
            for cell in row:
                diff = abs(cell - base)
                if diff % x != 0:
                    impossible = True
                    break
                operations += diff // x
        if impossible:
            break
        min_ops = min(min_ops, operations)
        base -= 1

    return -1 if min_ops == float('inf') else min_ops
```
"
Sort Even and Odd Indices Independently,Easy,"You are given a **0-indexed** integer array `nums`. Rearrange the values of `nums` according to the following rules:

1.  Sort the values at **odd indices** of `nums` in **non-increasing** order.
    *   For example, if `nums = [4,**1**,2,**3**]` before this step, it becomes `[4,**3**,2,**1**]` after. The values at odd indices `1` and `3` are sorted in non-increasing order.
2.  Sort the values at **even indices** of `nums` in **non-decreasing** order.
    *   For example, if `nums = [**4**,1,**2**,3]` before this step, it becomes `[**2**,1,**4**,3]` after. The values at even indices `0` and `2` are sorted in non-decreasing order.

Return _the array formed after rearranging the values of_ `nums`.

**Example 1:**

**Input:** nums = \[4,1,2,3\]
**Output:** \[2,3,4,1\]
**Explanation:** 
First, we sort the values present at odd indices (1 and 3) in non-increasing order.
So, nums changes from \[4,**1**,2,**3**\] to \[4,**3**,2,**1**\].
Next, we sort the values present at even indices (0 and 2) in non-decreasing order.
So, nums changes from \[**4**,1,**2**,3\] to \[**2**,3,**4**,1\].
Thus, the array formed after rearranging the values is \[2,3,4,1\].

**Example 2:**

**Input:** nums = \[2,1\]
**Output:** \[2,1\]
**Explanation:** 
Since there is exactly one odd index and one even index, no rearrangement of values takes place.
The resultant array formed is \[2,1\], which is the same as the initial array. 

**Constraints:**

*   `1 <= nums.length <= 100`
*   `1 <= nums[i] <= 100`","```python
def maxValue(events):
    events.sort(key=lambda a: a[1])

    dp = [0] * len(events)
    dp[0] = events[0][2]

    for i in range(1, len(events)):
        lastNonConflict = -1
        for j in range(i - 1, -1, -1):
            if events[j][1] < events[i][0]:
                lastNonConflict = j
                break
                
        includedValue = events[i][2]
        if lastNonConflict != -1:
            includedValue += dp[lastNonConflict]

        dp[i] = max(includedValue, dp[i - 1])

    return dp[-1]
```
"
Count Integers With Even Digit Sum,Easy,"Given a positive integer `num`, return _the number of positive integers **less than or equal to**_ `num` _whose digit sums are **even**_.

The **digit sum** of a positive integer is the sum of all its digits.

**Example 1:**

**Input:** num = 4
**Output:** 2
**Explanation:**
The only integers less than or equal to 4 whose digit sums are even are 2 and 4.    

**Example 2:**

**Input:** num = 30
**Output:** 14
**Explanation:**
The 14 integers less than or equal to 30 whose digit sums are even are
2, 4, 6, 8, 11, 13, 15, 17, 19, 20, 22, 24, 26, and 28.

**Constraints:**

*   `1 <= num <= 1000`","```python
def max_tasks(tasks, workers, pills, strength):
    tasks.sort()
    workers.sort()
    task_index = 0
    pill_index = pills
    completed_tasks = 0

    for worker_strength in workers:
        while pill_index > 0 and worker_strength + strength >= tasks[task_index]:
            worker_strength += strength
            pill_index -= 1
        
        if worker_strength >= tasks[task_index]:
            task_index += 1
            completed_tasks += 1

        if task_index >= len(tasks):
            break

    return completed_tasks
```

"
Most Frequent Number Following Key In an Array,Easy,"You are given a **0-indexed** integer array `nums`. You are also given an integer `key`, which is present in `nums`.

For every unique integer `target` in `nums`, **count** the number of times `target` immediately follows an occurrence of `key` in `nums`. In other words, count the number of indices `i` such that:

*   `0 <= i <= nums.length - 2`,
*   `nums[i] == key` and,
*   `nums[i + 1] == target`.

Return _the_ `target` _with the **maximum** count_. The test cases will be generated such that the `target` with maximum count is unique.

**Example 1:**

**Input:** nums = \[1,100,200,1,100\], key = 1
**Output:** 100
**Explanation:** For target = 100, there are 2 occurrences at indices 1 and 4 which follow an occurrence of key.
No other integers follow an occurrence of key, so we return 100.

**Example 2:**

**Input:** nums = \[2,2,2,2,3\], key = 2
**Output:** 2
**Explanation:** For target = 2, there are 3 occurrences at indices 1, 2, and 3 which follow an occurrence of key.
For target = 3, there is only one occurrence at index 4 which follows an occurrence of key.
target = 2 has the maximum number of occurrences following an occurrence of key, so we return 2.

**Constraints:**

*   `2 <= nums.length <= 1000`
*   `1 <= nums[i] <= 1000`
*   The test cases will be generated such that the answer is unique.","```python
def count_once_in_both(words1, words2):
    counter1 = {}
    counter2 = {}

    for word in words1:
        counter1[word] = counter1.get(word, 0) + 1
    for word in words2:
        counter2[word] = counter2.get(word, 0) + 1

    count = 0
    for item in counter1.items():
        if item[1] == 1 and counter2.get(item[0], 0) == 1:
            count += 1

    return count
```
"
Find All K-Distant Indices in an Array,Easy,"You are given a **0-indexed** integer array `nums` and two integers `key` and `k`. A **k-distant index** is an index `i` of `nums` for which there exists at least one index `j` such that `|i - j| <= k` and `nums[j] == key`.

Return _a list of all k-distant indices sorted in **increasing order**_.

**Example 1:**

**Input:** nums = \[3,4,9,1,3,9,5\], key = 9, k = 1
**Output:** \[1,2,3,4,5,6\]
**Explanation:** Here, `nums[2] == key` and `nums[5] == key. - For index 0, |0 - 2| > k and |0 - 5| > k, so there is no j` where `|0 - j| <= k` and `nums[j] == key. Thus, 0 is not a k-distant index. - For index 1, |1 - 2| <= k and nums[2] == key, so 1 is a k-distant index. - For index 2, |2 - 2| <= k and nums[2] == key, so 2 is a k-distant index. - For index 3, |3 - 2| <= k and nums[2] == key, so 3 is a k-distant index. - For index 4, |4 - 5| <= k and nums[5] == key, so 4 is a k-distant index. - For index 5, |5 - 5| <= k and nums[5] == key, so 5 is a k-distant index. - For index 6, |6 - 5| <= k and nums[5] == key, so 6 is a k-distant index.`
Thus, we return \[1,2,3,4,5,6\] which is sorted in increasing order. 

**Example 2:**

**Input:** nums = \[2,2,2,2,2\], key = 2, k = 2
**Output:** \[0,1,2,3,4\]
**Explanation:** For all indices i in nums, there exists some index j such that |i - j| <= k and nums\[j\] == key, so every index is a k-distant index. 
Hence, we return \[0,1,2,3,4\].

**Constraints:**

*   `1 <= nums.length <= 1000`
*   `1 <= nums[i] <= 1000`
*   `key` is an integer from the array `nums`.
*   `1 <= k <= nums.length`","```python
def can_fit_stamps(grid, stampHeight, stampWidth):
    m, n = len(grid), len(grid[0])
    for i in range(m - stampHeight + 1):
        for j in range(n - stampWidth + 1):
            canFit = True
            for x in range(stampHeight):
                for y in range(stampWidth):
                    if grid[i + x][j + y] == 1:
                        canFit = False
                        break
                if not canFit:
                    break
            if canFit:
                return True
    return False
```
"
Divide Array Into Equal Pairs,Easy,"You are given an integer array `nums` consisting of `2 * n` integers.

You need to divide `nums` into `n` pairs such that:

*   Each element belongs to **exactly one** pair.
*   The elements present in a pair are **equal**.

Return `true` _if nums can be divided into_ `n` _pairs, otherwise return_ `false`.

**Example 1:**

**Input:** nums = \[3,2,3,2,2,2\]
**Output:** true
**Explanation:** 
There are 6 elements in nums, so they should be divided into 6 / 2 = 3 pairs.
If nums is divided into the pairs (2, 2), (3, 3), and (2, 2), it will satisfy all the conditions.

**Example 2:**

**Input:** nums = \[1,2,3,4\]
**Output:** false
**Explanation:** 
There is no way to divide nums into 4 / 2 = 2 pairs such that the pairs satisfy every condition.

**Constraints:**

*   `nums.length == 2 * n`
*   `1 <= n <= 500`
*   `1 <= nums[i] <= 500`","```python
from typing import List

def max_bombs_detonated(bombs: List[List[int]]) -> int:
    n = len(bombs)
    max_bombs = 0

    for i in range(n):
        count = 0
        for j in range(n):
            dx = bombs[i][0] - bombs[j][0]
            dy = bombs[i][1] - bombs[j][1]
            distance = dx * dx + dy * dy
            range_ = bombs[i][2] * bombs[i][2] + bombs[j][2] * bombs[j][2]
            if distance <= range_:
                count += 1
        max_bombs = max(max_bombs, count)

    return max_bombs
```

"
Count Hills and Valleys in an Array,Easy,"You are given a **0-indexed** integer array `nums`. An index `i` is part of a **hill** in `nums` if the closest non-equal neighbors of `i` are smaller than `nums[i]`. Similarly, an index `i` is part of a **valley** in `nums` if the closest non-equal neighbors of `i` are larger than `nums[i]`. Adjacent indices `i` and `j` are part of the **same** hill or valley if `nums[i] == nums[j]`.

Note that for an index to be part of a hill or valley, it must have a non-equal neighbor on **both** the left and right of the index.

Return _the number of hills and valleys in_ `nums`.

**Example 1:**

**Input:** nums = \[2,4,1,1,6,5\]
**Output:** 3
**Explanation:**
At index 0: There is no non-equal neighbor of 2 on the left, so index 0 is neither a hill nor a valley.
At index 1: The closest non-equal neighbors of 4 are 2 and 1. Since 4 > 2 and 4 > 1, index 1 is a hill. 
At index 2: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 2 is a valley.
At index 3: The closest non-equal neighbors of 1 are 4 and 6. Since 1 < 4 and 1 < 6, index 3 is a valley, but note that it is part of the same valley as index 2.
At index 4: The closest non-equal neighbors of 6 are 1 and 5. Since 6 > 1 and 6 > 5, index 4 is a hill.
At index 5: There is no non-equal neighbor of 5 on the right, so index 5 is neither a hill nor a valley. 
There are 3 hills and valleys so we return 3.

**Example 2:**

**Input:** nums = \[6,6,5,5,4,1\]
**Output:** 0
**Explanation:**
At index 0: There is no non-equal neighbor of 6 on the left, so index 0 is neither a hill nor a valley.
At index 1: There is no non-equal neighbor of 6 on the left, so index 1 is neither a hill nor a valley.
At index 2: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 2 is neither a hill nor a valley.
At index 3: The closest non-equal neighbors of 5 are 6 and 4. Since 5 < 6 and 5 > 4, index 3 is neither a hill nor a valley.
At index 4: The closest non-equal neighbors of 4 are 5 and 1. Since 4 < 5 and 4 > 1, index 4 is neither a hill nor a valley.
At index 5: There is no non-equal neighbor of 1 on the right, so index 5 is neither a hill nor a valley.
There are 0 hills and valleys so we return 0.

**Constraints:**

*   `3 <= nums.length <= 100`
*   `1 <= nums[i] <= 100`","```python
def sorted_target_indices(nums, target):
    result = [i for i, num in enumerate(nums) if num == target]
    return sorted(result)
```
"
Find the Difference of Two Arrays,Easy,"Given two **0-indexed** integer arrays `nums1` and `nums2`, return _a list_ `answer` _of size_ `2` _where:_

*   `answer[0]` _is a list of all **distinct** integers in_ `nums1` _which are **not** present in_ `nums2`_._
*   `answer[1]` _is a list of all **distinct** integers in_ `nums2` _which are **not** present in_ `nums1`.

**Note** that the integers in the lists may be returned in **any** order.

**Example 1:**

**Input:** nums1 = \[1,2,3\], nums2 = \[2,4,6\]
**Output:** \[\[1,3\],\[4,6\]\]
**Explanation:**
For nums1, nums1\[1\] = 2 is present at index 0 of nums2, whereas nums1\[0\] = 1 and nums1\[2\] = 3 are not present in nums2. Therefore, answer\[0\] = \[1,3\].
For nums2, nums2\[0\] = 2 is present at index 1 of nums1, whereas nums2\[1\] = 4 and nums2\[2\] = 6 are not present in nums2. Therefore, answer\[1\] = \[4,6\].

**Example 2:**

**Input:** nums1 = \[1,2,3,3\], nums2 = \[1,1,2,2\]
**Output:** \[\[3\],\[\]\]
**Explanation:**
For nums1, nums1\[2\] and nums1\[3\] are not present in nums2. Since nums1\[2\] == nums1\[3\], their value is only included once and answer\[0\] = \[3\].
Every integer in nums2 is present in nums1. Therefore, answer\[1\] = \[\].

**Constraints:**

*   `1 <= nums1.length, nums2.length <= 1000`
*   `-1000 <= nums1[i], nums2[i] <= 1000`","```python
from itertools import permutations

def unique_permutations(digits):
    unique_perms = set(permutations(digits))
    unique_ints = sorted({int(''.join(map(str, perm))) for perm in unique_perms})
    
    return unique_ints
```
"
Check if an Array Is Consecutive,Easy,"Given an integer array `nums`, return `true` _if_ `nums` _is **consecutive**, otherwise return_ `false`_._

An array is **consecutive** if it contains every number in the range `[x, x + n - 1]` (**inclusive**), where `x` is the minimum number in the array and `n` is the length of the array.

**Example 1:**

**Input:** nums = \[1,3,4,2\]
**Output:** true
**Explanation:**
The minimum value is 1 and the length of nums is 4.
All of the values in the range \[x, x + n - 1\] = \[1, 1 + 4 - 1\] = \[1, 4\] = (1, 2, 3, 4) occur in nums.
Therefore, nums is consecutive.

**Example 2:**

**Input:** nums = \[1,3\]
**Output:** false
**Explanation:**
The minimum value is 1 and the length of nums is 2.
The value 2 in the range \[x, x + n - 1\] = \[1, 1 + 2 - 1\], = \[1, 2\] = (1, 2) does not occur in nums.
Therefore, nums is not consecutive.

**Example 3:**

**Input:** nums = \[3,5,4\]
**Output:** true
**Explanation:**
The minimum value is 3 and the length of nums is 3.
All of the values in the range \[x, x + n - 1\] = \[3, 3 + 3 - 1\] = \[3, 5\] = (3, 4, 5) occur in nums.
Therefore, nums is consecutive.

**Constraints:**

*   `1 <= nums.length <= 105`
*   `0 <= nums[i] <= 105`","```python
from bisect import bisect_left

def maxFruits(fruits, startPos, k):
    n = len(fruits)
    left, right = [0] * (n + 1), [0] * (n + 1)
    j = 0

    for i in range(n):
        while j < n and fruits[j][0] - fruits[i][0] <= k:
            right[i + 1] += fruits[j][1]
            j += 1
        right[i + 1] += right[i]
        if j < n and fruits[j][0] - startPos <= k:
            right[0] += fruits[j][1]
            j += 1

    j = n - 1
    for i in range(n - 1, -1, -1):
        while j >= 0 and fruits[j][0] - fruits[i][0] <= k:
            left[i] += fruits[j][1]
            j -= 1
        left[i] += left[i + 1]

    ans = 0
    for i in range(n):
        rest = max(0, k - abs(fruits[i][0] - startPos))
        idx = bisect_left(fruits, [fruits[i][0] + rest, 0])
        ans = max(ans, left[i] + right[idx])

    return ans
```

"
Largest Number After Digit Swaps by Parity,Easy,"You are given a positive integer `num`. You may swap any two digits of `num` that have the same **parity** (i.e. both odd digits or both even digits).

Return _the **largest** possible value of_ `num` _after **any** number of swaps._

**Example 1:**

**Input:** num = 1234
**Output:** 3412
**Explanation:** Swap the digit 3 with the digit 1, this results in the number 3214.
Swap the digit 2 with the digit 4, this results in the number 3412.
Note that there may be other sequences of swaps but it can be shown that 3412 is the largest possible number.
Also note that we may not swap the digit 4 with the digit 1 since they are of different parities.

**Example 2:**

**Input:** num = 65875
**Output:** 87655
**Explanation:** Swap the digit 8 with the digit 6, this results in the number 85675.
Swap the first digit 5 with the digit 7, this results in the number 87655.
Note that there may be other sequences of swaps but it can be shown that 87655 is the largest possible number.

**Constraints:**

*   `1 <= num <= 109`","```python
def first_palindrome(words):
    for word in words:
        if word == word[::-1]:
            return word
    return """"
```

"
Intersection of Multiple Arrays,Easy,"Given a 2D integer array `nums` where `nums[i]` is a non-empty array of **distinct** positive integers, return _the list of integers that are present in **each array** of_ `nums` _sorted in **ascending order**_.

**Example 1:**

**Input:** nums = \[\[**3**,1,2,**4**,5\],\[1,2,**3**,**4**\],\[**3**,**4**,5,6\]\]
**Output:** \[3,4\]
**Explanation:** 
The only integers present in each of nums\[0\] = \[**3**,1,2,**4**,5\], nums\[1\] = \[1,2,**3**,**4**\], and nums\[2\] = \[**3**,**4**,5,6\] are 3 and 4, so we return \[3,4\].

**Example 2:**

**Input:** nums = \[\[1,2,3\],\[4,5,6\]\]
**Output:** \[\]
**Explanation:** 
There does not exist any integer present both in nums\[0\] and nums\[1\], so we return an empty list \[\].

**Constraints:**

*   `1 <= nums.length <= 1000`
*   `1 <= sum(nums[i].length) <= 1000`
*   `1 <= nums[i][j] <= 1000`
*   All the values of `nums[i]` are **unique**.","```python
def min_cost(cost):
    cost.sort(reverse=True)
    n = len(cost)
    min_cost = 0

    for i in range(0, n, 3):
        min_cost += cost[i]
        if i+1 < n:
            min_cost += cost[i+1]

    return min_cost
```
"
Count Prefixes of a Given String,Easy,"You are given a string array `words` and a string `s`, where `words[i]` and `s` comprise only of **lowercase English letters**.

Return _the **number of strings** in_ `words` _that are a **prefix** of_ `s`.

A **prefix** of a string is a substring that occurs at the beginning of the string. A **substring** is a contiguous sequence of characters within a string.

**Example 1:**

**Input:** words = \[ ""a "", ""b "", ""c "", ""ab "", ""bc "", ""abc ""\], s =  ""abc ""
**Output:** 3
**Explanation:**
The strings in words which are a prefix of s =  ""abc "" are:
 ""a "",  ""ab "", and  ""abc "".
Thus the number of strings in words which are a prefix of s is 3.

**Example 2:**

**Input:** words = \[ ""a "", ""a ""\], s =  ""aa ""
**Output:** 2
**Explanation:**
Both of the strings are a prefix of s. 
Note that the same string can occur multiple times in words, and it should be counted each time.

**Constraints:**

*   `1 <= words.length <= 1000`
*   `1 <= words[i].length, s.length <= 10`
*   `words[i]` and `s` consist of lowercase English letters **only**.","```python
def minSwaps(nums):
    ones = maxOnes = currOnes = left = 0

    for num in nums:
        ones += num

    for right in range(len(nums)):
        currOnes += nums[right]

        if right - left + 1 > ones:
            currOnes -= nums[left]
            left += 1

        maxOnes = max(maxOnes, currOnes)

    return ones - maxOnes
```
"
Remove Digit From Number to Maximize Result,Easy,"You are given a string `number` representing a **positive integer** and a character `digit`.

Return _the resulting string after removing **exactly one occurrence** of_ `digit` _from_ `number` _such that the value of the resulting string in **decimal** form is **maximized**_. The test cases are generated such that `digit` occurs at least once in `number`.

**Example 1:**

**Input:** number =  ""123 "", digit =  ""3 ""
**Output:**  ""12 ""
**Explanation:** There is only one '3' in  ""123 "". After removing '3', the result is  ""12 "".

**Example 2:**

**Input:** number =  ""1231 "", digit =  ""1 ""
**Output:**  ""231 ""
**Explanation:** We can remove the first '1' to get  ""231 "" or remove the second '1' to get  ""123 "".
Since 231 > 123, we return  ""231 "".

**Example 3:**

**Input:** number =  ""551 "", digit =  ""5 ""
**Output:**  ""51 ""
**Explanation:** We can remove either the first or second '5' from  ""551 "".
Both result in the string  ""51 "".

**Constraints:**

*   `2 <= number.length <= 100`
*   `number` consists of digits from `'1'` to `'9'`.
*   `digit` is a digit from `'1'` to `'9'`.
*   `digit` occurs at least once in `number`.","```python
def max_number_after_remove_digit(number: str, digit: str) -> str:
    index = number.find(digit)
    return number[:index] + number[index + 1:]
```
"
Find the K-Beauty of a Number,Easy,"The **k-beauty** of an integer `num` is defined as the number of **substrings** of `num` when it is read as a string that meet the following conditions:

*   It has a length of `k`.
*   It is a divisor of `num`.

Given integers `num` and `k`, return _the k-beauty of_ `num`.

Note:

*   **Leading zeros** are allowed.
*   `0` is not a divisor of any value.

A **substring** is a contiguous sequence of characters in a string.

**Example 1:**

**Input:** num = 240, k = 2
**Output:** 2
**Explanation:** The following are the substrings of num of length k:
-  ""24 "" from  ""**24**0 "": 24 is a divisor of 240.
-  ""40 "" from  ""2**40** "": 40 is a divisor of 240.
Therefore, the k-beauty is 2.

**Example 2:**

**Input:** num = 430043, k = 2
**Output:** 2
**Explanation:** The following are the substrings of num of length k:
-  ""43 "" from  ""**43**0043 "": 43 is a divisor of 430043.
-  ""30 "" from  ""4**30**043 "": 30 is not a divisor of 430043.
-  ""00 "" from  ""43**00**43 "": 0 is not a divisor of 430043.
-  ""04 "" from  ""430**04**3 "": 4 is not a divisor of 430043.
-  ""43 "" from  ""4300**43** "": 43 is a divisor of 430043.
Therefore, the k-beauty is 2.

**Constraints:**

*   `1 <= num <= 109`
*   `1 <= k <= num.length` (taking `num` as a string)","```python
def num_elements_with_smaller_and_greater(nums):
    n = len(nums)
    res = 0
    for i in range(n):
        has_smaller = has_greater = False
        for j in range(n):
            if i == j:
                continue
            if nums[j] > nums[i]:
                has_greater = True
            if nums[j] < nums[i]:
                has_smaller = True
            if has_smaller and has_greater:
                res += 1
                break
    return res
```
"
Find Resultant Array After Removing Anagrams,Easy,"You are given a **0-indexed** string array `words`, where `words[i]` consists of lowercase English letters.

In one operation, select any index `i` such that `0 < i < words.length` and `words[i - 1]` and `words[i]` are **anagrams**, and **delete** `words[i]` from `words`. Keep performing this operation as long as you can select an index that satisfies the conditions.

Return `words` _after performing all operations_. It can be shown that selecting the indices for each operation in **any** arbitrary order will lead to the same result.

An **Anagram** is a word or phrase formed by rearranging the letters of a different word or phrase using all the original letters exactly once. For example, `""dacb ""` is an anagram of `""abdc ""`.

**Example 1:**

**Input:** words = \[ ""abba "", ""baba "", ""bbaa "", ""cd "", ""cd ""\]
**Output:** \[ ""abba "", ""cd ""\]
**Explanation:**
One of the ways we can obtain the resultant array is by using the following operations:
- Since words\[2\] =  ""bbaa "" and words\[1\] =  ""baba "" are anagrams, we choose index 2 and delete words\[2\].
  Now words = \[ ""abba "", ""baba "", ""cd "", ""cd ""\].
- Since words\[1\] =  ""baba "" and words\[0\] =  ""abba "" are anagrams, we choose index 1 and delete words\[1\].
  Now words = \[ ""abba "", ""cd "", ""cd ""\].
- Since words\[2\] =  ""cd "" and words\[1\] =  ""cd "" are anagrams, we choose index 2 and delete words\[2\].
  Now words = \[ ""abba "", ""cd ""\].
We can no longer perform any operations, so \[ ""abba "", ""cd ""\] is the final answer.

**Example 2:**

**Input:** words = \[ ""a "", ""b "", ""c "", ""d "", ""e ""\]
**Output:** \[ ""a "", ""b "", ""c "", ""d "", ""e ""\]
**Explanation:**
No two adjacent strings in words are anagrams of each other, so no operations are performed.

**Constraints:**

*   `1 <= words.length <= 100`
*   `1 <= words[i].length <= 10`
*   `words[i]` consists of lowercase English letters.","```python
def anagramOperations(words):
    i = 1
    while i < len(words):
        word1 = sorted(words[i])
        word2 = sorted(words[i - 1])
        if word1 == word2:
            del words[i]
        else:
            i += 1
    return words
```

"
Check if Number Has Equal Digit Count and Digit Value,Easy,"You are given a **0-indexed** string `num` of length `n` consisting of digits.

Return `true` _if for **every** index_ `i` _in the range_ `0 <= i < n`_, the digit_ `i` _occurs_ `num[i]` _times in_ `num`_, otherwise return_ `false`.

**Example 1:**

**Input:** num =  ""1210 ""
**Output:** true
**Explanation:**
num\[0\] = '1'. The digit 0 occurs once in num.
num\[1\] = '2'. The digit 1 occurs twice in num.
num\[2\] = '1'. The digit 2 occurs once in num.
num\[3\] = '0'. The digit 3 occurs zero times in num.
The condition holds true for every index in  ""1210 "", so return true.

**Example 2:**

**Input:** num =  ""030 ""
**Output:** false
**Explanation:**
num\[0\] = '0'. The digit 0 should occur zero times, but actually occurs twice in num.
num\[1\] = '3'. The digit 1 should occur three times, but actually occurs zero times in num.
num\[2\] = '0'. The digit 2 occurs zero times in num.
The indices 0 and 1 both violate the condition, so return false.

**Constraints:**

*   `n == num.length`
*   `1 <= n <= 10`
*   `num` consists of digits.","```python
def rearrange_array(nums):
    nums.sort()
    for i in range(1, len(nums) - 1, 2):
        nums[i], nums[i + 1] = nums[i + 1], nums[i]
    return nums
```
"
Rearrange Characters to Make Target String,Easy,"You are given two **0-indexed** strings `s` and `target`. You can take some letters from `s` and rearrange them to form new strings.

Return _the **maximum** number of copies of_ `target` _that can be formed by taking letters from_ `s` _and rearranging them._

**Example 1:**

**Input:** s =  ""ilovecodingonleetcode "", target =  ""code ""
**Output:** 2
**Explanation:**
For the first copy of  ""code "", take the letters at indices 4, 5, 6, and 7.
For the second copy of  ""code "", take the letters at indices 17, 18, 19, and 20.
The strings that are formed are  ""ecod "" and  ""code "" which can both be rearranged into  ""code "".
We can make at most two copies of  ""code "", so we return 2.

**Example 2:**

**Input:** s =  ""abcba "", target =  ""abc ""
**Output:** 1
**Explanation:**
We can make one copy of  ""abc "" by taking the letters at indices 0, 1, and 2.
We can make at most one copy of  ""abc "", so we return 1.
Note that while there is an extra 'a' and 'b' at indices 3 and 4, we cannot reuse the letter 'c' at index 2, so we cannot make a second copy of  ""abc "".

**Example 3:**

**Input:** s =  ""abbaccaddaeea "", target =  ""aaaaa ""
**Output:** 1
**Explanation:**
We can make one copy of  ""aaaaa "" by taking the letters at indices 0, 3, 6, 9, and 12.
We can make at most one copy of  ""aaaaa "", so we return 1.

**Constraints:**

*   `1 <= s.length <= 100`
*   `1 <= target.length <= 10`
*   `s` and `target` consist of lowercase English letters.","```python
def maxNumberOfCopies(s, target):
    s_counts = [0] * 26
    target_counts = [0] * 26

    for c in s:
        s_counts[ord(c) - ord('a')] += 1

    for c in target:
        target_counts[ord(c) - ord('a')] += 1

    max_copies = float('inf')
    for i in range(26):
        if target_counts[i] > 0:
            max_copies = min(max_copies, s_counts[i] // target_counts[i])
    return max_copies
```

"
Check if Matrix Is X-Matrix,Easy,"A square matrix is said to be an **X-Matrix** if **both** of the following conditions hold:

1.  All the elements in the diagonals of the matrix are **non-zero**.
2.  All other elements are 0.

Given a 2D integer array `grid` of size `n x n` representing a square matrix, return `true` _if_ `grid` _is an X-Matrix_. Otherwise, return `false`.

**Example 1:**

**Input:** grid = \[\[2,0,0,1\],\[0,3,1,0\],\[0,5,2,0\],\[4,0,0,2\]\]
**Output:** true
**Explanation:** Refer to the diagram above. 
An X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.
Thus, grid is an X-Matrix.

**Example 2:**

**Input:** grid = \[\[5,7,0\],\[0,3,1\],\[0,5,0\]\]
**Output:** false
**Explanation:** Refer to the diagram above.
An X-Matrix should have the green elements (diagonals) be non-zero and the red elements be 0.
Thus, grid is not an X-Matrix.

**Constraints:**

*   `n == grid.length == grid[i].length`
*   `3 <= n <= 100`
*   `0 <= grid[i][j] <= 105`","```python
def longest_repeat_substring(s, query_characters, query_indices):
    k = len(query_characters)
    lengths = []
    s_copy = list(s)

    for i in range(k):
        s_copy[query_indices[i]] = query_characters[i]
        max_len = cur_len = 1
        for j in range(1, len(s_copy)):
            if s_copy[j] == s_copy[j-1]:
                cur_len += 1
            else:
                max_len = max(max_len, cur_len)
                cur_len = 1
        max_len = max(max_len, cur_len)
        lengths.append(max_len)

    return lengths
```
"
