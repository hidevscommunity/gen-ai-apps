#region Using declarations
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Input;
using System.Windows.Media;
using System.Xml.Serialization;
using NinjaTrader.Cbi;
using NinjaTrader.Gui;
using NinjaTrader.Gui.Chart;
using NinjaTrader.Gui.SuperDom;
using NinjaTrader.Gui.Tools;
using NinjaTrader.Data;
using NinjaTrader.NinjaScript;
using NinjaTrader.Core.FloatingPoint;
using NinjaTrader.NinjaScript.DrawingTools;
using System.IO;
#endregion

//This namespace holds Indicators in this folder and is required. Do not change it. 
namespace NinjaTrader.NinjaScript.Indicators
{
    public class ceroDTE : Indicator
    {
        private List<QuoteData> quotes = new List<QuoteData>();

        private IDrawingTool drawingTool;

        protected override void OnStateChange()
        {
            if (State == State.SetDefaults)
            {
                Description = @"Enter the description for your new custom Indicator here.";
                Name = "ceroDTE";
                Calculate = Calculate.OnBarClose;
                IsOverlay = false;
                DisplayInDataBox = true;
                DrawOnPricePanel = true;
                DrawHorizontalGridLines = true;
                DrawVerticalGridLines = true;
                PaintPriceMarkers = true;
                ScaleJustification = NinjaTrader.Gui.Chart.ScaleJustification.Right;
                //Disable this property if your indicator requires custom values that cumulate with each new market data event. 
                //See Help Guide for additional information.
                IsSuspendedWhileInactive = true;
                Level1 = 1;
                Level2 = 1;
                Level3 = 1;
                Level4 = 1;
            }
            else if (State == State.Configure)
            {
                // Load quotes from csv file
                string filePath = Path.Combine(Environment.CurrentDirectory, "Operativa", "spx_quotedata.csv");
                if (File.Exists(filePath))
                {
                    using (var reader = new StreamReader(filePath))
                    {
                        while (!reader.EndOfStream)
                        {
                            var line = reader.ReadLine();
                            var values = line.Split(',');

                            DateTime dateTime;
                            if (DateTime.TryParse(values[0], out dateTime))
                            {
                                double open, high, low, close, volume;
                                if (double.TryParse(values[1], out open) &&
                                    double.TryParse(values[2], out high) &&
                                    double.TryParse(values[3], out low) &&
                                    double.TryParse(values[4], out close) &&
                                    double.TryParse(values[5], out volume))
                                {
                                    quotes.Add(new QuoteData
                                    {
                                        Time = dateTime,
                                        Open = open,
                                        High = high,
                                        Low = low,
                                        Close = close,
                                        Volume = volume
                                    });
                                }
                            }
                        }
                    }
                }
                else
                {
                    Print("Error: File not found - " + filePath);
                }
            }
            else if (State == State.DataLoaded)
            {
                // Define the price level for the horizontal line
                double priceLevel = 4000;

                // Define the pen to draw the horizontal line
                Pen pen = new Pen(Brushes.Red, 2);

                // Create the horizontal line drawing tool
                HorizontalLine line = DrawTools().AddHorizontalLine(priceLevel, pen);

                // Draw the horizontal line
                line.DrawOnPricePanel = true;
                line.IsSelectable = false;
                line.IsEditable = false
            }

        }
	}
	

#region NinjaScript generated code. Neither change nor remove.

namespace NinjaTrader.NinjaScript.Indicators
{
	public partial class Indicator : NinjaTrader.Gui.NinjaScript.IndicatorRenderBase
	{
		private ceroDTE[] cacheceroDTE;
		public ceroDTE ceroDTE()
		{
			return ceroDTE(Input);
		}

		public ceroDTE ceroDTE(ISeries<double> input)
		{
			if (cacheceroDTE != null)
				for (int idx = 0; idx < cacheceroDTE.Length; idx++)
					if (cacheceroDTE[idx] != null &&  cacheceroDTE[idx].EqualsInput(input))
						return cacheceroDTE[idx];
			return CacheIndicator<ceroDTE>(new ceroDTE(), input, ref cacheceroDTE);
		}
	}
}

namespace NinjaTrader.NinjaScript.MarketAnalyzerColumns
{
	public partial class MarketAnalyzerColumn : MarketAnalyzerColumnBase
	{
		public Indicators.ceroDTE ceroDTE()
		{
			return indicator.ceroDTE(Input);
		}

		public Indicators.ceroDTE ceroDTE(ISeries<double> input )
		{
			return indicator.ceroDTE(input);
		}
	}
}

namespace NinjaTrader.NinjaScript.Strategies
{
	public partial class Strategy : NinjaTrader.Gui.NinjaScript.StrategyRenderBase
	{
		public Indicators.ceroDTE ceroDTE()
		{
			return indicator.ceroDTE(Input);
		}

		public Indicators.ceroDTE ceroDTE(ISeries<double> input )
		{
			return indicator.ceroDTE(input);
		}
	}
}



